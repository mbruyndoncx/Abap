<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZIC_CONTAINER">
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <CLAS CLSNAME="ZCL_IC_SCREEN_MANAGER" VERSION="1" LANGU="E" DESCRIPT="IC Screen manager" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <method CLSNAME="ZCL_IC_SCREEN_MANAGER" CMPNAME="DO_PAI" VERSION="1" LANGU="E" DESCRIPT="Dynpro PAI" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DO_PAI.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_SCREEN_MANAGER" CMPNAME="DO_PBO" VERSION="1" LANGU="E" DESCRIPT="Dynpro PBO" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SCREEN_MANAGER" CMPNAME="DO_PBO" SCONAME="IM_SCREEN_VALUES" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>method DO_PBO.
endmethod.</source>
  </method>
 </CLAS>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <DOMA DOMNAME="ZIC_OR_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_OR_MAPPING" MASKLEN="0000" DDTEXT="IC Object relational number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DTEL ROLLNAME="ZIC_OR_NR" DDLANGUAGE="E" DOMNAME="ZIC_OR_NR" ROUTPUTLEN="000000" HEADLEN="27" SCRLEN1="09" SCRLEN2="09" SCRLEN3="09" DDTEXT="IC Object relational number" REPTEXT="IC object relational number" SCRTEXT_S="OR-number" SCRTEXT_M="OR-number" SCRTEXT_L="OR-number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_OR_MAPPING" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_KEY_CHILD" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="09" SCRLEN1="09" SCRLEN2="09" SCRLEN3="09" DDTEXT="IC Key child" REPTEXT="Key child" SCRTEXT_S="Key child" SCRTEXT_M="Key child" SCRTEXT_L="Key child" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_KEY_NAME" DDLANGUAGE="E" DOMNAME="CHAR25" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="03" SCRLEN2="08" SCRLEN3="08" DDTEXT="IC Key name" REPTEXT="Key name" SCRTEXT_S="Key" SCRTEXT_M="Key name" SCRTEXT_L="Key name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000025" DECIMALS="000000" OUTPUTLEN="000025" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_KEY_NR" DDLANGUAGE="E" DOMNAME="NUMC2" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="06" SCRLEN2="10" SCRLEN3="10" DDTEXT="IC Key number" REPTEXT="Key number" SCRTEXT_S="Key nr" SCRTEXT_M="Key number" SCRTEXT_L="Key number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000002" DECIMALS="000000" OUTPUTLEN="000002" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_KEY_PARENT" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="10" SCRLEN3="10" DDTEXT="IC Key parent" REPTEXT="Key parent" SCRTEXT_S="Key parent" SCRTEXT_M="Key parent" SCRTEXT_L="Key parent" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <FUGR AREA="ZIC_MAPPING_FK" SPRAS="E" AREAT="Extended Table Maintenance (Generated)">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZIC_MAPPING_FK" SQLX="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="001" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <dynpros>
    <dynpro PROG="SAPLZIC_MAPPING_FK" DNUM="0001" FNUM="0001" BZMX="61 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="61 " NOCO="83 " VALP="0 " CUAN="G" SPRA="E" DTEXT="View maint: Overview screen ZIC_MAPPING_FK">
     <dynprofield FNAM="TCTRL_ZIC_MAPPING_FK" DIDX="003B" FLG1="F8" FLG2="FC" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="53" LINE="01" COLN="02" LTYP="E" LANF="65" LBLK="01" LREP="01" AUTH="101" AGLT="00" ADEZ="00"/>
     <dynprofield FNAM="VIM_FRAME_FIELD" DIDX="003C" FLG1="80" FLG2="02" FLG3="88" FMB1="30" FMB2="40" LENG="3C" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
     <dynprofield FNAM="*ZIC_MAPPING_FK-KEY_NAME" DIDX="0019" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Key name" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_MAPPING_FK-KEY_NUMBER" DIDX="0006" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="Key nr" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_MAPPING_FK-KEY_PARENT" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Key parent" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_MAPPING_FK-KEY_CHILD" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Key child" RES1="                                       00"/>
     <dynprofield FNAM="VIM_MARKED" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="_"/>
     <dynprofield FNAM="ZIC_MAPPING_FK-KEY_NAME" DIDX="0019" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="19" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="32" ADEZ="00" STXT="_________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_MAPPING_FK-KEY_NUMBER" DIDX="0006" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="02" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" GRP1="KEY" ITYP="N" AGLT="04" ADEZ="00" STXT="__" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_MAPPING_FK-KEY_PARENT" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_MAPPING_FK-KEY_CHILD" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="VIM_POSI_PUSH" DIDX="0014" FLG1="80" FLG2="00" FLG3="88" FILL="P" FMB1="30" FMB2="00" LENG="14" LINE="3D" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="____________________" RES1="                                                                                                                                                                        POSI"/>
     <dynprofield FNAM="VIM_POSITION_INFO" DIDX="001E" FLG1="80" FLG2="02" FLG3="88" FMB1="33" FMB2="00" LENG="1E" LINE="3D" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="______________________________"/>
     <dynprofield FNAM="OK_CODE" DIDX="0014" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE LISTE_INITIALISIEREN.
 LOOP AT EXTRACT WITH CONTROL
  TCTRL_ZIC_MAPPING_FK CURSOR NEXTLINE.
   MODULE LISTE_SHOW_LISTE.
 ENDLOOP.
*
PROCESS AFTER INPUT.
 MODULE LISTE_EXIT_COMMAND AT EXIT-COMMAND.
 MODULE LISTE_BEFORE_LOOP.
 LOOP AT EXTRACT.
   MODULE LISTE_INIT_WORKAREA.
   CHAIN.
    FIELD ZIC_MAPPING_FK-KEY_NAME .
    FIELD ZIC_MAPPING_FK-KEY_NUMBER .
    FIELD ZIC_MAPPING_FK-KEY_PARENT .
    FIELD ZIC_MAPPING_FK-KEY_CHILD .
    MODULE SET_UPDATE_FLAG ON CHAIN-REQUEST.
   ENDCHAIN.
   FIELD VIM_MARKED MODULE LISTE_MARK_CHECKBOX.
   CHAIN.
    FIELD ZIC_MAPPING_FK-KEY_NAME .
    FIELD ZIC_MAPPING_FK-KEY_NUMBER .
    MODULE LISTE_UPDATE_LISTE.
   ENDCHAIN.
 ENDLOOP.
 MODULE LISTE_AFTER_LOOP.</dynproflowsource>
    </dynpro>
   </dynpros>
   <source>* regenerated at 27.01.2015 20:42:37 by  BCUSER
*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZIC_MAPPING_FKTOP.                &quot; Global Data
  INCLUDE LZIC_MAPPING_FKUXX.                &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZIC_MAPPING_FKF...                &quot; Subroutines
* INCLUDE LZIC_MAPPING_FKO...                &quot; PBO-Modules
* INCLUDE LZIC_MAPPING_FKI...                &quot; PAI-Modules
* INCLUDE LZIC_MAPPING_FKE...                &quot; Events
* INCLUDE LZIC_MAPPING_FKP...                &quot; Local class implement.
  INCLUDE LZIC_MAPPING_FKF00                      . &quot; subprograms
  INCLUDE LZIC_MAPPING_FKI00                      . &quot; PAI modules
  INCLUDE LSVIMFXX                                . &quot; subprograms
  INCLUDE LSVIMOXX                                . &quot; PBO modules
  INCLUDE LSVIMIXX                                . &quot; PAI modules</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZIC_MAPPING_FKF00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 27.01.2015 at 20:42:37 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .</include_source>
   </include>
   <include NAME="LZIC_MAPPING_FKI00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related PAI modules
*   generation date: 27.01.2015 at 20:42:37 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

INCLUDE LSVIMITX . &quot;base table related PAI modules</include_source>
   </include>
   <include NAME="LZIC_MAPPING_FKTOP" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="001" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>* regenerated at 27.01.2015 20:42:37 by  BCUSER
FUNCTION-POOL ZIC_MAPPING_FK             MESSAGE-ID SV.

* INCLUDE LZIC_MAPPING_FKD...                &quot; Local class definition
  INCLUDE LSVIMDAT                                . &quot;general data decl.
  INCLUDE LZIC_MAPPING_FKT00                      . &quot;view rel. data dcl.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="TABLEFRAME_ZIC_MAPPING_FK" STEXT="Extended Table Maintenance: Upper Level">
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 002"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 003"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 004"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 005"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tabelle mit dynam. zu deaktivierenden CUA-Funkt." INDEX=" 006"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 007"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 008"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 009"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEFRAME_ZIC_MAPPING_FK
*   generation date: 27.01.2015 at 20:42:37 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEFRAME TABLES X_HEADER X_NAMTAB DBA_SELLIST DPL_SELLIST
                            EXCL_CUA_FUNCT
                     USING  CORR_NUMBER VIEW_ACTION VIEW_NAME.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="TABLEPROC_ZIC_MAPPING_FK" GLOBAL="X" STEXT="Lower-level extended table maintenance">
    <importing PARAMETER="FCODE" DEFAULT="&apos;RDED&apos;"/>
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <exporting PARAMETER="LAST_ACT_ENTRY"/>
    <exporting PARAMETER="UCOMM"/>
    <exporting PARAMETER="UPDATE_REQUIRED"/>
    <tables PARAMETER="CORR_KEYTAB" DBSTRUCT="E071K"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="EXTRACT"/>
    <tables PARAMETER="TOTAL"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <exceptions EXCEPTION="SAVING_CORRECTION_FAILED"/>
    <documentation PARAMETER="FCODE" KIND="P" STEXT="gewünschte Funktion des Bausteins" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 002"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 003"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 004"/>
    <documentation PARAMETER="LAST_ACT_ENTRY" KIND="P" STEXT="Index der Cursorposition in der Anzeigetabelle" INDEX=" 005"/>
    <documentation PARAMETER="UCOMM" KIND="P" STEXT="letztes User-command innerhalb der Viewpflege" INDEX=" 006"/>
    <documentation PARAMETER="UPDATE_REQUIRED" KIND="P" STEXT="Flag: Einträge verändert, Sichern erforderlich" INDEX=" 007"/>
    <documentation PARAMETER="CORR_KEYTAB" KIND="P" STEXT="Tabelle mit den Keys der zu transport. Einträge" INDEX=" 008"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 009"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 010"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tab. der nicht zu aktivierenden CUA-Funktionen" INDEX=" 011"/>
    <documentation PARAMETER="EXTRACT" KIND="P" STEXT="Tab. der gerade sichtbaren Daten (Anzeigetabelle" INDEX=" 012"/>
    <documentation PARAMETER="TOTAL" KIND="P" STEXT="Tabelle, mit allen von der DB gelesenen Daten" INDEX=" 013"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 014"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 015"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 016"/>
    <documentation PARAMETER="SAVING_CORRECTION_FAILED" KIND="X" STEXT="Fehler beim Sichern der Korrektureinträge" INDEX=" 017"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEPROC_ZIC_MAPPING_FK
*   generation date: 27.01.2015 at 20:42:37 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEPROC.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <TABL TABNAME="ZIC_MAPPING_FK" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Foreign key mapping" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="C" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_MAPPING_FK" AS4LOCAL="A" AS4VERS="0000" TABKAT="0" TABART="APPL2" SCHFELDANZ="000" PROTOKOLL="X" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_MAPPING_FK" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_MAPPING_FK" FIELDNAME="KEY_NAME" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_KEY_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000050" NOTNULL="X" DOMNAME="CHAR25" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="03" SCRLEN2="08" SCRLEN3="08" DTELMASTER="E" DATATYPE="CHAR" LENG="000025" OUTPUTLEN="000025" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Key name" REPTEXT="Key name" SCRTEXT_S="Key" SCRTEXT_M="Key name" SCRTEXT_L="Key name" DOMNAME3L="CHAR25" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_MAPPING_FK" FIELDNAME="KEY_NUMBER" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZIC_KEY_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000004" NOTNULL="X" DOMNAME="NUMC2" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="06" SCRLEN2="10" SCRLEN3="10" DTELMASTER="E" DATATYPE="NUMC" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC Key number" REPTEXT="Key number" SCRTEXT_S="Key nr" SCRTEXT_M="Key number" SCRTEXT_L="Key number" DOMNAME3L="NUMC2" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_MAPPING_FK" FIELDNAME="KEY_PARENT" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZIC_KEY_PARENT" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="10" SCRLEN3="10" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Key parent" REPTEXT="Key parent" SCRTEXT_S="Key parent" SCRTEXT_M="Key parent" SCRTEXT_L="Key parent" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_MAPPING_FK" FIELDNAME="KEY_CHILD" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_KEY_CHILD" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="09" SCRLEN1="09" SCRLEN2="09" SCRLEN3="09" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Key child" REPTEXT="Key child" SCRTEXT_S="Key child" SCRTEXT_M="Key child" SCRTEXT_L="Key child" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <DTEL ROLLNAME="ZIC_OR_KEY_NAME" DDLANGUAGE="E" DOMNAME="CHAR25" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="03" SCRLEN2="08" SCRLEN3="08" DDTEXT="IC object relational key name" REPTEXT="Key name" SCRTEXT_S="Key" SCRTEXT_M="Key name" SCRTEXT_L="Key name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000025" DECIMALS="000000" OUTPUTLEN="000025" REFKIND="D">
  <tpara/>
 </DTEL>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <CLAS CLSNAME="ZCL_IC_INJ_OBJ" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_IMPL_COMP">
  <types CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZIC_CLASS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="10 " SRCCOLUMN1="4 " SRCROW2="12 " SRCCOLUMN2="36 " TYPESRC_LENG="120 " TYPESRC="BEGIN OF ty_object_key ,
                    class_nr TYPE zic_class-class_nr,
                END  OF ty_object_key
"/>
  <types CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="TY_CLASS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZCL_IC_CLASS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="TY_CLASSES" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="36 " TYPESRC_LENG="35 " TYPESRC="ty_classes TYPE TABLE OF ty_class
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_INJ_OBJ" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <typeClasDef CLSNAME="ZCL_IC_INJ_OBJ" TYPEGROUP="ZCL_IC_CLASS_ATTRIB" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <typeClasDef CLSNAME="ZCL_IC_INJ_OBJ" TYPEGROUP="ZCL_IC_METHOD" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="C_INJ_OBJ_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_INJ_OBJ&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="M_CLASS_DESCR" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ABAP_CLASSDESCR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="M_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CLSNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="M_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_CONSTR_METHOD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="M_DEFAULT_CONSTR" VERSION="1" LANGU="E" DESCRIPT="Has IC Default Constructor" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTVALUE="ABAP_TRUE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CLASS_DEFCONSTR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="M_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Generated Object" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="M_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Type Name" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CLSNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_COMPOSITE~ADD" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_RELATIONS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_VALIDATING~VALIDATE" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJ" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_WIRABLE~WIRE" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJ" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD ZIF_IC_META_INFO~FILL_BY_STRUCT.

    FIELD-SYMBOLS: &lt;lwa_ic_class&gt; TYPE any.
    DATA l_struct TYPE ty_object.

    ASSIGN i_structure-&gt;* TO &lt;lwa_ic_class&gt;.

    MOVE-CORRESPONDING &lt;lwa_ic_class&gt; TO  l_struct.

* move data
    IF NOT l_struct IS INITIAL.

      m_object_number = l_struct-class_nr.
      m_name = l_struct-impl_name.
      m_description = l_struct-description.
      m_rank = l_struct-rank.
      m_class_name = l_struct-class_name.
      m_return_class_name = l_struct-return_class_name.
      m_default_constr = l_struct-default_constr.
    ENDIF.

    init( ).

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~FILL_BY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJ" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>METHOD ZIF_IC_META_INFO~GET_KEY_STRUCT.

    FIELD-SYMBOLS &lt;lwa_ic_class_key&gt; TYPE ty_object_key.
    DATA lwa_ic_class_key TYPE ty_object_key.

*   fill key data
    lwa_ic_class_key-class_nr = get_object_nr( ).


    CREATE DATA rt_comp_key_struct TYPE ty_object_key.
    ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_class_key&gt;.

    &lt;lwa_ic_class_key&gt; = lwa_ic_class_key.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_KEY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJ" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD ZIF_IC_META_INFO~GET_OBJ_STRUCT.

    FIELD-SYMBOLS &lt;lwa_ic_class&gt; TYPE ty_object.
    DATA lwa_ic_class TYPE ty_object.

* fill fields
    lwa_ic_class-class_nr = zif_ic_component~get_object_nr( ).
    lwa_ic_class-impl_name = m_name.
    lwa_ic_class-description = m_description.
    lwa_ic_class-rank = m_rank.
    lwa_ic_class-class_name = m_class_name.
    lwa_ic_class-return_class_name = m_return_class_name.
    lwa_ic_class-default_constr = m_default_constr.
    lwa_ic_class-PATH = get_path( ).

    CREATE DATA rt_obj_struct TYPE ty_object.
    ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_class&gt;.

    &lt;lwa_ic_class&gt; = lwa_ic_class.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_OBJ_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJ" CPDNAME="ZIF_IC_META_INFO~GET_RELATIONS">
   <source>method ZIF_IC_META_INFO~GET_RELATIONS.
  DATA: lwa_rel TYPE zif_ic_meta_info~ty_relation.

  super-&gt;zif_ic_meta_info~get_relations( IMPORTING ex_relations = ex_relations ).

* Add relation 1
  clear lwa_rel.

  lwa_rel-rel_type = &apos;CR&apos;.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_method_type.

  APPEND lwa_rel TO ex_relations.

* Add relation 1
  clear lwa_rel.

  lwa_rel-rel_type = &apos;CR&apos;.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_class_attrib_type.

  APPEND lwa_rel TO ex_relations.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJ" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD zif_ic_meta_info~get_table_name.
    rt_table_name = c_inj_obj_table.
  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_TABLE_NAME</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJ" CPDNAME="ZIF_IC_VALIDATING~VALIDATE">
   <source>METHOD ZIF_IC_VALIDATING~VALIDATE.
  CONSTANTS: lc_field_cl_name TYPE typename VALUE &apos;ZIC_CLSNAME&apos;,
           lc_field_return TYPE typename VALUE &apos;ZIC_CLSNAME&apos;.

  DATA: lwa_msg TYPE scx_t100key.

  super-&gt;zif_ic_validating~validate( CHANGING ch_validate = ch_validate ).

* empty fields
  IF m_class_name IS INITIAL.
    CLEAR lwa_msg.
    lwa_msg = zcx_ic_error=&gt;err_empty_field.
    lwa_msg-attr1 = zcl_ic_utils=&gt;get_field_label( lc_field_cl_name ).

    ch_validate-&gt;add_ic_error( im_path = get_path( )
                               im_message = lwa_msg ).
  ENDIF.

  IF m_return_class_name IS INITIAL.
    CLEAR lwa_msg.
    lwa_msg = zcx_ic_error=&gt;err_empty_field.
    lwa_msg-attr1 = zcl_ic_utils=&gt;get_field_label( lc_field_return ).

    ch_validate-&gt;add_ic_error( im_path = get_path( )
                               im_message = lwa_msg ).
  ENDIF.

*class errors
  IF m_class_name IS NOT INITIAL.

    cl_abap_typedescr=&gt;describe_by_name(
        EXPORTING p_name = m_class_name
        EXCEPTIONS    type_not_found = 1
                      OTHERS         = 2 ).

    IF sy-subrc = 1.
      CLEAR lwa_msg.
      lwa_msg = zcx_ic_error=&gt;err_class_not_exist.
      lwa_msg-attr1 = m_class_name.

      ch_validate-&gt;add_ic_error( im_path = get_path( )
                                 im_message = lwa_msg ).
    ELSEIF sy-subrc = 2.
      CLEAR lwa_msg.
      lwa_msg = zcx_ic_error=&gt;err_class_not_inst.
      lwa_msg-attr1 = m_class_name.

      ch_validate-&gt;add_ic_error( im_path = get_path( )
                                 im_message = lwa_msg ).
    ENDIF.

  ENDIF.

  IF m_return_class_name IS NOT INITIAL.

    cl_abap_typedescr=&gt;describe_by_name(
        EXPORTING p_name = m_return_class_name
        EXCEPTIONS    type_not_found = 1
                      OTHERS         = 2 ).

    IF sy-subrc = 1.
      CLEAR lwa_msg.
      lwa_msg = zcx_ic_error=&gt;err_class_not_exist.
      lwa_msg-attr1 = m_return_class_name.

      ch_validate-&gt;add_ic_error( im_path = get_path( )
                                 im_message = lwa_msg ).
    ELSEIF sy-subrc = 2.
      CLEAR lwa_msg.
      lwa_msg = zcx_ic_error=&gt;err_class_not_inst.
      lwa_msg-attr1 = m_return_class_name.

      ch_validate-&gt;add_ic_error( im_path = get_path( )
                                 im_message = lwa_msg ).
    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJ" CPDNAME="ZIF_IC_COMPOSITE~ADD">
   <source>METHOD ZIF_IC_COMPOSITE~ADD.
  super-&gt;zif_ic_composite~add( i_component ).

  IF i_component-&gt;get_type( ) = zcl_ic_method=&gt;c_method_type.
    DATA lo_method TYPE REF TO zcl_ic_method.

    lo_method ?= i_component.

    IF lo_method-&gt;is_constr_method( ) = abap_true.
      DATA lo_constr_method TYPE REF TO zcl_ic_constr_method.

      lo_constr_method = zcl_ic_method=&gt;promote_to_constructor( lo_method ).
      set_constr_method( lo_constr_method ).

      INSERT lo_constr_method-&gt;zif_ic_component~tab_entry( ) INTO TABLE m_childs.
    ENDIF.
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJ" CPDNAME="ZIF_IC_WIRABLE~WIRE">
   <source>METHOD ZIF_IC_WIRABLE~WIRE.

  IF zif_ic_wirable~m_is_wired = abap_false.
    wire_constructor( ).
    wire_attribs( ).

    wire_methods( i_is_setter_wiring = abap_true ).
    wire_methods( ).

    zif_ic_wirable~m_is_wired = abap_true.
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS_NR" VERSION="1" LANGU="E" DESCRIPT="Class number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_IMPL_COMP_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" SCONAME="I_PARENT" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTEXT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Type Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLSNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" SCONAME="I_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Type Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLSNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" SCONAME="I_DEFAULT_CONSTR" VERSION="1" LANGU="E" DESCRIPT="Has default constructor" CMPTYPE="1" MTDTYPE="2" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLASS_DEFCONSTR" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="CONSTRUCTOR" SCONAME="I_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="TODO Foreign key to Method" CMPTYPE="1" MTDTYPE="2" EDITORDER="9 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D" PAROPTIONL="X"/>
   <source>METHOD CONSTRUCTOR.

    super-&gt;constructor(
      EXPORTING
        i_impl_comp_nr = i_class_nr
        i_name = i_name
        i_description = i_description
        i_type = zcl_ic_impl_comp=&gt;c_impl_class
        i_parent = i_parent
        i_rank = i_rank
      ).

    m_class_name = i_class_name.

    IF m_return_class_name IS NOT INITIAL.
      m_return_class_name = i_return_class_name.
    ELSE.
      m_return_class_name = m_class_name.
    ENDIF.

    m_default_constr = i_default_constr.

    init( ).
  ENDMETHOD.                    &quot;CONSTRUCTOR</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Getter of an Attribute" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_ATTRIB" SCONAME="IM_ATTRIB_NR" VERSION="1" LANGU="E" DESCRIPT="IC class attribute number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_ATTRIB_NR"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_ATTRIB" SCONAME="RT_IC_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB"/>
   <source>METHOD GET_ATTRIB.

  rt_ic_attrib ?=  me-&gt;zif_ic_composite~get_child(
                         i_comp_type  = zcl_ic_object=&gt;c_class_attrib_type
                         i_object_nr  = im_attrib_nr ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Get class attributes" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_ATTRIBS" SCONAME="E_ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Class attributes" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_IC_CLASS_ATTRIB=&gt;TY_CLASS_ATTRIBS"/>
   <source>METHOD GET_ATTRIBS.
  DATA l_child TYPE zif_ic_component~ty_comp_tab_entry.

  LOOP AT m_childs INTO l_child WHERE comp_type = zcl_ic_class=&gt;c_class_attrib_type.
    DATA lo_attrib TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

    lo_attrib ?= l_child-comp.
    APPEND lo_attrib TO e_attribs.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_CLASS_DESCR" VERSION="1" LANGU="E" DESCRIPT="Gets the class description object" EXPOSURE="2" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_CLASS_DESCR" SCONAME="RT_CLASS_DESCR" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_CLASSDESCR"/>
   <source>METHOD GET_CLASS_DESCR.
  rt_class_descr = m_class_descr.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Get the class name of the impl. component." EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_CLASS_NAME" SCONAME="RT_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_CLSNAME"/>
   <source>method GET_CLASS_NAME.
  rt_class_name = m_class_name.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="Returns the constructor method" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_CONSTR_METHOD" SCONAME="RT_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC constructor method" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CONSTR_METHOD"/>
   <source>METHOD GET_CONSTR_METHOD.
  DATA  lwa_child TYPE zif_ic_component=&gt;ty_comp_tab_entry.

  LOOP AT m_childs INTO lwa_child WHERE comp_type = zcl_ic_object=&gt;c_method_type.
    DATA lo_method TYPE REF TO zcl_ic_method.

    lo_method ?= lwa_child-comp.

    IF lo_method-&gt;is_constr_method( ) =  abap_true.
      rt_constr_method ?= lo_method.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_METHOD" VERSION="1" LANGU="E" DESCRIPT="Getter of a method" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_METHOD" SCONAME="IM_METHOD_NR" VERSION="1" LANGU="E" DESCRIPT="IC method number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_METHOD_NR"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_METHOD" SCONAME="RT_IC_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Container Context Method" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_METHOD"/>
   <source>method GET_METHOD.

   rt_ic_method ?=  me-&gt;zif_ic_composite~get_child(
                          i_comp_type  = zcl_ic_object=&gt;c_method_type
                          i_object_nr  = im_method_nr ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_METHODS" VERSION="1" LANGU="E" DESCRIPT="Returns the methods" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_METHODS" SCONAME="E_METHODS" VERSION="1" LANGU="E" DESCRIPT="IC Methods from the class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_IC_METHOD=&gt;TY_METHODS"/>
   <source>METHOD GET_METHODS.

  DATA l_child TYPE zif_ic_component~ty_comp_tab_entry.


  LOOP AT m_childs INTO l_child WHERE comp_type = zcl_ic_class=&gt;c_method_type.
    DATA lo_method TYPE zcl_ic_method=&gt;ty_method.

    lo_method ?= l_child-comp.
    APPEND lo_method TO e_methods.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Getter for the generated class object" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_OBJECT" SCONAME="RT_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Returned class object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="OBJECT"/>
   <source>METHOD GET_OBJECT.
  rt_object = m_object.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Get the return class name of the impl. component." EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="GET_RETURN_CLASS_NAME" SCONAME="RT_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_CLSNAME"/>
   <source>method GET_RETURN_CLASS_NAME.
  rt_class_name = m_return_class_name.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="HAS_DEFAULT_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Has class a default constructor" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="HAS_DEFAULT_CONSTRUCTOR" SCONAME="RT_HAS_DEF_CONSTR" VERSION="1" LANGU="E" DESCRIPT="Has IC default constructor" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_CLASS_DEFCONSTR"/>
   <source>METHOD HAS_DEFAULT_CONSTRUCTOR.
  rt_has_def_constr = m_default_constr.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD INIT.
  super-&gt;init( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Set the class name of the impl. component." EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_CLASS_NAME" SCONAME="I_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLSNAME"/>
   <source>method SET_CLASS_NAME.
  m_class_name = i_class_name.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="Sets the constructor method" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_CONSTR_METHOD" SCONAME="I_CONSTR_METHOD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONSTR_METHOD"/>
   <source>METHOD SET_CONSTR_METHOD.
  m_constr_method = i_constr_method.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_DEFAULT_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Setter for has a default constructor" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_DEFAULT_CONSTRUCTOR" SCONAME="I_DEF_CONSTR" VERSION="1" LANGU="E" DESCRIPT="Has IC Default Constructor" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLASS_DEFCONSTR"/>
   <source>method SET_DEFAULT_CONSTRUCTOR.
  m_default_constr = i_def_constr.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Setter for the class object" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_OBJECT" SCONAME="I_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Class object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="OBJECT"/>
   <source>METHOD SET_OBJECT.
  m_object = i_object.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="set the return class name of the impl. component." EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="SET_RETURN_CLASS_NAME" SCONAME="I_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLSNAME"/>
   <source>method SET_RETURN_CLASS_NAME.
  m_return_class_name = i_return_class_name.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="WIRE_ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Wire class attributes" EXPOSURE="1" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="WIRE_ATTRIBS" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD WIRE_ATTRIBS.
  DATA: lit_attribs TYPE zcl_ic_class_attrib=&gt;ty_class_attribs,
        lwa_attrib  TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

  get_attribs( IMPORTING e_attribs = lit_attribs ).

  LOOP AT lit_attribs INTO lwa_attrib.
    lwa_attrib-&gt;zif_ic_wirable~wire( ).
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="WIRE_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Build Constructor of the class object" EXPOSURE="1" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="WIRE_CONSTRUCTOR" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD WIRE_CONSTRUCTOR.

  IF m_default_constr = abap_true.
    CREATE OBJECT m_object TYPE (m_class_name).
  ELSE.
    IF get_constr_method( ) IS NOT INITIAL.
      get_constr_method( )-&gt;zif_ic_wirable~wire( ).
    ENDIF.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="WIRE_GETTER_ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Wire class attributes when getters" EXPOSURE="1" STATE="1" EDITORDER="19 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD WIRE_GETTER_ATTRIBS.
  DATA: lit_attribs TYPE zcl_ic_class_attrib=&gt;ty_class_attribs,
        lo_attrib  TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

  get_attribs( IMPORTING e_attribs = lit_attribs ).

*  LOOP AT lit_attribs INTO lo_attrib.
*
*    IF lo_attrib-&gt;get_ic_value( )-&gt;get_type( ) = zcl_ic_value=&gt;c_value_type_attrib.
*       DATA: lo_attrib_value TYPE REF TO zcl_ic_class_attrib_value.
*
*      break bcuser.
*     lo_attrib_value ?= lo_attrib-&gt;get_ic_value( ).
*
*     lo_attrib-&gt;get_ic_getter_method( )-&gt;get_class_attrib
*
*    ENDIF.
*
*  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="WIRE_METHODS" VERSION="1" LANGU="E" DESCRIPT="Wire methods" EXPOSURE="1" STATE="1" EDITORDER="20 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="WIRE_METHODS" SCONAME="I_IS_SETTER_WIRING" VERSION="1" LANGU="E" DESCRIPT="Is setter or no setter wiring" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="WIRE_METHODS" SCONAME="I_IS_GETTER_WIRING" VERSION="1" LANGU="E" DESCRIPT="Is getter or no getter wiring" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="SPACE"/>
   <exception CLSNAME="ZCL_IC_INJ_OBJ" CMPNAME="WIRE_METHODS" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD WIRE_METHODS.
  DATA: lo_methods TYPE zcl_ic_method=&gt;ty_methods,
      lo_method TYPE zcl_ic_method=&gt;ty_method.

  get_methods( IMPORTING e_methods = lo_methods ).

  LOOP AT lo_methods INTO lo_method.

    IF lo_method-&gt;is_constr_method( ) = abap_false
      AND lo_method-&gt;is_setter_method( ) = i_is_setter_wiring
      AND lo_method-&gt;is_getter_method( ) = i_is_getter_wiring.

      lo_method-&gt;zif_ic_wirable~wire( ).
    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <CLAS CLSNAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CX_STATIC_CHECK">
  <implementing CLSNAME="ZCX_IC_ERROR" REFCLSNAME="IF_T100_MESSAGE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_IC_ERROR" CMPNAME="ERR_CLASS_NOT_EXIST" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="43 " SRCCOLUMN1="6 " SRCROW2="50 " SRCCOLUMN2="33 " LOCKED="X" TYPESRC_LENG="343 " TYPESRC="BEGIN OF err_class_not_exist,
          msgid TYPE symsgid VALUE &apos;ZIC_ERROR_MSG&apos;,
          msgno TYPE symsgno VALUE &apos;002&apos;,
          attr1 TYPE scx_attrname VALUE &apos;&apos;,
          attr2 TYPE scx_attrname VALUE &apos;&apos;,
          attr3 TYPE scx_attrname VALUE &apos;&apos;,
          attr4 TYPE scx_attrname VALUE &apos;&apos;,
        END OF err_class_not_exist
"/>
  <attribute CLSNAME="ZCX_IC_ERROR" CMPNAME="ERR_CLASS_NOT_INST" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="34 " SRCCOLUMN1="6 " SRCROW2="41 " SRCCOLUMN2="32 " LOCKED="X" TYPESRC_LENG="332 " TYPESRC="BEGIN OF err_class_not_inst,
          msgid TYPE symsgid VALUE &apos;AREN&apos;,
          msgno TYPE symsgno VALUE &apos;295&apos;,
          attr1 TYPE scx_attrname VALUE &apos;&apos;,
          attr2 TYPE scx_attrname VALUE &apos;&apos;,
          attr3 TYPE scx_attrname VALUE &apos;&apos;,
          attr4 TYPE scx_attrname VALUE &apos;&apos;,
        END OF err_class_not_inst
"/>
  <attribute CLSNAME="ZCX_IC_ERROR" CMPNAME="ERR_EMPTY_FIELD" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="25 " SRCCOLUMN1="6 " SRCROW2="32 " SRCCOLUMN2="29 " LOCKED="X" TYPESRC_LENG="335 " TYPESRC="BEGIN OF err_empty_field,
          msgid TYPE symsgid VALUE &apos;ZIC_ERROR_MSG&apos;,
          msgno TYPE symsgno VALUE &apos;001&apos;,
          attr1 TYPE scx_attrname VALUE &apos;&apos;,
          attr2 TYPE scx_attrname VALUE &apos;&apos;,
          attr3 TYPE scx_attrname VALUE &apos;&apos;,
          attr4 TYPE scx_attrname VALUE &apos;&apos;,
        END OF err_empty_field
"/>
  <attribute CLSNAME="ZCX_IC_ERROR" CMPNAME="ERR_METHOD_NOT_EXIST" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="52 " SRCCOLUMN1="6 " SRCROW2="59 " SRCCOLUMN2="34 " LOCKED="X" TYPESRC_LENG="345 " TYPESRC="BEGIN OF err_method_not_exist,
          msgid TYPE symsgid VALUE &apos;ZIC_ERROR_MSG&apos;,
          msgno TYPE symsgno VALUE &apos;003&apos;,
          attr1 TYPE scx_attrname VALUE &apos;&apos;,
          attr2 TYPE scx_attrname VALUE &apos;&apos;,
          attr3 TYPE scx_attrname VALUE &apos;&apos;,
          attr4 TYPE scx_attrname VALUE &apos;&apos;,
        END OF err_method_not_exist
"/>
  <attribute CLSNAME="ZCX_IC_ERROR" CMPNAME="ERR_PARAM_MANDT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="61 " SRCCOLUMN1="6 " SRCROW2="68 " SRCCOLUMN2="29 " LOCKED="X" TYPESRC_LENG="335 " TYPESRC="BEGIN OF err_param_mandt,
          msgid TYPE symsgid VALUE &apos;ZIC_ERROR_MSG&apos;,
          msgno TYPE symsgno VALUE &apos;004&apos;,
          attr1 TYPE scx_attrname VALUE &apos;&apos;,
          attr2 TYPE scx_attrname VALUE &apos;&apos;,
          attr3 TYPE scx_attrname VALUE &apos;&apos;,
          attr4 TYPE scx_attrname VALUE &apos;&apos;,
        END OF err_param_mandt
"/>
  <attribute CLSNAME="ZCX_IC_ERROR" CMPNAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="16 " SRCCOLUMN1="6 " SRCROW2="23 " SRCCOLUMN2="26 " LOCKED="X" TYPESRC_LENG="329 " TYPESRC="BEGIN OF zcx_ic_error,
          msgid TYPE symsgid VALUE &apos;ZIC_ERROR_MSG&apos;,
          msgno TYPE symsgno VALUE &apos;000&apos;,
          attr1 TYPE scx_attrname VALUE &apos;&apos;,
          attr2 TYPE scx_attrname VALUE &apos;&apos;,
          attr3 TYPE scx_attrname VALUE &apos;&apos;,
          attr4 TYPE scx_attrname VALUE &apos;&apos;,
        END OF zcx_ic_error
"/>
  <inheritance CLSNAME="ZCX_IC_ERROR" REFCLSNAME="CX_STATIC_CHECK" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCX_IC_ERROR" CMPNAME="CREATE_ERROR" VERSION="1" LANGU="E" DESCRIPT="Create an error from a validate object" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCX_IC_ERROR" CMPNAME="CREATE_ERROR" SCONAME="IM_VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validation IC object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_VALIDATE"/>
   <parameter CLSNAME="ZCX_IC_ERROR" CMPNAME="CREATE_ERROR" SCONAME="RT_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCX_IC_ERROR"/>
   <source>METHOD create_error.
  DATA: lwa_msg TYPE zif_ic_validate=&gt;ty_message,
        lo_error TYPE REF TO zcx_ic_error,
        lo_previous_error TYPE REF TO zcx_ic_error.

  LOOP AT im_validate-&gt;message_tab INTO lwa_msg WHERE type = zif_ic_validate=&gt;c_error.
    IF lo_previous_error IS NOT BOUND.
      CREATE OBJECT lo_error
        EXPORTING
          textid = lwa_msg-msg.
    ELSE.
      CREATE OBJECT lo_error
        EXPORTING
          textid   = lwa_msg-msg
          previous = lo_previous_error.
    ENDIF.

    lo_previous_error = lo_error.
  ENDLOOP.

  rt_error = lo_error.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_VALUE" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZIC_VALUE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_VALUE" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="13 " SRCCOLUMN2="24 " TYPESRC_LENG="100 " TYPESRC="BEGIN OF ty_object_key ,
           value_nr TYPE zic_value-value_nr ,
    END  OF ty_object_key
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="C_VALUE_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_VALUE&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="C_VALUE_TYPE_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;ATT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="C_VALUE_TYPE_DATA" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;DAT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="C_VALUE_TYPE_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;TYP&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="C_VALUE_TYPE_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;OBJ&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="C_VALUE_TYPE_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;PAR&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="C_VALUE_TYPE_SQL" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;SQL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="C_VALUE_TYPE_TABLE" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;TAB&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="M_DATA_REF" VERSION="1" LANGU="E" DESCRIPT="Value data ref" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_VALUE" CMPNAME="M_VALUE_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_VALUE" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_VALUE" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_VALUE" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_VALUE" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>METHOD zif_ic_meta_info~get_key_struct.
  FIELD-SYMBOLS &lt;lwa_ic_value_key&gt; TYPE ty_object_key.
  DATA lwa_ic_value_key TYPE ty_object_key.

*   fill key data
  lwa_ic_value_key-value_nr = get_object_nr( ).

  CREATE DATA rt_comp_key_struct TYPE ty_object_key.
  ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_value_key&gt;.

  &lt;lwa_ic_value_key&gt; = lwa_ic_value_key.
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_VALUE" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD zif_ic_meta_info~get_table_name.

  rt_table_name = c_value_table.

ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Constructor" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="I_VALUE_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE"/>
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="I_VALUE_NR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_VALUE_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <source>METHOD constructor.

  super-&gt;constructor( i_object_nr = i_value_nr
                    i_name =  i_name
                    i_description = i_description
                    i_rank = i_rank ).

  m_value_type = i_value_type.
  m_type = c_value_type.

  init( ).
  add_to_parent( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_REFERENCED_VALUE" VERSION="1" LANGU="E" DESCRIPT="Referenced value" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_REFERENCED_VALUE" SCONAME="E_REF_VALUE" VERSION="1" LANGU="E" DESCRIPT="Referenced value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD GET_REFERENCED_VALUE.
*If a reference value is changed (Exampe execute method in the parameter binding)
*extract the normal value from the data ref object.

  IF m_data_ref IS BOUND.
    e_ref_value = m_data_ref.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE" VERSION="1" LANGU="E" DESCRIPT="Get value" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE" SCONAME="E_VALUE" VERSION="1" LANGU="E" DESCRIPT="Any value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_DATA_REF" VERSION="1" LANGU="E" DESCRIPT="Get data ref of a value" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_DATA_REF" SCONAME="RT_DATA_REF" VERSION="1" LANGU="E" DESCRIPT="Data ref with value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD get_value_data_ref.
* Create a reference with as contents another reference
* put it into a private member, because when m_data_ref is gone, there will be a freed stack
  m_data_ref = get_value_ref( ).

  CREATE DATA rt_data_ref TYPE REF TO data.

  GET REFERENCE OF m_data_ref INTO rt_data_ref.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_REF" VERSION="1" LANGU="E" DESCRIPT="Get Reference object for value" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDABSTRCT="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_REF" SCONAME="I_TYPE_NAME" VERSION="1" LANGU="E" DESCRIPT="Type name to cast to" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L_TYP" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_REF" SCONAME="RT_VALUE_REF" VERSION="1" LANGU="E" DESCRIPT="Value reference" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Get value type" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_TYPE" SCONAME="RT_VALUE_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC Value Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_VALUE_TYPE"/>
   <source>method GET_VALUE_TYPE.
  rt_value_type = m_value_type.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validation" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="ZCL_IC_VALIDATE" REFCLSNAME="ZIF_IC_VALIDATE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_VALIDATE" CMPNAME="MESSAGE_TAB" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_VALIDATE" REFCMPNAME="MESSAGE_TAB" TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_IC_VALIDATE" CPDNAME="ZIF_IC_VALIDATE~ADD_IC_ERROR">
   <source>METHOD zif_ic_validate~add_ic_error.
  DATA lwa_msg TYPE me-&gt;zif_ic_validate~ty_message.

  lwa_msg-path = im_path.
  lwa_msg-type = zif_ic_validate~c_error.
  lwa_msg-msg = im_message.

  APPEND lwa_msg TO zif_ic_validate~message_tab.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_VALIDATE" CPDNAME="ZIF_IC_VALIDATE~ADD_IC_WARNING">
   <source>METHOD zif_ic_validate~add_ic_warning.
  DATA lwa_msg TYPE me-&gt;zif_ic_validate~ty_message.

  lwa_msg-path = im_path.
  lwa_msg-type = zif_ic_validate~c_warning.
  lwa_msg-msg = im_message.

  APPEND lwa_msg TO zif_ic_validate~message_tab.
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_VALIDATE" CPDNAME="ZIF_IC_VALIDATE~CLEAR">
   <source>METHOD zif_ic_validate~clear.
  REFRESH message_tab.
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_VALIDATE" CPDNAME="ZIF_IC_VALIDATE~HAS_ERRORS">
   <source>METHOD zif_ic_validate~has_errors.
  READ TABLE message_tab TRANSPORTING NO FIELDS WITH KEY type = zif_ic_validate=&gt;c_error.

  IF sy-subrc = 0.
    rt_has_errors = abap_true.
  ELSE.
    rt_has_errors = abap_false.
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_VALIDATE" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create validation object" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_VALIDATE" CMPNAME="CREATE" SCONAME="RT_VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validation IC object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_VALIDATE"/>
   <source>METHOD create.
  DATA lo_validate TYPE REF TO zcl_ic_validate.

  CREATE OBJECT lo_validate.

  rt_validate = lo_validate.
ENDMETHOD.</source>
  </method>
  <aliasMethod CLSNAME="ZCL_IC_VALIDATE" CMPNAME="ADD_IC_ERROR" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_VALIDATE" REFCMPNAME="ADD_IC_ERROR"/>
  <aliasMethod CLSNAME="ZCL_IC_VALIDATE" CMPNAME="ADD_IC_WARNING" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_VALIDATE" REFCMPNAME="ADD_IC_WARNING"/>
  <aliasMethod CLSNAME="ZCL_IC_VALIDATE" CMPNAME="CLEAR" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_VALIDATE" REFCMPNAME="CLEAR"/>
  <aliasMethod CLSNAME="ZCL_IC_VALIDATE" CMPNAME="HAS_ERRORS" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_VALIDATE" REFCMPNAME="HAS_ERRORS"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_UTILS" VERSION="1" LANGU="E" DESCRIPT="Utility class" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_UTILS" CMPNAME="TY_FIELD_CHANGE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="12 " SRCCOLUMN2="30 " TYPESRC_LENG="142 " TYPESRC="BEGIN OF  TY_FIELD_CHANGE,
            source_field type fieldname,
            new_field type fieldname,
         END OF TY_FIELD_CHANGE
"/>
  <types CLSNAME="ZCL_IC_UTILS" CMPNAME="TY_FIELD_CHANGE_TAB" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="14 " SRCCOLUMN1="4 " SRCROW2="14 " SRCCOLUMN2="61 " TYPESRC_LENG="60 " TYPESRC="TY_FIELD_CHANGE_tab TYPE standard TABLE OF ty_field_change
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_UTILS" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <method CLSNAME="ZCL_IC_UTILS" CMPNAME="ADD_FIELD_TO_STRUCTURE" VERSION="1" LANGU="E" DESCRIPT="Merge two structures." EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="ADD_FIELD_TO_STRUCTURE" SCONAME="IM_FIELD" VERSION="1" LANGU="E" DESCRIPT="Field to add" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="ADD_FIELD_TO_STRUCTURE" SCONAME="IM_FIELD_NAME" VERSION="1" LANGU="E" DESCRIPT="Field Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FIELDNAME"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="ADD_FIELD_TO_STRUCTURE" SCONAME="IM_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="ADD_FIELD_TO_STRUCTURE" SCONAME="RT_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Merged structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD add_field_to_structure.
  FIELD-SYMBOLS:  &lt;l_field&gt; TYPE any,
                  &lt;lwa_struct&gt; TYPE any,
                  &lt;lwa_merge&gt; TYPE any.

  DATA: lr_wa_merge TYPE REF TO data,
        lr_merge TYPE REF TO cl_abap_structdescr,
        lr_data TYPE REF TO cl_abap_datadescr,
        lr_struct TYPE REF TO cl_abap_structdescr,
        lit_comp_tab TYPE abap_component_tab,
        lwa_comp TYPE abap_componentdescr.

  lr_struct ?= cl_abap_structdescr=&gt;describe_by_data_ref( im_struct ).
  lr_data ?= cl_abap_typedescr=&gt;describe_by_data( im_field  ).
  lit_comp_tab = lr_struct-&gt;get_components( ).

  lwa_comp-name = im_field_name.
  lwa_comp-type = lr_data.
  APPEND lwa_comp TO lit_comp_tab.

  lr_merge ?= cl_abap_structdescr=&gt;get( lit_comp_tab ).

  CREATE DATA lr_wa_merge TYPE HANDLE lr_merge.
  ASSIGN lr_wa_merge-&gt;* TO &lt;lwa_merge&gt;.
  ASSIGN im_struct-&gt;* TO &lt;lwa_struct&gt;.

  MOVE-CORRESPONDING &lt;lwa_struct&gt; TO &lt;lwa_merge&gt;.

  ASSIGN COMPONENT im_field_name OF STRUCTURE &lt;lwa_merge&gt; TO &lt;l_field&gt;.
  &lt;l_field&gt; = im_field.

  GET REFERENCE OF &lt;lwa_merge&gt; INTO rt_struct.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_UTILS" CMPNAME="CHANGE_STRUCT_NAMES" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="CHANGE_STRUCT_NAMES" SCONAME="I_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Structure to change name from." CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="CHANGE_STRUCT_NAMES" SCONAME="I_FIELD_CHANGES" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_FIELD_CHANGE_TAB"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="CHANGE_STRUCT_NAMES" SCONAME="RT_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Changed structure." CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD change_struct_names.
  FIELD-SYMBOLS: &lt;lwa_comp&gt; TYPE abap_componentdescr,
                 &lt;lwa_struc1&gt; TYPE any,
                 &lt;lwa_struc2&gt; TYPE any,
                 &lt;l_comp1&gt; TYPE any,
                 &lt;l_comp2&gt; TYPE any.

  DATA: lr_struct TYPE REF TO cl_abap_structdescr,
        lit_comp_tab TYPE abap_component_tab,
        lwa_field_change TYPE ty_field_change,
        l_change_flag TYPE abap_bool VALUE abap_false.

  IF i_struct IS INITIAL OR i_field_changes IS INITIAL.
    rt_struct = i_struct.
    RETURN.
  ENDIF.

* create a new structure with new names
  lr_struct ?= cl_abap_structdescr=&gt;describe_by_data_ref( i_struct ).
  lit_comp_tab = lr_struct-&gt;get_components( ).

  LOOP AT lit_comp_tab ASSIGNING &lt;lwa_comp&gt;.
    READ TABLE i_field_changes
    WITH KEY source_field = &lt;lwa_comp&gt;-name
    INTO lwa_field_change.

    IF sy-subrc = 0.
      l_change_flag = abap_true.
      &lt;lwa_comp&gt;-name = lwa_field_change-new_field.
    ENDIF.

  ENDLOOP.

  IF l_change_flag = abap_false.
*   do no changes because no field changes
    rt_struct = i_struct.
    RETURN.
  ENDIF.

* assign 2 structures to field symbols and copy data

  ASSIGN i_struct-&gt;* TO &lt;lwa_struc1&gt;.
  lr_struct ?= cl_abap_structdescr=&gt;get( lit_comp_tab  ).

  CREATE DATA rt_struct TYPE HANDLE lr_struct.
  ASSIGN rt_struct-&gt;* TO &lt;lwa_struc2&gt;.

  MOVE-CORRESPONDING &lt;lwa_struc1&gt; TO &lt;lwa_struc2&gt;.

* Change value of components from old into new names
  LOOP AT i_field_changes INTO lwa_field_change.
    ASSIGN COMPONENT lwa_field_change-source_field
                    OF STRUCTURE &lt;lwa_struc1&gt; TO &lt;l_comp1&gt;.
    ASSIGN COMPONENT lwa_field_change-new_field
                    OF STRUCTURE &lt;lwa_struc2&gt; TO &lt;l_comp2&gt;.

    &lt;l_comp2&gt; = &lt;l_comp1&gt;.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_UTILS" CMPNAME="GET_FIELD_LABEL" VERSION="1" LANGU="E" DESCRIPT="Return field label" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="GET_FIELD_LABEL" SCONAME="IM_FIELD_NAME" VERSION="1" LANGU="E" DESCRIPT="Name of Dictionary Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYPENAME"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="GET_FIELD_LABEL" SCONAME="RT_LABEL" VERSION="1" LANGU="E" DESCRIPT="Medium Field Label" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SCRTEXT_M"/>
   <source>METHOD get_field_label.
  DATA: lo_descr TYPE REF TO cl_abap_elemdescr,
        lwa_data_info TYPE dfies.

  lo_descr ?= cl_abap_typedescr=&gt;describe_by_name( im_field_name ).

  IF lo_descr IS BOUND.

    lwa_data_info = lo_descr-&gt;get_ddic_field( syst-langu ).

    rt_label = lwa_data_info-scrtext_m.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_UTILS" CMPNAME="HAS_SUPERCLASS" VERSION="1" LANGU="E" DESCRIPT="Has an object a superclass with relative name?" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="HAS_SUPERCLASS" SCONAME="IM_REL_NAME" VERSION="1" LANGU="E" DESCRIPT="Relative class name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLASSNAME"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="HAS_SUPERCLASS" SCONAME="IM_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object to search" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="OBJECT"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="HAS_SUPERCLASS" SCONAME="RT_HAS_SUPER_CLASS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD has_superclass.
  CONSTANTS: lc_object_name TYPE classname VALUE &apos;OBJECT&apos;.

  DATA: lo_class_descr TYPE REF TO cl_abap_classdescr,
        l_class_name TYPE abap_abstypename.

  rt_has_super_class = abap_false.

  IF im_rel_name IS INITIAL
    AND im_object IS NOT BOUND.
    RETURN.
  ELSEIF im_rel_name = lc_object_name.
    rt_has_super_class = abap_true.
    RETURN.
  ENDIF.

  lo_class_descr ?= cl_abap_classdescr=&gt;describe_by_object_ref( im_object ).

  WHILE lo_class_descr-&gt;get_super_class_type( )-&gt;get_relative_name( ) &lt;&gt; lc_object_name.

    lo_class_descr = lo_class_descr-&gt;get_super_class_type( ).
    l_class_name = lo_class_descr-&gt;get_relative_name( ).

    IF l_class_name = im_rel_name.
      rt_has_super_class = abap_true.
      RETURN.
    ENDIF.

  ENDWHILE.




ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_UTILS" CMPNAME="MATCH_REF_TO_DATADESCR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="MATCH_REF_TO_DATADESCR" SCONAME="IM_DATA_REF" VERSION="1" LANGU="E" DESCRIPT="Data or object value to match" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="MATCH_REF_TO_DATADESCR" SCONAME="IM_DATA_DESCR" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_DATADESCR"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="MATCH_REF_TO_DATADESCR" SCONAME="RT_TYPES_MATCH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD match_ref_to_datadescr.
  CONSTANTS: lc_object TYPE abap_classname VALUE &apos;OBJECT&apos;.

  FIELD-SYMBOLS: &lt;ori_obj&gt; TYPE any,        &quot;Original object
                 &lt;sub_obj&gt; TYPE any.        &quot;inherited object

  DATA: lo_cl_descr TYPE REF TO cl_abap_classdescr,
        lo_data_descr TYPE REF TO cl_abap_datadescr,
        l_class_name TYPE string,
        l_ref_obj TYPE REF TO data,
        lo_ref_descr TYPE REF TO cl_abap_refdescr.

  rt_types_match = abap_false.
  lo_data_descr ?= cl_abap_datadescr=&gt;describe_by_data_ref( im_data_ref ).

  IF lo_data_descr IS NOT BOUND
    AND im_data_descr IS NOT BOUND.
    RETURN.
  ENDIF.

* Test if data
  IF im_data_descr-&gt;type_kind &lt;&gt; cl_abap_typedescr=&gt;typekind_oref
   AND lo_data_descr-&gt;type_kind &lt;&gt; cl_abap_typedescr=&gt;typekind_oref
   AND im_data_descr-&gt;applies_to_data_ref( im_data_ref ) = abap_true.

    rt_types_match = abap_true.
  ENDIF.

* Test if object
  IF im_data_descr-&gt;type_kind = cl_abap_typedescr=&gt;typekind_oref
    AND lo_data_descr-&gt;type_kind = cl_abap_typedescr=&gt;typekind_oref.

    CLEAR l_class_name.
    FREE lo_cl_descr.

    ASSIGN im_data_ref-&gt;* TO &lt;ori_obj&gt;.

    IF &lt;ori_obj&gt; IS NOT ASSIGNED.
      EXIT.
    ENDIF.

    IF &lt;ori_obj&gt; IS NOT BOUND.
      IF im_data_descr-&gt;applies_to_data_ref( im_data_ref ) = abap_true.
        rt_types_match = abap_true.
      ENDIF.

      EXIT.
    ENDIF.

    lo_cl_descr ?= cl_abap_classdescr=&gt;describe_by_object_ref( &lt;ori_obj&gt; ).

    WHILE lo_cl_descr IS BOUND
      AND l_class_name &lt;&gt; lc_object
      AND rt_types_match = abap_false
      AND &lt;ori_obj&gt; IS ASSIGNED.

      l_class_name = lo_cl_descr-&gt;absolute_name+7.
      lo_ref_descr = cl_abap_refdescr=&gt;create_by_name( l_class_name ).

      CREATE DATA l_ref_obj TYPE HANDLE lo_ref_descr.

      ASSIGN l_ref_obj-&gt;* TO &lt;sub_obj&gt;.
      &lt;sub_obj&gt; ?=  &lt;ori_obj&gt;.

      IF &lt;sub_obj&gt; IS ASSIGNED
        AND &lt;sub_obj&gt; IS BOUND.

        IF lo_data_descr-&gt;applies_to_data( &lt;sub_obj&gt; ) = abap_true.
          rt_types_match = abap_true.
        ENDIF.
      ENDIF.

      IF l_class_name &lt;&gt; lc_object.
        lo_cl_descr  = lo_cl_descr-&gt;get_super_class_type( ).
      ENDIF.

    ENDWHILE.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_UTILS" CMPNAME="MERGE_STRUCTURE" VERSION="1" LANGU="E" DESCRIPT="Merge two structures." EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="MERGE_STRUCTURE" SCONAME="I_STRUCT_A" VERSION="1" LANGU="E" DESCRIPT="Structure A" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="MERGE_STRUCTURE" SCONAME="I_STRUCT_B" VERSION="1" LANGU="E" DESCRIPT="Structure B" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="MERGE_STRUCTURE" SCONAME="RT_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Merged structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD merge_structure.
  FIELD-SYMBOLS:  &lt;lwa_a&gt; TYPE any,
                  &lt;lwa_b&gt; TYPE any,
                  &lt;lwa_merge&gt; TYPE any.

  DATA: lr_wa_merge TYPE REF TO data,
        lr_merge TYPE REF TO cl_abap_structdescr,
        lr_struct_a TYPE REF TO cl_abap_structdescr,
        lr_struct_b TYPE REF TO cl_abap_structdescr,
        lit_comp_tab_a TYPE abap_component_tab,
        lit_comp_tab_b TYPE abap_component_tab,
        lwa_comp TYPE abap_componentdescr.

  lr_struct_a ?= cl_abap_structdescr=&gt;describe_by_data_ref( i_struct_a ).
  lr_struct_b ?= cl_abap_structdescr=&gt;describe_by_data_ref( i_struct_b ).

  lit_comp_tab_a = lr_struct_a-&gt;get_components( ).
  lit_comp_tab_b = lr_struct_b-&gt;get_components( ).

  LOOP AT lit_comp_tab_b INTO lwa_comp.
    IF lwa_comp-name &lt;&gt; &apos;MANDT&apos;
      AND lwa_comp-name IS NOT INITIAL.

      APPEND lwa_comp TO lit_comp_tab_a.
    ENDIF.
  ENDLOOP.

  LOOP AT lit_comp_tab_a INTO lwa_comp.
    IF lwa_comp-as_include = abap_true
      OR lwa_comp-name IS INITIAL.

      DELETE lit_comp_tab_a INDEX sy-tabix.
    ENDIF.
  ENDLOOP.

  SORT lit_comp_tab_a BY name.
  DELETE ADJACENT DUPLICATES FROM lit_comp_tab_a COMPARING name.

  lr_merge ?= cl_abap_structdescr=&gt;get( lit_comp_tab_a  ).

  CREATE DATA lr_wa_merge TYPE HANDLE lr_merge.
  ASSIGN lr_wa_merge-&gt;* TO &lt;lwa_merge&gt;.

  ASSIGN i_struct_a-&gt;* TO &lt;lwa_a&gt;.
  ASSIGN i_struct_b-&gt;* TO &lt;lwa_b&gt;.

  MOVE-CORRESPONDING &lt;lwa_a&gt; TO &lt;lwa_merge&gt;.
  MOVE-CORRESPONDING &lt;lwa_b&gt; TO &lt;lwa_merge&gt;.

  GET REFERENCE OF &lt;lwa_merge&gt; INTO rt_struct.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_UTILS" CMPNAME="TRANSFORM_STRUCTURE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="TRANSFORM_STRUCTURE" SCONAME="I_STRUCT_FROM" VERSION="1" LANGU="E" DESCRIPT="Structure to take changes from" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="TRANSFORM_STRUCTURE" SCONAME="I_FIELD_CHANGES" VERSION="1" LANGU="E" DESCRIPT="Field changes" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_FIELD_CHANGE_TAB"/>
   <parameter CLSNAME="ZCL_IC_UTILS" CMPNAME="TRANSFORM_STRUCTURE" SCONAME="CH_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Structure to fill with values" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD transform_structure.
  FIELD-SYMBOLS: &lt;lwa_struc1&gt; TYPE any,
                 &lt;lwa_struc2&gt; TYPE any,
                 &lt;l_comp1&gt; TYPE any,
                 &lt;l_comp2&gt; TYPE any.

  DATA: lwa_field_change TYPE ty_field_change.

  IF ch_struct IS INITIAL OR i_field_changes IS INITIAL.
    RETURN.
  ENDIF.

* Change value of components from old into new names
  LOOP AT i_field_changes INTO lwa_field_change.
*   assign structures
    ASSIGN ch_struct-&gt;* TO &lt;lwa_struc1&gt;.
    ASSIGN i_struct_from-&gt;* TO &lt;lwa_struc2&gt;.
*   assign values to change
    ASSIGN COMPONENT lwa_field_change-new_field
                    OF STRUCTURE &lt;lwa_struc1&gt; TO &lt;l_comp1&gt;.
    ASSIGN COMPONENT lwa_field_change-source_field
                    OF STRUCTURE &lt;lwa_struc2&gt; TO &lt;l_comp2&gt;.

    &lt;l_comp1&gt; = &lt;l_comp2&gt;.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_TYPE_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value derived from InjectionType object" CATEGORY="00" EXPOSURE="1" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_VALUE">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="M_IC_INJ_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_INJ_OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="M_IC_TYPE_VALUE_NR" VERSION="1" LANGU="E" DESCRIPT="IC value number" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_VALUE_NR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_TYPE_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_TYPE_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_TYPE_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE_REF" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_TYPE_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_TYPE_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_TYPE_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_TYPE_VALUE" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.
  FIELD-SYMBOLS: &lt;lwa_ic_value&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_value&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_value&gt; TO l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-value_nr IS INITIAL.
      m_object_number = l_struct-value_nr.
    ENDIF.

    IF NOT l_struct-value_name IS INITIAL.
      m_name = l_struct-value_name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-rank IS INITIAL.
      m_rank = l_struct-rank.
    ENDIF.

    IF NOT l_struct-ic_type_value IS INITIAL.
      m_ic_type_value_nr = l_struct-ic_type_value.
    ENDIF.

  ENDIF.

  init( ).
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_TYPE_VALUE" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD ZIF_IC_META_INFO~GET_OBJ_STRUCT.
  FIELD-SYMBOLS &lt;lwa_ic_value&gt; TYPE zcl_ic_value=&gt;ty_object.
  DATA lwa_ic_value TYPE ty_object.

* fill fields
  lwa_ic_value-value_nr = zif_ic_component~get_object_nr( ).
  lwa_ic_value-value_name = zif_ic_component~get_name( ).
  lwa_ic_value-value_type = get_value_type( ).
  lwa_ic_value-description = get_description( ).
  lwa_ic_value-rank = get_rank( ).
  lwa_ic_value-ic_type_obj = get_ic_inj_obj( )-&gt;get_object_nr( ).
  lwa_ic_value-ic_type_value = m_ic_type_value_nr.

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_value&gt;.

  &lt;lwa_ic_value&gt; = lwa_ic_value.
ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="IM_IC_INJ_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_INJ_OBJECT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="IM_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_VALUE" PAROPTIONL="X"/>
   <source>METHOD constructor.
  super-&gt;constructor( i_value_type = zcl_ic_value=&gt;c_value_type_inj_type ).

  m_ic_inj_object = im_ic_inj_object.

  IF im_ic_value IS BOUND.
    m_ic_type_value_nr = im_ic_value-&gt;get_object_nr( ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create Data value" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="CREATE" SCONAME="IM_IC_INJ_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_INJ_OBJECT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="CREATE" SCONAME="IM_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_VALUE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="CREATE" SCONAME="RT_IC_TYPE_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value derived from InjectionType object" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_TYPE_VALUE"/>
   <source>METHOD CREATE.

  CREATE OBJECT rt_ic_type_value
    EXPORTING
      im_ic_inj_object = im_ic_inj_object
      im_ic_value = im_ic_value.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="GET_IC_INJ_OBJ" VERSION="1" LANGU="E" DESCRIPT="Getter for injection type object" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="GET_IC_INJ_OBJ" SCONAME="RT_IC_INJ_OBJ" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_INJ_OBJECT"/>
   <source>method GET_IC_INJ_OBJ.
  rt_ic_inj_obj = m_ic_inj_object.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="GET_IC_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Getter for the injection type" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="GET_IC_INJ_TYPE" SCONAME="RT_IC_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC injection type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_INJ_TYPE"/>
   <source>method GET_IC_INJ_TYPE.
  rt_ic_inj_type = get_ic_inj_obj( )-&gt;get_inj_type( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="GET_INJ_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="Get value from injection object/type" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="GET_INJ_IC_VALUE" SCONAME="RT_INJ_TYPE_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_VALUE"/>
   <source>method GET_INJ_IC_VALUE.
  rt_inj_type_value = get_ic_inj_obj( )-&gt;search_value( im_value_nr = m_ic_type_value_nr ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value.

  get_inj_ic_value( )-&gt;get_value( IMPORTING e_value = e_value ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_REF" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD GET_VALUE_REF.

  rt_value_ref = get_inj_ic_value( )-&gt;get_value_ref( i_type_name = i_type_name ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD INIT.
  super-&gt;init( ).
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="SET_IC_INJ_OBJ" VERSION="1" LANGU="E" DESCRIPT="Setter for injection type object" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="SET_IC_INJ_OBJ" SCONAME="IM_IC_INJ_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_INJ_OBJECT"/>
   <source>METHOD set_ic_inj_obj.
  m_ic_inj_object = im_ic_inj_object.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="SET_INJ_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="Set value from injection object/type" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TYPE_VALUE" CMPNAME="SET_INJ_IC_VALUE" SCONAME="IM_INJ_TYPE_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_VALUE"/>
   <source>method SET_INJ_IC_VALUE.
  m_ic_type_value_nr = im_inj_type_value-&gt;get_object_nr( ).
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_TEST" VERSION="1" LANGU="E" DESCRIPT="Test class" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_TEST" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="C_CONT_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_PATH" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_ATTRIB_CHANGE" VERSION="1" LANGU="E" DESCRIPT="Changed attrib" EXPOSURE="0" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TEXT20" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_ATTRIB_TEXT" VERSION="1" LANGU="E" DESCRIPT="Attrib text for getter" EXPOSURE="0" STATE="1" EDITORDER="12 " ATTDECLTYP="0" ATTVALUE="&apos;Attrib Text&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TEXT20" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_CHANGED_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Changed attrib" EXPOSURE="0" STATE="1" EDITORDER="14 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TEXT20" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_CONTAINER_TYPE_01" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" EXPOSURE="0" STATE="1" EDITORDER="15 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" EXPOSURE="0" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_IC_TEST1" VERSION="1" LANGU="E" DESCRIPT="Test class 1" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_TEST" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_IC_TEST2" VERSION="1" LANGU="E" DESCRIPT="Test class 2" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_TEST" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_IC_TEST3" VERSION="1" LANGU="E" DESCRIPT="Test class 3" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_TEST" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_IC_TEST4" VERSION="1" LANGU="E" DESCRIPT="Test class 4" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_TEST" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_IC_TEST5" VERSION="1" LANGU="E" DESCRIPT="Test class 5" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_TEST" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_IC_TEST_PARAM" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" EXPOSURE="0" STATE="1" EDITORDER="9 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_NAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_NAME_FROM_TYPE_OBJ" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" EXPOSURE="0" STATE="1" EDITORDER="16 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_NAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="M_SFLIGHT_REF" VERSION="1" LANGU="E" DESCRIPT="Sflight Table ref" EXPOSURE="0" STATE="1" EDITORDER="11 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TEST" CMPNAME="RANDOM_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Pseudo Random Number Generator" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ABAP_RANDOM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Constructor" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="CONSTRUCTOR" SCONAME="I_INJECT" VERSION="1" LANGU="E" DESCRIPT="Do injection" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <exception CLSNAME="ZCL_IC_TEST" CMPNAME="CONSTRUCTOR" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="2" EDITORDER="1 "/>
   <source>METHOD constructor.
  DATA: lo_obj TYPE REF TO object,
        lo_error TYPE REF TO zcx_ic_error.

  lo_obj = me.

  IF i_inject = abap_true.
    TRY.
        zcl_ic_service=&gt;inject( EXPORTING i_context_path = c_cont_path
                                CHANGING  ch_object = lo_obj ).
      CATCH zcx_ic_error into lo_error.
        RAISE EXCEPTION lo_error.
    ENDTRY.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Method Constructor without injection" EXPOSURE="2" STATE="1" EDITORDER="20 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="CREATE" SCONAME="RT_IC_TEST" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <exception CLSNAME="ZCL_IC_TEST" CMPNAME="CREATE" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATE.
  DATA LO_TEST TYPE ref to zcl_ic_test.

  CREATE OBJECT lo_test EXPORTING i_inject = abap_false .

  rt_ic_test = lo_test.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_ATTRIB_CHANGE" VERSION="1" LANGU="E" DESCRIPT="Getter for ATTRIB_CHANGE" EXPOSURE="2" STATE="1" EDITORDER="27 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_ATTRIB_CHANGE" SCONAME="RT_ATTRIB_CHANGE" VERSION="1" LANGU="E" DESCRIPT="Text (20 Characters)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TEXT20"/>
   <source>METHOD GET_ATTRIB_CHANGE.
  rt_attrib_change = m_attrib_change.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_ATTRIB_TEXT" VERSION="1" LANGU="E" DESCRIPT="Getter for Attrib text member to text Getter" EXPOSURE="2" STATE="1" EDITORDER="25 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_ATTRIB_TEXT" SCONAME="RT_ATTRIB_TEXT" VERSION="1" LANGU="E" DESCRIPT="Text (20 Characters)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TEXT20"/>
   <source>METHOD get_attrib_text.

  CONCATENATE &apos;Getter for &apos; m_attrib_text INTO rt_attrib_text SEPARATED BY SPACE.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_CHANGED_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Getter for CHANGED_ATTRIB" EXPOSURE="2" STATE="1" EDITORDER="28 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_CHANGED_ATTRIB" SCONAME="RT_CHANGED_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Text (20 Characters)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TEXT20"/>
   <source>METHOD get_changed_attrib.
  rt_changed_attrib = m_changed_attrib.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Getter for Container." EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_CONTAINER" SCONAME="RT_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <source>method GET_CONTAINER.
  rt_container = container.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_CONTAINER_TYPE_01" VERSION="1" LANGU="E" DESCRIPT="Getter for type injection object" EXPOSURE="2" STATE="1" EDITORDER="30 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_CONTAINER_TYPE_01" SCONAME="RT_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <source>METHOD get_container_type_01.
  rt_container = m_container_type_01.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Getter for the description" EXPOSURE="2" STATE="1" EDITORDER="19 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_DESCRIPTION" SCONAME="RT_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_DESCRIPTION"/>
   <source>METHOD get_description.
  rt_description = m_description.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_IC_TEST_PARAM" VERSION="1" LANGU="E" DESCRIPT="Getter for m_ic_test_param" EXPOSURE="2" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_IC_TEST_PARAM" SCONAME="RT_IC_TEST_PARAM" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_NAME"/>
   <source>METHOD get_ic_test_param.
  rt_ic_test_param = m_ic_test_param.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_NAME_FROM_TYPE_OBJ" VERSION="1" LANGU="E" DESCRIPT="Getter NAME_FROM_TYPE_OBJ" EXPOSURE="2" STATE="1" EDITORDER="32 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_NAME_FROM_TYPE_OBJ" SCONAME="RT_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_NAME"/>
   <source>METHOD get_name_from_type_obj.
  rt_name = m_name_from_type_obj.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_PARAM_TABLE_REF" VERSION="1" LANGU="E" DESCRIPT="Getter for Sflight table" EXPOSURE="2" STATE="1" EDITORDER="22 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_PARAM_TABLE_REF" SCONAME="RT_SFLIGHT_REF" VERSION="1" LANGU="E" DESCRIPT="Sflight data ref table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD get_param_table_ref.
  rt_sflight_ref = m_sflight_ref.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_RANDOM_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Getter for Random Object" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_RANDOM_OBJECT" SCONAME="RT_RANDOM_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Pseudo Random Number Generator" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_RANDOM"/>
   <source>METHOD get_random_object.
  rt_random_object = random_object.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT1" VERSION="1" LANGU="E" DESCRIPT="Getter for test object" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT1" SCONAME="RT_TEST_OBJECT1" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>method GET_TEST_OBJECT1.
  rt_test_object1 = m_ic_test1.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT2" VERSION="1" LANGU="E" DESCRIPT="Getter for test object" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT2" SCONAME="RT_TEST_OBJECT2" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>METHOD get_test_object2.
  rt_test_object2 = m_ic_test2.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT3" VERSION="1" LANGU="E" DESCRIPT="Getter for test object" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT3" SCONAME="RT_TEST_OBJECT3" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>METHOD get_test_object3.
  rt_test_object3 = m_ic_test3.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT4" VERSION="1" LANGU="E" DESCRIPT="Getter for test object" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT4" SCONAME="RT_TEST_OBJECT4" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>METHOD GET_TEST_OBJECT4.
  rt_test_object4 = m_ic_test4.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT5" VERSION="1" LANGU="E" DESCRIPT="Getter for test object" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="GET_TEST_OBJECT5" SCONAME="RT_TEST_OBJECT5" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>METHOD GET_TEST_OBJECT5.
  rt_test_object5 = m_ic_test5.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_ATTRIB_CHANGE" VERSION="1" LANGU="E" DESCRIPT="Setter for ATTRIB_CHANGE" EXPOSURE="2" STATE="1" EDITORDER="26 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_ATTRIB_CHANGE" SCONAME="IM_ATTRIB_CHANGE" VERSION="1" LANGU="E" DESCRIPT="Text (20 Characters)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TEXT20"/>
   <source>METHOD set_attrib_change.
  m_attrib_change = im_attrib_change.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_ATTRIB_TEXT" VERSION="1" LANGU="E" DESCRIPT="Getter Attrib text member" EXPOSURE="2" STATE="1" EDITORDER="24 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_ATTRIB_TEXT" SCONAME="IM_ATTRIB_TEXT" VERSION="1" LANGU="E" DESCRIPT="Text (20 Characters)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TEXT20"/>
   <source>METHOD set_attrib_text.
  m_attrib_text = im_attrib_text.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_CHANGED_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Setter for CHANGED_ATTRIB" EXPOSURE="2" STATE="1" EDITORDER="29 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_CHANGED_ATTRIB" SCONAME="IM_CHANGED_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Text (20 Characters)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="TEXT20"/>
   <source>METHOD set_changed_attrib.
  m_changed_attrib = im_changed_attrib.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Setter for Container" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_CONTAINER" SCONAME="I_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <source>method SET_CONTAINER.
 container = i_container.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_CONTAINER_TYPE_01" VERSION="1" LANGU="E" DESCRIPT="Setter for type injection object" EXPOSURE="2" STATE="1" EDITORDER="31 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_CONTAINER_TYPE_01" SCONAME="IM_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <source>METHOD set_container_type_01.
  m_container_type_01 = im_container.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_IC_TEST_PARAM" VERSION="1" LANGU="E" DESCRIPT="Setter for M_ic_test_param" EXPOSURE="2" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_IC_TEST_PARAM" SCONAME="I_IC_TEST_PARAM" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME"/>
   <source>METHOD set_ic_test_param.
  m_ic_test_param = i_ic_test_param.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_NAME_FROM_TYPE_OBJ" VERSION="1" LANGU="E" DESCRIPT="Setter NAME_FROM_TYPE_OBJ" EXPOSURE="2" STATE="1" EDITORDER="33 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_NAME_FROM_TYPE_OBJ" SCONAME="IM_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME"/>
   <source>METHOD set_name_from_type_obj.
  m_name_from_type_obj = im_name.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_PARAM_TABLE_REF" VERSION="1" LANGU="E" DESCRIPT="Setter for Sflight table" EXPOSURE="2" STATE="1" EDITORDER="21 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_PARAM_TABLE_REF" SCONAME="IM_SFLIGHT_REF" VERSION="1" LANGU="E" DESCRIPT="Sflight data ref" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD set_param_table_ref.
  m_sflight_ref = im_sflight_ref.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_RANDOM_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Setter for Random Object" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_RANDOM_OBJECT" SCONAME="I_RANDOM_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Pseudo Random Number Generator" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_RANDOM"/>
   <source>METHOD set_random_object.
  random_object = i_random_object.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_SFLIGHT" VERSION="1" LANGU="E" DESCRIPT="Setter for Sflight" EXPOSURE="2" STATE="1" EDITORDER="23 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_SFLIGHT" SCONAME="IM_SFLIGHT" VERSION="1" LANGU="E" DESCRIPT="Flight" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SFLIGHT"/>
   <source>method SET_SFLIGHT.
  break bcuser.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT1" VERSION="1" LANGU="E" DESCRIPT="Setter for test object" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT1" SCONAME="I_TEST_OBJECT1" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>method SET_TEST_OBJECT1.
  m_ic_test1 = i_test_object1.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT2" VERSION="1" LANGU="E" DESCRIPT="Setter for test object" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT2" SCONAME="I_TEST_OBJECT2" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>method SET_TEST_OBJECT2.
  m_ic_test2 = i_test_object2.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT3" VERSION="1" LANGU="E" DESCRIPT="Setter for test object" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT3" SCONAME="I_TEST_OBJECT3" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>METHOD SET_TEST_OBJECT3.
  m_ic_test3 = i_test_object3.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT4" VERSION="1" LANGU="E" DESCRIPT="Setter for test object" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT4" SCONAME="I_TEST_OBJECT4" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>METHOD SET_TEST_OBJECT4.
  m_ic_test4 = i_test_object4.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT5" VERSION="1" LANGU="E" DESCRIPT="Setter for test object" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="SET_TEST_OBJECT5" SCONAME="I_TEST_OBJECT5" VERSION="1" LANGU="E" DESCRIPT="Test class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_TEST"/>
   <source>METHOD SET_TEST_OBJECT5.
  m_ic_test5 = i_test_object5.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TEST" CMPNAME="WRITE_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Write a description" EXPOSURE="2" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TEST" CMPNAME="WRITE_DESCRIPTION" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION"/>
   <source>METHOD write_description.
  m_description = &apos;Method getter param: &apos; &amp;&amp; i_description.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table data as a value object" CATEGORY="00" EXPOSURE="1" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_VALUE">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_TABLE" CMPNAME="M_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table value" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="4 " SRCCOLUMN1="7 " SRCROW2="4 " SRCCOLUMN2="28 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_TABLE" CMPNAME="M_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_TABLE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_TABLE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_TABLE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE_REF" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_TABLE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_TABLE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_TABLE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_TABLE" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.
  FIELD-SYMBOLS: &lt;lwa_ic_value&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_value&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_value&gt; TO l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-value_nr IS INITIAL.
      m_object_number = l_struct-value_nr.
    ENDIF.

    IF NOT l_struct-value_name IS INITIAL.
      m_name = l_struct-value_name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-rank IS INITIAL.
      m_rank = l_struct-rank.
    ENDIF.

    IF NOT l_struct-table_name IS INITIAL.
      m_table_name = l_struct-table_name.
    ENDIF.

  ENDIF.

  init( ).
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_TABLE" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.
  FIELD-SYMBOLS &lt;lwa_ic_value&gt; TYPE zcl_ic_value=&gt;ty_object.
  DATA lwa_ic_value TYPE ty_object.

* fill fields
  lwa_ic_value-value_nr = zif_ic_component~get_object_nr( ).
  lwa_ic_value-value_name = zif_ic_component~get_name( ).
  lwa_ic_value-value_type = get_value_type( ).
  lwa_ic_value-description = get_description( ).
  lwa_ic_value-rank = get_rank( ).
  lwa_ic_value-table_name = get_table_name( ).

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_value&gt;.

  &lt;lwa_ic_value&gt; = lwa_ic_value.
ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_TABLE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TABLE" CMPNAME="CONSTRUCTOR" SCONAME="I_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Table Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABNAME" PAROPTIONL="X"/>
   <source>METHOD constructor.

  super-&gt;constructor( i_value_type = zcl_ic_value=&gt;c_value_type_table ).
  m_table_name = i_table_name.

  init( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TABLE" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create Data value" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TABLE" CMPNAME="CREATE" SCONAME="I_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Table Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABNAME"/>
   <parameter CLSNAME="ZCL_IC_TABLE" CMPNAME="CREATE" SCONAME="RT_IC_TABLE" VERSION="1" LANGU="E" DESCRIPT="Common data as a value object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_TABLE"/>
   <source>METHOD create.

  CREATE OBJECT rt_ic_table
    EXPORTING
      i_table_name = i_table_name.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TABLE" CMPNAME="GET_TABLE" VERSION="1" LANGU="E" DESCRIPT="Getter for value" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TABLE" CMPNAME="GET_TABLE" SCONAME="E_TABLE" VERSION="1" LANGU="E" DESCRIPT="Any table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY TABLE"/>
   <source>METHOD get_table.
  FIELD-SYMBOLS &lt;table&gt; TYPE ANY TABLE.

  get_value( IMPORTING e_value = &lt;table&gt; ).

  e_table = &lt;table&gt;.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TABLE" CMPNAME="GET_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Getter for table name" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TABLE" CMPNAME="GET_TABLE_NAME" SCONAME="RT_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Table Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TABNAME"/>
   <source>METHOD GET_TABLE_NAME.
  rt_table_name = m_table_name.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value.
  FIELD-SYMBOLS &lt;value&gt; TYPE table.

  m_table = get_value_ref( ).

  ASSIGN m_table-&gt;* TO &lt;value&gt;.

  e_value = &lt;value&gt;.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_REF" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value_ref.
  DATA: l_type_name TYPE rs38l_typ.

* TODO may be later with move corresponding
  IF i_type_name IS INITIAL.
    l_type_name = m_table_name.
  ELSE.
    l_type_name = i_type_name.
  ENDIF.

  IF m_table IS NOT BOUND
    AND m_table_name IS NOT INITIAL.

    CREATE DATA m_table TYPE TABLE OF (m_table_name).
  ENDIF.

  rt_value_ref = m_table.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init.
  super-&gt;init( ).

* initial creation of table ref
  m_table = get_value_ref( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_TABLE" CMPNAME="SET_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Setter for table name" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TABLE" CMPNAME="SET_TABLE_NAME" SCONAME="IM_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Table Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABNAME"/>
   <source>method SET_TABLE_NAME.
  m_table_name = im_table_name.
  init( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_TABLE" CMPNAME="SET_VALUE_REF" VERSION="1" LANGU="E" DESCRIPT="Setter for data value" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_TABLE" CMPNAME="SET_VALUE_REF" SCONAME="I_VALUE_REF" VERSION="1" LANGU="E" DESCRIPT="Value ref" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD SET_VALUE_REF.

  m_table = i_value_ref.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" VERSION="1" LANGU="E" DESCRIPT="IC sub editable dynpro base" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_SUB_DYNPRO_BASE">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="C_IS_SCREEN_EDIT_NO" VERSION="1" LANGU="E" DESCRIPT="C_IS_SCREEN_EDIT_NO" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="ABAP_FALSE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="C_IS_SCREEN_EDIT_YES" VERSION="1" LANGU="E" DESCRIPT="C_IS_SCREEN_EDIT_YES" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="ABAP_TRUE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="C_MODE_ADD" VERSION="1" LANGU="E" DESCRIPT="C_MODE_ADD" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="3" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="C_MODE_DISPLAY" VERSION="1" LANGU="E" DESCRIPT="C_MODE_DISPLAY" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="C_MODE_EDIT" VERSION="1" LANGU="E" DESCRIPT="C_MODE_EDIT" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="C_SCREEN_INPUT_OFF" VERSION="1" LANGU="E" DESCRIPT="C_SCREEN_INPUT_OFF" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;0&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SCREEN-INPUT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="C_SCREEN_INPUT_ON" VERSION="1" LANGU="E" DESCRIPT="C_SCREEN_INPUT_ON" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;1&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SCREEN-INPUT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="EDIT_TABLE" VERSION="1" LANGU="E" DESCRIPT="EDIT_TABLE" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABLE_OF_STRINGS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="SCREEN_MODE" VERSION="1" LANGU="E" DESCRIPT="SCREEN_MODE" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" REFCLSNAME="ZCL_IC_SUB_DYNPRO_BASE" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" REFCLSNAME="ZCL_IC_SUB_DYNPRO_BASE" VERSION="1" MTDNAME="HANDLE_PAI" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" REFCLSNAME="ZCL_IC_SUB_DYNPRO_BASE" VERSION="1" MTDNAME="IS_SCREEN_EDIT" EXPOSURE="2"/>
  </inheritance>
  <method CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="ADAPT_SCREEN" VERSION="1" LANGU="E" DESCRIPT="ADAPT_SCREEN" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="ADAPT_SCREEN" SCONAME="CH_SCREEN" VERSION="1" LANGU="E" DESCRIPT="CH_SCREEN" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SCREEN"/>
   <source>METHOD adapt_screen.
  CONSTANTS: lc_dict_sepa TYPE char2 VALUE &apos;-&gt;&apos;.
  DATA: l_tab_field TYPE string,
        l_field_name TYPE string.

  l_field_name = substring_after( val = ch_screen-name sub = lc_dict_sepa ).

  LOOP AT edit_table INTO l_tab_field.
    IF l_tab_field = l_field_name
      OR l_tab_field = ch_screen-name.

      IF  screen_mode = c_mode_display.
        screen-input = c_screen_input_off.
      ELSE.
        screen-input = c_screen_input_on.
      ENDIF.

      EXIT.
    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYDYNNR"/>
   <parameter CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM_NAME" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG"/>
   <parameter CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SUB_SCRN_AREA" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_MAIN_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="IM_MAIN_DYNPRO" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_MAIN_DYNPRO_BASE"/>
   <source>METHOD constructor.

  super-&gt;constructor( im_dynpro_nr = im_dynpro_nr
                      im_program_name = im_program_name
                      im_sub_scrn_area = im_sub_scrn_area
                      im_main_dynpro = im_main_dynpro ).

  screen_mode = c_mode_display.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="GET_SCREEN_MODE" VERSION="1" LANGU="E" DESCRIPT="GET_SCREEN_MODE" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="GET_SCREEN_MODE" SCONAME="RT_SCREEN_MODE" VERSION="1" LANGU="E" DESCRIPT="RT_SCREEN_MODE" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <source>METHOD get_screen_mode.

  rt_screen_mode = screen_mode.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="HANDLE_PAI" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD handle_pai.

  super-&gt;handle_pai( im_action ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="IS_SCREEN_EDIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD is_screen_edit.

  rt_is_field_adapt = c_is_screen_edit_yes.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="SET_EDIT_TABLE" VERSION="1" LANGU="E" DESCRIPT="SET_EDIT_TABLE" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="SET_EDIT_TABLE" SCONAME="IM_EDIT_TABLE" VERSION="1" LANGU="E" DESCRIPT="IM_EDIT_TABLE" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE_OF_STRINGS"/>
   <source>METHOD set_edit_table.

  edit_table =  im_edit_table.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="SET_SCREEN_MODE" VERSION="1" LANGU="E" DESCRIPT="SET_SCREEN_MODE" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_EDIT_DYN_BASE" CMPNAME="SET_SCREEN_MODE" SCONAME="IM_SCREEN_MODE" VERSION="1" LANGU="E" DESCRIPT="IM_SCREEN_MODE" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I"/>
   <source>METHOD set_screen_mode.

  screen_mode = im_screen_mode.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" VERSION="1" LANGU="E" DESCRIPT="IC sub dynpro base" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_DYNPRO_BASE">
  <types CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="T_SUB_DYNPRO_KEY" VERSION="1" LANGU="E" DESCRIPT="T_SUB_DYNPRO_KEY" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="10 " SRCCOLUMN1="4 " SRCROW2="14 " SRCCOLUMN2="33 " TYPESRC_LENG="169 " TYPESRC="BEGIN OF t_sub_dynpro_key,
             nr TYPE i,
             dynpro_nr TYPE sydynnr,
             program    TYPE syst-cprog,
           END OF t_sub_dynpro_key
"/>
  <types CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="T_SUB_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="T_SUB_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="16 " SRCCOLUMN1="4 " SRCROW2="19 " SRCCOLUMN2="29 " TYPESRC_LENG="161 " TYPESRC="BEGIN OF t_sub_dynpro.
            INCLUDE TYPE t_sub_dynpro_key.
    TYPES: dynpro_class TYPE REF TO zcl_ic_sub_dynpro_base,
           END OF t_sub_dynpro
"/>
  <types CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="T_SUB_DYNPRO_AREA" VERSION="1" LANGU="E" DESCRIPT="T_SUB_DYNPRO_AREA" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="21 " SRCCOLUMN1="4 " SRCROW2="24 " SRCCOLUMN2="34 " TYPESRC_LENG="152 " TYPESRC="BEGIN OF t_sub_dynpro_area,
            sub_scrn_area TYPE scrfname.
            INCLUDE TYPE t_sub_dynpro_key.
    TYPES: END OF t_sub_dynpro_area
"/>
  <types CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="T_SUB_DYNPROS" VERSION="1" LANGU="E" DESCRIPT="T_SUB_DYNPROS" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="26 " SRCCOLUMN1="4 " SRCROW2="26 " SRCCOLUMN2="87 " TYPESRC_LENG="86 " TYPESRC="t_sub_dynpros TYPE SORTED TABLE OF t_sub_dynpro WITH UNIQUE KEY nr dynpro_nr program
"/>
  <types CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="T_SUB_DYNPRO_AREAS" VERSION="1" LANGU="E" DESCRIPT="T_SUB_DYNPRO_AREAS" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="4" SRCROW1="28 " SRCCOLUMN1="4 " SRCROW2="28 " SRCCOLUMN2="90 " TYPESRC_LENG="89 " TYPESRC="t_sub_dynpro_areas TYPE SORTED TABLE OF t_sub_dynpro_area WITH UNIQUE KEY sub_scrn_area
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="MAIN_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="MAIN_DYNPRO" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_MAIN_DYNPRO_BASE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="SUB_SCRN_AREA" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SCRFNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" REFCLSNAME="ZCL_IC_DYNPRO_BASE" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" REFCLSNAME="ZCL_IC_DYNPRO_BASE" VERSION="1" MTDNAME="CLOSE" EXPOSURE="2"/>
  </inheritance>
  <method CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="CLOSE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD close.
  super-&gt;close( ).

  IF get_scrn_area( ) IS NOT INITIAL.
    zcl_ic_dynpro_manager=&gt;instance( )-&gt;clear_current_dynpro_nr( get_scrn_area( ) ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYDYNNR"/>
   <parameter CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM_NAME" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG"/>
   <parameter CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SUB_SCRN_AREA" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_MAIN_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="IM_MAIN_DYNPRO" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_MAIN_DYNPRO_BASE"/>
   <source>METHOD constructor.

  super-&gt;constructor( im_dynpro_nr = im_dynpro_nr
                      im_program_name = im_program_name ).

  sub_scrn_area = im_sub_scrn_area.
  main_dynpro = im_main_dynpro.
  screen_nr = zcl_ic_dynpro_manager=&gt;instance( )-&gt;calculate_last_dynpro_nr( ) + 1.
  zcl_ic_dynpro_manager=&gt;instance( )-&gt;add_sub_dynpro( me ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="GET_MAIN_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="GET_MAIN_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="GET_MAIN_DYNPRO" SCONAME="RT_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="RT_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_MAIN_DYNPRO_BASE"/>
   <source>METHOD get_main_dynpro.

  rt_dynpro = main_dynpro.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="GET_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="GET_SCRN_AREA" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="GET_SCRN_AREA" SCONAME="RT_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="RT_SCRN_AREA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SCRFNAME"/>
   <source>METHOD get_scrn_area.

  rt_scrn_area = sub_scrn_area.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="IS_SCREEN_EDIT" VERSION="1" LANGU="E" DESCRIPT="IS_SCREEN_EDIT" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="IS_SCREEN_EDIT" SCONAME="RT_IS_FIELD_ADAPT" VERSION="1" LANGU="E" DESCRIPT="RT_IS_FIELD_ADAPT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD is_screen_edit.

  rt_is_field_adapt = zcl_ic_sub_edit_dyn_base=&gt;c_is_screen_edit_no.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="SET_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="SET_SCRN_AREA" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SUB_DYNPRO_BASE" CMPNAME="SET_SCRN_AREA" SCONAME="IM_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SCRN_AREA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME"/>
   <source>METHOD set_scrn_area.

  sub_scrn_area = im_scrn_area.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_SETTER_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Setter method" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_METHOD">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_SETTER_METHOD" CMPNAME="M_CLASS_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_SETTER_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_SETTER_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" MTDNAME="BUILD_PARAM_BINDINGS" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCL_IC_SETTER_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" MTDNAME="EXECUTE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="BUILD_PARAM_BINDINGS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD build_param_bindings.
  DATA: lwa_meth_descr TYPE abap_methdescr,
        lit_params TYPE abap_parmdescr_tab,
        lwa_param TYPE abap_parmdescr,
        lwa_param_bind TYPE abap_parmbind,
        lo_data_descr TYPE REF TO cl_abap_datadescr,
        lo_obj_descr TYPE REF TO cl_abap_objectdescr.

  super-&gt;build_param_bindings( ).

  lwa_meth_descr = get_method_descr( ).

  IF lwa_meth_descr IS INITIAL.
    &quot;todo throw error
  ENDIF.

  lit_params = lwa_meth_descr-parameters.

  LOOP AT lit_params INTO lwa_param WHERE ( parm_kind = cl_abap_objectdescr=&gt;importing
                                      OR parm_kind = cl_abap_objectdescr=&gt;changing ).

    lo_data_descr = get_class( )-&gt;get_class_descr( )-&gt;get_method_parameter_type(
                           p_method_name = m_name
                           p_parameter_name = lwa_param-name ).

    IF zcl_ic_utils=&gt;match_ref_to_datadescr( im_data_ref =  m_class_attrib-&gt;get_ic_value( )-&gt;get_value_ref( )
                                             im_data_descr = lo_data_descr  ) = abap_true.

      DATA: lo_param TYPE REF TO zcl_ic_method_param,
            l_obj_nr      TYPE zic_object_nr.

      lo_param ?= zcl_ic_object=&gt;instance( i_obj_type = zcl_ic_object=&gt;c_method_param_type
                                           i_parent = me ).
      &quot;     TODO 9000 =&gt; temp created id
      l_obj_nr =  92000 + sy-tabix.
      lo_param-&gt;zif_ic_component~set_object_nr( l_obj_nr ).
      lo_param-&gt;set_ic_value( m_class_attrib-&gt;get_ic_value( ) ).
      lo_param-&gt;zif_ic_component~set_name( lwa_param-name ).

*     get parameter binding and add to table
      CLEAR lwa_param_bind.
      lwa_param_bind = lo_param-&gt;calc_param_binding( ).

      INSERT lwa_param_bind INTO TABLE m_param_bindings.
      RETURN.

    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SETTER_METHOD" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_SETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_METHOD_NR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_METHOD_NR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_SETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_METHOD_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_SETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_SETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_SETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB" PAROPTIONL="X"/>
   <source>METHOD constructor.

  super-&gt;constructor(
   EXPORTING
     i_class         = i_class
     i_method_nr     = i_method_nr
     i_method_name   = i_method_name
     i_description   = i_description
     i_rank          = i_rank
     i_declare_level = c_declare_instance
     ).

  m_method_type = c_setter_method.
  m_active = c_is_active.
  m_class_attrib = i_class_attrib.

  init( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="EXECUTE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD execute.
  DATA lo_object TYPE REF TO object.

  lo_object = get_class( )-&gt;get_object( ).

  CALL METHOD lo_object-&gt;(m_name) PARAMETER-TABLE m_param_bindings.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_SERVICE" VERSION="1" LANGU="E" DESCRIPT="IC Serivice for wiring and injection Implementation" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_SERVICE" CMPNAME="TY_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_IC_IMPL_CONTEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_SERVICE" CMPNAME="TY_IMPL_CTXS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="29 " SRCCOLUMN1="4 " SRCROW2="29 " SRCCOLUMN2="50 " TYPESRC_LENG="49 " TYPESRC="ty_impl_ctxs TYPE STANDARD TABLE OF ty_impl_ctx
"/>
  <implementing CLSNAME="ZCL_IC_SERVICE" REFCLSNAME="ZIF_IC_SERVICE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="2 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_SERVICE" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <typeIntfDef CLSNAME="ZCL_IC_SERVICE" TYPEGROUP="ZIF_IC_SERVICE" VERSION="1" TPUTYPE="2" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_IC_SERVICE" CMPNAME="DEBUG" VERSION="1" LANGU="E" DESCRIPT="Debug injection process" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="1" ATTVALUE="ABAP_FALSE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SERVICE" CMPNAME="M_IMPL_CTXS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TY_IMPL_CTXS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_SERVICE" CMPNAME="SERVICE" VERSION="1" LANGU="E" DESCRIPT="IC Serivice for wiring and injection Implementation" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_SERVICE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_IC_SERVICE" CPDNAME="ZIF_IC_WIRABLE~WIRE">
   <source>METHOD zif_ic_wirable~wire.
  DATA: l_impl_ctx TYPE REF TO zcl_ic_impl_context,
        lo_error TYPE REF TO zcx_ic_error,
        lo_validate TYPE REF TO zif_ic_validate.

  LOOP AT m_impl_ctxs INTO l_impl_ctx.
    lo_validate = zcl_ic_service=&gt;check_component_tree( l_impl_ctx ).

    IF lo_validate-&gt;has_errors( ) = abap_true.
      lo_error = zcx_ic_error=&gt;create_error( lo_validate ).

      RAISE EXCEPTION lo_error.
    ENDIF.

    l_impl_ctx-&gt;zif_ic_wirable~wire( ).
  ENDLOOP.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_SERVICE" CPDNAME="ZIF_IC_SERVICE~INJECT">
   <source>METHOD zif_ic_service~inject.
  DATA: lo_compn TYPE REF TO zif_ic_component,
        lo_ic_context TYPE REF TO zcl_ic_impl_context.

  CREATE OBJECT service.

  service-&gt;clear_wired_objects( ).
* load implementation context
  lo_compn = zcl_ic_persist=&gt;select_path( i_comp_type = zcl_ic_container=&gt;c_container_type
                                          i_path = i_context_path ).

  IF lo_compn-&gt;get_type( ) = zcl_ic_impl_context=&gt;c_impl_context_type.
    DATA lo_comps TYPE REF TO zif_ic_composite.

    lo_ic_context ?= lo_compn.
    lo_comps = lo_ic_context.

    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_comps ).
  ELSE.
    &quot;TODO ERROR throw error.
  ENDIF.

  service-&gt;add_impl_ctx( i_impl_ctx = lo_ic_context ).
  service-&gt;zif_ic_wirable~wire( ).

  IF ch_object IS BOUND.
    &quot;TODO  make delegate with class object
    &quot;example interface assignable =&gt; class is assingable + has method assign
    &quot;code wordt ch_object-&gt;assign( )
    service-&gt;assign_class_objects( CHANGING ch_object = ch_object ).
  ELSEIF i_program_name IS NOT INITIAL.
    service-&gt;assign_prg_objects( i_program_name ).
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_SERVICE" CPDNAME="ZIF_IC_SERVICE~INJECT_TO_TABLE">
   <source>METHOD zif_ic_service~inject_to_table.

  inject( i_context_path ).
  service-&gt;assign_objects( CHANGING ch_objects = ch_objects ).

  IF debug = abap_true.
    BREAK-POINT.
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_SERVICE" CPDNAME="ZIF_IC_SERVICE~SET_DEBUG_OFF">
   <source>method ZIF_IC_SERVICE~SET_DEBUG_OFF.
  debug = abap_false.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_SERVICE" CPDNAME="ZIF_IC_SERVICE~SET_DEBUG_ON">
   <source>method ZIF_IC_SERVICE~SET_DEBUG_ON.
  debug = abap_true.
endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_SERVICE" CMPNAME="ADD_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="Add implementation context" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SERVICE" CMPNAME="ADD_IMPL_CTX" SCONAME="I_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_IMPL_CONTEXT"/>
   <source>method ADD_IMPL_CTX.
  append i_impl_ctx to m_impl_ctxs.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_SERVICE" CMPNAME="ASSIGN_CLASS_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="Assign objects to members of a class" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SERVICE" CMPNAME="ASSIGN_CLASS_OBJECTS" SCONAME="CH_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object to inject" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="OBJECT"/>
   <source>METHOD assign_class_objects.
  CONSTANTS: lc_set_syntax TYPE char4 VALUE &apos;SET_&apos;.

  DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
        lo_class_desc TYPE REF TO cl_abap_classdescr.

  LOOP AT m_impl_ctxs INTO lo_impl_ctx.
    DATA: lit_classes TYPE zcl_ic_class=&gt;ty_classes,
          lo_ic_class TYPE REF TO zcl_ic_class.

    lo_impl_ctx-&gt;get_classes( IMPORTING e_classes = lit_classes ).

    LOOP AT lit_classes INTO lo_ic_class.
      FIELD-SYMBOLS: &lt;obj_to_inj&gt; TYPE any.
      DATA: l_classname TYPE zic_clsname,
            l_set_method TYPE seocpdname,
            l_param_name TYPE seosconame,
            l_obj_to_inj TYPE REF TO object,
            lr_obj_temp TYPE REF TO data.

      l_classname = lo_ic_class-&gt;get_class_name( ).
      l_set_method = lc_set_syntax &amp;&amp; lo_ic_class-&gt;get_name( ).

      l_obj_to_inj = lo_ic_class-&gt;get_object( ).

      CREATE DATA lr_obj_temp TYPE REF TO (l_classname).
      ASSIGN lr_obj_temp-&gt;* TO &lt;obj_to_inj&gt;.

      IF &lt;obj_to_inj&gt; IS ASSIGNED.
*       look if method exists TODO create in static method !!!!!!!!!!!!!!!!!!!!!
        lo_class_desc ?= cl_abap_classdescr=&gt;describe_by_object_ref( ch_object ).

        &quot;todo make method methodExist(methodName)
        DATA l_method_descr TYPE abap_methdescr.

        READ TABLE lo_class_desc-&gt;methods
                      INTO l_method_descr
                      WITH TABLE KEY name = l_set_method.

        IF sy-subrc = 0.
          DATA: lit_abap_parmdescr_tab TYPE STANDARD TABLE OF abap_parmdescr WITH KEY name,
                lwa_param_desc TYPE abap_parmdescr,
                l_parm_type TYPE abap_parmkind,
                lwa_param TYPE abap_parmbind,
                lit_params TYPE abap_parmbind_tab,
                lo_data_descr TYPE REF TO cl_abap_datadescr.

          REFRESH lit_params.

          lit_abap_parmdescr_tab = l_method_descr-parameters.

          LOOP AT lit_abap_parmdescr_tab INTO lwa_param_desc
                                          WHERE parm_kind = cl_abap_objectdescr=&gt;importing
                                                 OR parm_kind = cl_abap_objectdescr=&gt;changing .

            CLEAR: l_param_name, l_parm_type, lo_data_descr.

            &lt;obj_to_inj&gt; ?= l_obj_to_inj.

            lo_data_descr = lo_class_desc-&gt;get_method_parameter_type(
                           p_method_name = l_set_method
                           p_parameter_name = lwa_param_desc-name ).

            IF zcl_ic_utils=&gt;match_ref_to_datadescr( im_data_ref = lr_obj_temp
                                                     im_data_descr = lo_data_descr ) = abap_true.

              lwa_param-name = lwa_param_desc-name.

              IF lwa_param_desc-parm_kind = cl_abap_objectdescr=&gt;exporting.
                lwa_param-kind = cl_abap_objectdescr=&gt;importing.
              ELSEIF lwa_param_desc-parm_kind = cl_abap_objectdescr=&gt;changing.
                lwa_param-kind = cl_abap_objectdescr=&gt;changing.
              ENDIF.

              lwa_param-value = lr_obj_temp.

              INSERT lwa_param INTO TABLE lit_params.

*             inject into object caller
              DATA: t TYPE abap_parmbind.

              CALL METHOD ch_object-&gt;(l_set_method)
                PARAMETER-TABLE lit_params.
              EXIT.
            ENDIF.
          ENDLOOP.

        ENDIF.
      ENDIF.
*TODO type comparison or member comparison

    ENDLOOP.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SERVICE" CMPNAME="ASSIGN_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="Assign objects from a list of objects" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SERVICE" CMPNAME="ASSIGN_OBJECTS" SCONAME="CH_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="Object table to inject into" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIF_IC_SERVICE=&gt;T_OBJECT_TABLE"/>
   <source>METHOD assign_objects.
  DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context.

  LOOP AT m_impl_ctxs INTO lo_impl_ctx.
    DATA: lit_classes TYPE zcl_ic_class=&gt;ty_classes,
          lo_ic_class TYPE REF TO zcl_ic_class.

    lo_impl_ctx-&gt;get_classes( IMPORTING e_classes = lit_classes ).

    LOOP AT lit_classes INTO lo_ic_class.

      IF lo_ic_class IS BOUND.
        DATA lwa_obj TYPE zif_ic_service=&gt;t_object.

        CLEAR lwa_obj.
        lwa_obj-name = lo_ic_class-&gt;get_name( ).
        lwa_obj-path = lo_ic_class-&gt;get_path( ).
        lwa_obj-object = lo_ic_class-&gt;get_object( ).

        APPEND lwa_obj TO ch_objects.
      ENDIF.

    ENDLOOP.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SERVICE" CMPNAME="ASSIGN_PRG_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="Assign objects to fields of a program" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SERVICE" CMPNAME="ASSIGN_PRG_OBJECTS" SCONAME="I_PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="ABAP Program Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PROGRAMM"/>
   <source>METHOD assign_prg_objects.
  DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context.
*TODO moet loop niet weg en zoeken op path only met bv    READ implctx = import_path
  LOOP AT m_impl_ctxs INTO lo_impl_ctx.
    DATA: lit_classes TYPE zcl_ic_class=&gt;ty_classes,
          lo_ic_class TYPE REF TO zcl_ic_class.

    lo_impl_ctx-&gt;get_classes( IMPORTING e_classes = lit_classes ).

    LOOP AT lit_classes INTO lo_ic_class.
      FIELD-SYMBOLS: &lt;obj_to_inj&gt; TYPE any.
      DATA: l_classname TYPE zic_clsname,
            l_obj_to_inj TYPE REF TO object,
            lr_obj_temp TYPE REF TO data.

      l_classname = lo_ic_class-&gt;get_class_name( ).

      l_obj_to_inj  = lo_ic_class-&gt;get_object( ).
*TODO hier program inject
      CREATE DATA lr_obj_temp TYPE REF TO (l_classname).
      ASSIGN lr_obj_temp-&gt;* TO &lt;obj_to_inj&gt;.

      IF &lt;obj_to_inj&gt; IS ASSIGNED.
*       look if member exists
*       TODO create in static method !!!!!!!!!!!!!!!!!!!!!
        FIELD-SYMBOLS &lt;prg_field&gt; TYPE any.
        DATA: l_prg_field_name TYPE char30.
*TODO        break bcuser. &quot;hier apparte methode met verschillende prefixs
        l_prg_field_name = &apos;(&apos; &amp;&amp; i_program_name &amp;&amp; &apos;)&apos; &amp;&amp; &apos;G_&apos; &amp;&amp; lo_ic_class-&gt;get_name( ).

        ASSIGN (l_prg_field_name) TO &lt;prg_field&gt;.

        IF &lt;prg_field&gt; IS ASSIGNED.

          &lt;prg_field&gt; ?= l_obj_to_inj.
          UNASSIGN &lt;prg_field&gt;.

        ENDIF.
      ENDIF.

    ENDLOOP.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SERVICE" CMPNAME="CHECK_CHILD_COMPONENTS" VERSION="1" LANGU="E" DESCRIPT="Check child components and childs" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SERVICE" CMPNAME="CHECK_CHILD_COMPONENTS" SCONAME="IM_IC_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <parameter CLSNAME="ZCL_IC_SERVICE" CMPNAME="CHECK_CHILD_COMPONENTS" SCONAME="CH_VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validation IC object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_VALIDATE"/>
   <source>METHOD check_child_components.
  DATA: lo_parent TYPE REF TO zif_ic_composite,
        lwa_child TYPE zif_ic_composite=&gt;ty_comp_tab_entry.

  IF im_ic_component-&gt;is_parent( ) = abap_false.
    RETURN.
  ENDIF.

  lo_parent ?= im_ic_component.

  LOOP AT lo_parent-&gt;m_childs INTO lwa_child.
    lwa_child-comp-&gt;validate( CHANGING ch_validate = ch_validate ).

    check_child_components( EXPORTING im_ic_component = lwa_child-comp
                            CHANGING ch_validate = ch_validate ).
  ENDLOOP.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SERVICE" CMPNAME="CHECK_COMPONENT_TREE" VERSION="1" LANGU="E" DESCRIPT="Check components and all childs in tree" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_SERVICE" CMPNAME="CHECK_COMPONENT_TREE" SCONAME="IM_IC_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <parameter CLSNAME="ZCL_IC_SERVICE" CMPNAME="CHECK_COMPONENT_TREE" SCONAME="RT_VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validation IC object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_VALIDATE"/>
   <source>METHOD check_component_tree.

  rt_validate ?= zcl_ic_validate=&gt;create( ).

  IF im_ic_component IS BOUND.

    im_ic_component-&gt;validate( CHANGING ch_validate = rt_validate ).

    check_child_components( EXPORTING im_ic_component = im_ic_component
                            CHANGING ch_validate = rt_validate ).

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SERVICE" CMPNAME="CLEAR_WIRED_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="Free objects of member" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD clear_wired_objects.
  DATA l_impl_ctx TYPE REF TO object.

  LOOP AT m_impl_ctxs INTO l_impl_ctx.
    FREE l_impl_ctx.
  ENDLOOP.

  REFRESH m_impl_ctxs .
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_SERVICE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Singleton service constructor" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD constructor.

  IF service IS INITIAL.
    CREATE OBJECT service.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <aliasMethod CLSNAME="ZCL_IC_SERVICE" CMPNAME="INJECT" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_SERVICE" REFCMPNAME="INJECT"/>
  <aliasMethod CLSNAME="ZCL_IC_SERVICE" CMPNAME="INJECT_TO_TABLE" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_SERVICE" REFCMPNAME="INJECT_TO_TABLE"/>
  <aliasMethod CLSNAME="ZCL_IC_SERVICE" CMPNAME="SET_DEBUG_OFF" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_SERVICE" REFCMPNAME="SET_DEBUG_OFF"/>
  <aliasMethod CLSNAME="ZCL_IC_SERVICE" CMPNAME="SET_DEBUG_ON" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_SERVICE" REFCMPNAME="SET_DEBUG_ON"/>
  <aliasMethod CLSNAME="ZCL_IC_SERVICE" CMPNAME="WIRE" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_WIRABLE" REFCMPNAME="WIRE"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_PERSIST" VERSION="1" LANGU="E" DESCRIPT="IC Persistent class" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations

CLASS lcl_relation DEFINITION DEFERRED.

*----------------------------------------------------------------------*
*       CLASS debug DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS debug DEFINITION. &quot;TODO class moet weg
  PUBLIC SECTION.
    CLASS-DATA: debug TYPE i.

*    IF im_fk_mapping = &apos;VALUE_PARAM&apos;
*      AND debug=&gt;debug &lt; 3.
*      debug=&gt;debug = debug=&gt;debug + 1.
*      break bcuser.
*    ENDIF.

ENDCLASS.                    &quot;debug DEFINITION

*------------------------------------------------------------*
*       CLASS lcl_link_object
*------------------------------------------------------------*
* Link object for
* dummy object for OO representation, where a link table is
* involved
*------------------------------------------------------------*
CLASS lcl_link_object DEFINITION.

  PUBLIC SECTION.
    INTERFACES: zif_ic_meta_info.

    CLASS-METHODS:
      create IMPORTING  i_parent TYPE REF TO zif_ic_meta_info
                        i_child TYPE REF TO zif_ic_meta_info OPTIONAL
                        i_rel TYPE REF TO lcl_relation
             RETURNING value(rt_link_obj) TYPE REF TO zif_ic_meta_info.

    METHODS: constructor IMPORTING i_parent TYPE REF TO zif_ic_meta_info
                                   i_child TYPE REF TO zif_ic_meta_info
                                   i_rel TYPE REF TO lcl_relation.

  PRIVATE SECTION.

    DATA: m_parent TYPE REF TO zif_ic_meta_info,
          m_child TYPE REF TO zif_ic_meta_info,
          m_relation TYPE REF TO lcl_relation.

ENDCLASS.                    &quot;lcl_pers_type DEFINITION

*------------------------------------------------------------*
*       CLASS lcl_relation
*------------------------------------------------------------*
* Relation between two tables
*------------------------------------------------------------*
CLASS lcl_relation DEFINITION ABSTRACT.

  PUBLIC SECTION.
    TYPES: BEGIN OF t_rel_mapping,
            parent TYPE zic_obj_type,
            child TYPE zic_obj_type,
            relation TYPE REF TO lcl_relation,
          END OF t_rel_mapping.

    TYPES t_rel_mappings TYPE STANDARD TABLE OF t_rel_mapping WITH NON-UNIQUE KEY parent child.

    TYPES: t_relation TYPE REF TO lcl_relation,
           t_relations TYPE STANDARD TABLE OF t_relation WITH NON-UNIQUE KEY table_line.

    TYPES: t_key_struct TYPE REF TO data,
           t_key_table TYPE STANDARD TABLE OF t_key_struct.

    TYPES: BEGIN OF t_fk_struct,   &quot;TODO move to FK class
            key_name TYPE zic_or_key_map_name,
            key TYPE fieldname,
            value TYPE string,
            parent_obj TYPE REF TO zif_ic_component,
          END OF t_fk_struct.
    TYPES: t_fk_table TYPE STANDARD TABLE OF t_fk_struct.

    TYPES: BEGIN OF t_obj_type,
             ranking TYPE i,
             obj_type TYPE zic_obj_type,
             key_value TYPE zic_object_nr,
           END OF t_obj_type,
           t_obj_types TYPE STANDARD TABLE OF t_obj_type.

    CONSTANTS: c_context TYPE zic_or_ctx_name VALUE &apos;IC&apos;.

    CONSTANTS: c_composed_rel TYPE zic_rel_type VALUE &apos;CR&apos;,
               c_foreign_rel TYPE zic_rel_type VALUE &apos;FR&apos;,
               c_inner_rel TYPE zic_rel_type VALUE &apos;IR&apos;,
               c_link_rel TYPE zic_rel_type VALUE &apos;LR&apos;.

    CLASS-METHODS: class_constructor,
                   create IMPORTING i_obj_type TYPE zic_obj_type
                          RETURNING value(r_relations) TYPE t_relations,
                   clear_relations,
                   get_rel_map_table RETURNING value(rt_rels) TYPE t_relations,
                   get_type_tree IMPORTING i_comp TYPE REF TO zif_ic_component
                                 EXPORTING rt_type_tree TYPE t_obj_types,
                   get_child_rels IMPORTING im_obj_type TYPE zic_obj_type
                                  RETURNING value(rt_rel_tab) TYPE t_relations,
                   get_child_entries IMPORTING im_obj_type TYPE zic_obj_type
                                     RETURNING value(rt_entries) TYPE zif_ic_component=&gt;ty_comp_tab_entries,
                   get_class_name IMPORTING i_type TYPE zic_obj_type
                                  RETURNING value(rt_class_name) TYPE seoclsname,
                   get_identity   IMPORTING im_tab_name TYPE tabname
                                  RETURNING value(rt_identity) TYPE string,
                   map_all_passive_rels,
                   map_passive_rel CHANGING ch_rel TYPE REF TO lcl_relation.

    METHODS: constructor IMPORTING i_wa_relation TYPE zif_ic_meta_info=&gt;ty_relation,
             calc_min_key
                        IMPORTING i_root_comp TYPE REF TO zif_ic_composite
                                  i_parent_comp TYPE REF TO zif_ic_composite
                        EXPORTING ex_ancester_comp TYPE REF TO zif_ic_composite
                                  ex_min_object_key TYPE REF TO data,
             get_parent_via_tree
                        IMPORTING i_wa_child TYPE REF TO data
                                  i_parent_comp TYPE REF TO zif_ic_composite
                                  i_ancestor TYPE REF TO zif_ic_composite
                                  i_parent_rel TYPE REF TO lcl_relation
                        RETURNING value(rt_parent) TYPE REF TO zif_ic_composite,

             get_type   RETURNING value(r_rel_type) TYPE zic_rel_type,
             get_parent_type RETURNING value(r_parent_type) TYPE zic_obj_type,
             get_child_type RETURNING value(r_child_type) TYPE zic_obj_type,
             get_sub_type RETURNING value(r_sub_type) TYPE feld_name,
             get_inner_key  RETURNING value(r_inner_key) TYPE feld_name,
             get_link_table RETURNING value(r_tabname) TYPE tabname,
             get_link_key_field RETURNING value(r_fieldname) TYPE fieldname,
             get_link_type_field RETURNING value(r_fieldname) TYPE fieldname,
             get_link_key_map RETURNING value(r_fieldname) TYPE fieldname,
             get_parent_rels RETURNING value(rt_rels) TYPE t_relations,
             get_keys_table EXPORTING e_key_table TYPE table,
             get_entries RETURNING value(rt_comps) TYPE zif_ic_component=&gt;ty_comp_tab_entries,
             get_comp_by_nr IMPORTING i_comp_type    TYPE zic_obj_type
                                      i_comp_number TYPE zic_object_nr
                            RETURNING value(rt_comp) TYPE zif_ic_component=&gt;ty_component,
             get_parent_by_key IMPORTING i_comp_key TYPE REF TO data
                              RETURNING value(rt_component) TYPE REF TO zif_ic_composite,
             create_parent_object IMPORTING i_parent TYPE REF TO zif_ic_composite OPTIONAL
                                  CHANGING ch_object TYPE REF TO object,
             create_child_object  IMPORTING i_parent TYPE REF TO zif_ic_composite OPTIONAL
                                  CHANGING ch_object TYPE REF TO object,
             add_entry_to_table   IMPORTING i_key TYPE REF TO data
                                            i_entry TYPE zif_ic_component=&gt;ty_comp_tab_entry,
             map_rel_table IMPORTING im_rel TYPE REF TO lcl_relation,
             add_fk               IMPORTING im_ref_object TYPE REF TO data
                                            im_object TYPE REF TO zif_ic_component,
             get_sub_type_value   IMPORTING i_structure TYPE any
                                  RETURNING value(rt_type_value) TYPE string,
             is_passive_select    RETURNING value(rt_is_passive) TYPE abap_bool,
             &quot;TODO this must be protected??
             get_first_entry RETURNING value(rt_entry) TYPE zif_ic_component=&gt;ty_comp_tab_entry,
             get_foreign_key RETURNING value(rt_foreign_key) TYPE fieldname,
             get_fk_mapping RETURNING value(rt_fk_mapping) TYPE zic_or_key_map_name,
             get_fk_table IMPORTING im_fk_name TYPE fieldname
                                    im_ref_child_key TYPE REF TO data
                          RETURNING value(rt_fk_table) TYPE REF TO data,
             map_fk_object IMPORTING im_fk_mapping TYPE zic_or_key_map_name
                                     im_fk_name TYPE fieldname
                                     im_child_object TYPE REF TO zif_ic_component,
             inject_mapped_fk_object IMPORTING im_fk_name TYPE fieldname
                                               im_child_object TYPE REF TO zif_ic_component
                                               im_parent_obj TYPE REF TO zif_ic_component.
  PROTECTED SECTION.

    CLASS-DATA: ic_types TYPE SORTED TABLE OF zic_or_types WITH UNIQUE KEY context type,
                relations TYPE zif_ic_meta_info=&gt;ty_relations,
                m_relations_mapping TYPE t_rel_mappings.

    CLASS-METHODS: build_fk_table_mapping.

    DATA: m_rel_type TYPE zic_rel_type,
          m_parent_type TYPE zic_obj_type,
          m_child_type TYPE zic_obj_type,
          m_sub_type TYPE feld_name,
          m_inner_key TYPE feld_name,
          m_link_tabname TYPE tabname,
          m_link_key_field TYPE fieldname,
          m_link_type_field TYPE fieldname,
          m_link_key_map TYPE fieldname,
          m_foreign_key TYPE fieldname,
          m_fk_mapping TYPE zic_or_key_map_name,
          m_is_passive_select TYPE abap_bool,
          m_fk_keys TYPE t_fk_table,
          m_keys TYPE t_key_table,
          m_entries TYPE zif_ic_component=&gt;ty_comp_tab_entries.

    METHODS: has_common_key
                IMPORTING i_parent TYPE REF TO data
                          i_child TYPE REF TO data
                RETURNING value(rt_has_common_key) TYPE abap_bool,
            add_entry_to_fk_table IMPORTING im_key_name TYPE zic_or_key_map_name
                                            im_key TYPE fieldname
                                            im_value TYPE string
                                            im_parent_obj TYPE REF TO zif_ic_component.

  PRIVATE SECTION.
    METHODS: create_object IMPORTING i_obj_type TYPE zic_obj_type
                                     i_parent TYPE REF TO zif_ic_composite OPTIONAL
                           CHANGING ch_object TYPE REF TO object.

ENDCLASS.                    &quot;lcl_relation DEFINITION

*------------------------------------------------------------*
*       CLASS lcl_composed_relation
*------------------------------------------------------------*
* Composed Relation
*------------------------------------------------------------*
CLASS lcl_composed_relation DEFINITION INHERITING FROM lcl_relation.
  PUBLIC SECTION.
    &quot;TODO map_comp_childs_into_parent  moet private method worden
    CLASS-METHODS: map_comp_childs_into_parent
                        IMPORTING i_it_childs TYPE REF TO data
                                  i_prev_rel TYPE REF TO lcl_relation
                                  i_ancester_comp TYPE REF TO zif_ic_composite
                         CHANGING ch_parent_comp TYPE REF TO zif_ic_composite
                                 ch_relation  TYPE REF TO lcl_relation.

ENDCLASS.                    &quot;lcl_inner_relation DEFINITION

*------------------------------------------------------------*
*       CLASS lcl_Inner_relation
*------------------------------------------------------------*
* Inner Relation
*------------------------------------------------------------*
CLASS lcl_inner_relation DEFINITION INHERITING FROM lcl_relation.
  PUBLIC SECTION.
    CLASS-METHODS: has_inner_relation IMPORTING i_obj_type TYPE zic_obj_type
                                     EXPORTING e_has_inner_rel TYPE abap_bool
                                               e_relations TYPE t_relations,
                   map_inner_childs_into_parent
                        IMPORTING i_it_childs TYPE REF TO data
                                  i_prev_rel TYPE REF TO lcl_relation
                        CHANGING ch_ancester_comp TYPE REF TO zif_ic_composite
                                 ch_parent_comp TYPE REF TO zif_ic_composite
                                 ch_relation  TYPE REF TO lcl_relation.

    METHODS: get_parent_via_tree REDEFINITION.

ENDCLASS.                    &quot;lcl_inner_relation DEFINITION

*------------------------------------------------------------*
*       CLASS lcl_linked_relation
*------------------------------------------------------------*
* Linked Relation
*------------------------------------------------------------*
CLASS lcl_linked_relation DEFINITION INHERITING FROM lcl_relation.
  PUBLIC SECTION.
    CLASS-METHODS:
       map_linked_childs_into_parent
                        IMPORTING i_it_childs TYPE REF TO data
                                  i_link_table TYPE table
                                  i_prev_rel TYPE REF TO lcl_relation
                        CHANGING  ch_ancester_comp TYPE REF TO zif_ic_composite
                                  ch_parent_comp TYPE REF TO zif_ic_composite
                                  ch_relation  TYPE REF TO lcl_relation.

    METHODS:          calc_min_key REDEFINITION.

ENDCLASS.                    &quot;lcl_linked_relation DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_foreignkey_relation DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_foreignkey_relation DEFINITION INHERITING FROM lcl_relation.
  PUBLIC SECTION.
    TYPES: t_mapping_fk_tab TYPE STANDARD TABLE OF zic_or_fk_map.

    CLASS-DATA: m_mapping_fk TYPE t_mapping_fk_tab.

    CLASS-METHODS: class_constructor,
                   get_mapping_fk_table IMPORTING im_key_name TYPE zic_or_key_map_name
                                        EXPORTING ex_map_fk_tab TYPE t_mapping_fk_tab.


ENDCLASS.                    &quot;lcl_foreignkey_relation DEFINITION
*------------------------------------------------------------*
*       CLASS lcl_relation_utilities
*------------------------------------------------------------*
* Relation Utilites
*------------------------------------------------------------*
CLASS lcl_relation_util DEFINITION.

  PUBLIC SECTION.

    CLASS-METHODS: select_sub_tree
                        IMPORTING i_root_comp TYPE REF TO zif_ic_composite OPTIONAL
                                  i_dept TYPE numc2 DEFAULT 99
                                  i_until_object TYPE zic_obj_type OPTIONAL
                        CHANGING  ch_parent_comp TYPE REF TO zif_ic_component
                                  ch_prev_rel TYPE lcl_relation=&gt;t_relation OPTIONAL,
                   map_childs_via_relation
                        IMPORTING i_root_comp TYPE REF TO zif_ic_composite
                                  i_prev_rel TYPE REF TO lcl_relation OPTIONAL
                                  i_ref_condition TYPE REF TO data OPTIONAL
                        CHANGING  ch_parent_comp TYPE REF TO zif_ic_composite
                                  ch_relation    TYPE REF TO lcl_relation,
                   map_childs_via_rel_fk
                        IMPORTING i_root_comp TYPE REF TO zif_ic_composite
                                   i_prev_rel TYPE REF TO lcl_relation OPTIONAL
                                   i_ref_condition TYPE REF TO data OPTIONAL
                        CHANGING  ch_fk_comp TYPE REF TO zif_ic_component
                                   ch_relation    TYPE REF TO lcl_relation,
                   get_ancestor IMPORTING i_type_rel TYPE zic_rel_type
                                          i_compn TYPE REF TO zif_ic_component
                                EXPORTING e_compn TYPE REF TO zif_ic_component.

ENDCLASS.                    &quot;lcl_relation_utilities

*----------------------------------------------------------------------*
*       CLASS lcl_relation
*----------------------------------------------------------------------*
* lcl_relation
*----------------------------------------------------------------------*
CLASS lcl_relation IMPLEMENTATION.

  METHOD class_constructor.
    DATA: lwa_type TYPE zic_or_types,
          lit_mapping TYPE STANDARD TABLE OF zic_or_mapping,
          lwa_mapping TYPE zic_or_mapping,
          lwa_relation TYPE zif_ic_meta_info=&gt;ty_relation.

    SELECT * FROM zic_or_types INTO TABLE ic_types WHERE context = c_context.
    SELECT * FROM zic_or_mapping INTO TABLE lit_mapping WHERE context = c_context.

    IF ic_types IS INITIAL OR lit_mapping IS INITIAL.
      &quot;TODO throw error
    ENDIF.

    SORT lit_mapping BY context parent child rel_number.

    LOOP AT lit_mapping INTO lwa_mapping.
      CLEAR: lwa_relation.

      lwa_relation-rel_type = lwa_mapping-rel_type.
      lwa_relation-parent = lwa_mapping-parent.
      lwa_relation-child = lwa_mapping-child.
      lwa_relation-inner_key = lwa_mapping-inner_key.
      lwa_relation-link_table = lwa_mapping-link_table.
      lwa_relation-link_key_field = lwa_mapping-link_key_field.
      lwa_relation-link_type_field = lwa_mapping-link_type_field.
      lwa_relation-link_keymap_field = lwa_mapping-link_keymap_field.
      lwa_relation-foreign_key = lwa_mapping-foreign_key.
      lwa_relation-fk_mapping = lwa_mapping-fk_mapping.
      lwa_relation-is_passive_select = lwa_mapping-is_passive_select.

*     sub type for child
      READ TABLE ic_types INTO lwa_type
                          WITH TABLE KEY context = c_context
                                         type =  lwa_relation-child.

      IF sy-subrc = 0.
        lwa_relation-sub_type = lwa_type-sub_type_field.
      ENDIF.

      APPEND lwa_relation TO relations.
    ENDLOOP.

  ENDMETHOD.                    &quot;class_constructor

  METHOD clear_relations.
    REFRESH m_relations_mapping.
  ENDMETHOD.                    &quot;clear_relations

  METHOD create.
*   IMPORTING i_obj_type TYPE zic_obj_type
*   RETURNING value(r_relations) TYPE t_relations,
    DATA: lo_relation TYPE t_relation,
          lo_comp_relation TYPE REF TO lcl_composed_relation,
          lo_inner_relation TYPE REF TO lcl_inner_relation,
          lo_linked_relation TYPE REF TO lcl_linked_relation,
          lo_fk_relation TYPE REF TO lcl_foreignkey_relation,
          lwa_relation TYPE zif_ic_meta_info=&gt;ty_relation,
          lwa_rel_map TYPE t_rel_mapping.

*   create relations for types
    LOOP AT relations INTO lwa_relation WHERE parent = i_obj_type.
      CLEAR lwa_rel_map.
      CLEAR lo_relation.

      CASE lwa_relation-rel_type.
        WHEN lcl_relation=&gt;c_composed_rel.

          CREATE OBJECT lo_comp_relation
            EXPORTING
              i_wa_relation = lwa_relation.

          lo_relation = lo_comp_relation.
        WHEN lcl_relation=&gt;c_inner_rel.

          CREATE OBJECT lo_inner_relation
            EXPORTING
              i_wa_relation = lwa_relation.

          lo_relation = lo_inner_relation.
        WHEN lcl_relation=&gt;c_link_rel.

          CREATE OBJECT lo_linked_relation
            EXPORTING
              i_wa_relation = lwa_relation.

          lo_relation = lo_linked_relation.
        WHEN lcl_relation=&gt;c_foreign_rel.

          CREATE OBJECT lo_fk_relation
            EXPORTING
              i_wa_relation = lwa_relation.

          lo_relation = lo_fk_relation.
        WHEN OTHERS.
          &quot;TODO error
      ENDCASE.

      lwa_rel_map-parent = lo_relation-&gt;get_parent_type( ).
      lwa_rel_map-child = lo_relation-&gt;get_child_type( ).
      lwa_rel_map-relation = lo_relation.

      READ TABLE m_relations_mapping INTO lwa_rel_map WITH TABLE KEY parent = lwa_relation-parent
                                                             child = lwa_relation-child.

      IF sy-subrc &lt;&gt; 0.
        INSERT lwa_rel_map INTO TABLE m_relations_mapping.
      ENDIF.

      APPEND lo_relation TO r_relations.
    ENDLOOP.

  ENDMETHOD.                    &quot;create

  METHOD build_fk_table_mapping.
    DATA: lwa_relation TYPE zif_ic_meta_info=&gt;ty_relation.

*   by creating the relations, relationmap is filled
    LOOP AT relations INTO lwa_relation WHERE is_passive_select = abap_true.
      lcl_relation=&gt;create( lwa_relation-parent ).
    ENDLOOP.

  ENDMETHOD.                    &quot;build_fk_table_mapping

  METHOD get_rel_map_table.
*   RETURNING VALUE(rt_rels) type t_relations,
    DATA: lwa_map_rel TYPE t_rel_mapping.

    build_fk_table_mapping( ).

    LOOP AT m_relations_mapping INTO lwa_map_rel.
      APPEND lwa_map_rel-relation TO rt_rels.
    ENDLOOP.

  ENDMETHOD.                    &quot;get_rel_map_table
  METHOD create_parent_object.
*   IMPORTING I_PARENT TYPE REF TO ZIF_IC_COMPOSITE OPTIONAL
*   CHANGING ch_object TYPE REF TO object
    DATA: l_obj_type TYPE zic_obj_type.

    l_obj_type = get_parent_type( ).

    create_object( EXPORTING i_parent = i_parent
                            i_obj_type = l_obj_type
                   CHANGING ch_object = ch_object ).

  ENDMETHOD.                    &quot;create_parent_object
  METHOD create_child_object.
*    IMPORTING I_PARENT TYPE REF TO ZIF_IC_COMPOSITE OPTIONAL
*    CHANGING ch_object TYPE REF TO object
    DATA: l_obj_type TYPE zic_obj_type.

    l_obj_type = get_child_type( ).

    create_object( EXPORTING i_parent = i_parent
                            i_obj_type = l_obj_type
                   CHANGING ch_object = ch_object ).
  ENDMETHOD.                    &quot;create_child_object
  METHOD create_object.
*    IMPORTING i_obj_type TYPE zic_obj_type
*    IMPORTING I_PARENT TYPE REF TO ZIF_IC_COMPOSITE  OPTIONAL
*    CHANGING ch_object TYPE REF TO object
    DATA: lo_obj TYPE REF TO object,
          l_class_name TYPE seoclsname.

    l_class_name = lcl_relation=&gt;get_class_name( i_obj_type ).

    IF i_parent IS INITIAL.
      CREATE OBJECT lo_obj TYPE (l_class_name).
    ELSE.
      lo_obj = zcl_ic_object=&gt;instance( i_obj_type = i_obj_type
                                        i_parent = i_parent ).
    ENDIF.

    ch_object ?= lo_obj.
  ENDMETHOD.                    &quot;create_object
  METHOD add_entry_to_table.
*   IMPORTING i_key type ref to data.
*             i_entry type ref to zif_ic_component=&gt;ty_comp_tab_entry.

    APPEND i_key TO m_keys.
    INSERT i_entry INTO TABLE m_entries.
  ENDMETHOD.                    &quot;add_entry_to_table
  METHOD map_rel_table.
*   importing im_rel type ref to lcl_relation,
    DATA: lwa_map TYPE lcl_relation=&gt;t_rel_mapping,
          lwa_map_exist TYPE lcl_relation=&gt;t_rel_mapping.

    lwa_map-parent = im_rel-&gt;get_parent_type( ).
    lwa_map-child = im_rel-&gt;get_child_type( ).
    lwa_map-relation = im_rel.

    READ TABLE m_relations_mapping INTO lwa_map_exist WITH KEY parent = lwa_map-parent
                                                               child = lwa_map-child.

    IF sy-subrc = 0.
      IF lwa_map_exist-relation IS BOUND AND
         lwa_map_exist-relation = lwa_map-relation.

        MODIFY TABLE m_relations_mapping FROM lwa_map.
      ELSE.
        APPEND lwa_map TO m_relations_mapping.
      ENDIF.
    ELSE.
      &quot;todo THROW ERROR REL does not exist.
    ENDIF.
  ENDMETHOD.                    &quot;map_rel_table
  METHOD add_entry_to_fk_table.
*   IMPORTING im_key_name type zic_or_key_map_name
*             im_key TYPE fieldname
*             im_value TYPE string,
*             im_parent_obj TYPE REF TO zif_ic_component.
    DATA: lwa_fk TYPE t_fk_struct.

    lwa_fk-key_name = im_key_name.
    lwa_fk-key = im_key.
    lwa_fk-value = im_value.
    lwa_fk-parent_obj = im_parent_obj.

    APPEND lwa_fk TO m_fk_keys.
  ENDMETHOD.                    &quot;add_entry_to_table
  METHOD add_fk.
*   IMPORTING im_ref_object type ref to data
*             im_object type ref to zif_ic_component
    FIELD-SYMBOLS: &lt;lwa_obj&gt; TYPE any,
                   &lt;lwa_key&gt; TYPE any.

    DATA: lit_rel TYPE lcl_relation=&gt;t_relations,
          lo_rel TYPE REF TO lcl_relation,
          l_mapping_fk TYPE zic_or_key_map_name.

    ASSIGN im_ref_object-&gt;* TO &lt;lwa_obj&gt;.

    IF  &lt;lwa_obj&gt; IS NOT ASSIGNED.
      RETURN.
    ENDIF.

    lit_rel = lcl_relation=&gt;create( im_object-&gt;get_type( ) ).

    LOOP AT lit_rel INTO lo_rel.
      IF lo_rel-&gt;get_type( ) &lt;&gt; lcl_relation=&gt;c_foreign_rel.
        EXIT.
      ENDIF.

      l_mapping_fk = lo_rel-&gt;get_fk_mapping( ).

      IF l_mapping_fk IS INITIAL.
        EXIT.
      ENDIF.

      DATA: lit_fk_key TYPE lcl_foreignkey_relation=&gt;t_mapping_fk_tab,
            lwa_fk_key TYPE zic_or_fk_map.

      lcl_foreignkey_relation=&gt;get_mapping_fk_table( EXPORTING im_key_name = l_mapping_fk
                                                     IMPORTING ex_map_fk_tab = lit_fk_key ).

      LOOP AT lit_fk_key INTO lwa_fk_key.
        ASSIGN COMPONENT lwa_fk_key-key_parent OF STRUCTURE &lt;lwa_obj&gt; TO &lt;lwa_key&gt;.

        IF &lt;lwa_key&gt; IS ASSIGNED
          AND &lt;lwa_key&gt; IS NOT INITIAL.
          DATA l_value TYPE string.

          l_value = &lt;lwa_key&gt;.
          add_entry_to_fk_table( im_key_name = lwa_fk_key-key_name
                                 im_key = lwa_fk_key-key_child
                                 im_value = l_value
                                 im_parent_obj = im_object ).
        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.                    &quot;add_fk

  METHOD get_sub_type_value.
*    IMPORTING i_structure TYPE any
*    RETURNING VALUE(rt_type_value) TYPE string
    FIELD-SYMBOLS: &lt;structure&gt; TYPE any,
                   &lt;sub_type&gt; TYPE any.

    ASSIGN i_structure TO &lt;structure&gt;.

    IF &lt;structure&gt; IS ASSIGNED
      AND m_sub_type IS NOT INITIAL.

      ASSIGN COMPONENT m_sub_type OF STRUCTURE i_structure  TO &lt;sub_type&gt;.

      IF &lt;sub_type&gt; IS ASSIGNED.
        rt_type_value = &lt;sub_type&gt;.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;get_sub_type_value
  METHOD is_passive_select.
*   RETURNING VALUE(rt_is_passive) type abap_bool,
    rt_is_passive = m_is_passive_select.
  ENDMETHOD.                    &quot;is_passive_select
  METHOD get_first_entry.
*   RETURNING VALUE(rt_entry) TYPE zif_ic_component=&gt;ty_comp_tab_entry.

    READ TABLE m_entries INTO rt_entry INDEX 1.
  ENDMETHOD.                    &quot;get_first_entry
  METHOD get_foreign_key.
*   RETURNING VALUE(rt_foreign_key) type fieldname,
*TODO make this structure
    rt_foreign_key = m_foreign_key.
  ENDMETHOD.                    &quot;get_foreign_key
  METHOD get_fk_mapping.
*   RETURNING VALUE(rt_fk_mapping) type zic_or_key_map_name,
    rt_fk_mapping = m_fk_mapping.
  ENDMETHOD.                    &quot;get_fk_mapping
  METHOD get_fk_table.
*   IMPORTING im_fk_name type fieldname
*             im_ref_child_key type ref to data
*   returning value(rt_fk_table) type ref to data.
    FIELD-SYMBOLS: &lt;lit_child&gt; TYPE STANDARD TABLE,
                   &lt;lwa_child&gt; TYPE any,
                   &lt;l_field&gt; TYPE any,
                   &lt;lwa_parent_a&gt; TYPE any,
                   &lt;lwa_parent_b&gt; TYPE any.

    DATA: lwa_fk TYPE t_fk_struct,
          lo_struct_descr TYPE REF TO cl_abap_structdescr,
          lo_tab_descr TYPE REF TO  cl_abap_tabledescr,
          l_r_child_fk_table TYPE REF TO data,
          l_r_child_fk TYPE REF TO data,
          l_ref_parent_a TYPE  REF TO data,
          l_ref_parent_b TYPE REF TO data,
          lo_current_parent TYPE REF TO zif_ic_component.

*   create child key table
    lo_struct_descr ?= cl_abap_structdescr=&gt;describe_by_data_ref( im_ref_child_key ).
    lo_tab_descr = cl_abap_tabledescr=&gt;create( lo_struct_descr ).

    CREATE DATA l_r_child_fk TYPE HANDLE lo_struct_descr.
    CREATE DATA l_r_child_fk_table TYPE HANDLE lo_tab_descr.

    ASSIGN l_r_child_fk-&gt;* TO &lt;lwa_child&gt;.
    ASSIGN l_r_child_fk_table-&gt;* TO &lt;lit_child&gt;.

    CLEAR &lt;lwa_child&gt;.

    LOOP AT m_fk_keys INTO lwa_fk WHERE key_name = im_fk_name.

      IF lo_current_parent IS NOT INITIAL.
        l_ref_parent_a = lwa_fk-parent_obj-&gt;get_key_struct( ).
        l_ref_parent_b = lo_current_parent-&gt;get_key_struct( ).

        ASSIGN l_ref_parent_a-&gt;* TO  &lt;lwa_parent_a&gt;.
        ASSIGN l_ref_parent_b-&gt;* TO  &lt;lwa_parent_b&gt;.

        IF &lt;lwa_parent_a&gt; IS ASSIGNED
          AND &lt;lwa_parent_b&gt; IS ASSIGNED
          AND &lt;lwa_parent_a&gt; &lt;&gt; &lt;lwa_parent_b&gt;.

          IF &lt;lwa_child&gt; IS NOT INITIAL.
            APPEND &lt;lwa_child&gt; TO &lt;lit_child&gt;.
          ENDIF.

          CLEAR &lt;lwa_child&gt;.
        ENDIF.
      ENDIF.

      ASSIGN COMPONENT lwa_fk-key OF STRUCTURE &lt;lwa_child&gt; TO &lt;l_field&gt;.

      IF &lt;l_field&gt; IS ASSIGNED.
        &lt;l_field&gt; = lwa_fk-value.
      ENDIF.

      lo_current_parent = lwa_fk-parent_obj.
    ENDLOOP.

    IF &lt;lwa_child&gt; IS NOT INITIAL.
      APPEND &lt;lwa_child&gt; TO &lt;lit_child&gt;.
    ENDIF.

    GET REFERENCE OF &lt;lit_child&gt; INTO rt_fk_table.
  ENDMETHOD.                    &quot;get_fk_table

  METHOD map_fk_object.
*   importing im_fk_mapping TYPE zic_or_key_map_name
*             im_fk_name type fieldname
*             im_child_object type ref to zif_ic_component.
    TYPES: BEGIN OF lt_parent,
            parent TYPE REF TO zif_ic_component,
           END OF lt_parent.

    FIELD-SYMBOLS: &lt;fk_key&gt; TYPE any,
                   &lt;fk_key_comp&gt; TYPE any.

    DATA: l_ref_fk_key TYPE REF TO data,
          lwa_fk_key TYPE t_fk_struct,
          lo_previous_parent TYPE REF TO zif_ic_component,
          l_key_match TYPE abap_bool,
          lwa_parent TYPE lt_parent,
          lit_parent_object TYPE TABLE OF lt_parent,
          l_new_parent TYPE abap_bool.


    l_ref_fk_key = im_child_object-&gt;get_key_struct( ).
    ASSIGN l_ref_fk_key-&gt;* TO &lt;fk_key&gt;.

    READ TABLE m_fk_keys INTO lwa_fk_key INDEX 1.

    IF sy-subrc = 0.
      l_key_match  = abap_false.
      l_new_parent = abap_true.
      lo_previous_parent = lwa_fk_key-parent_obj.
    ELSE.
      RETURN.
    ENDIF.

    LOOP AT m_fk_keys INTO lwa_fk_key WHERE key_name = im_fk_mapping.

      IF syst-tabix &gt; 1
        AND lo_previous_parent = lwa_fk_key-parent_obj
        AND l_key_match = abap_false.

        CONTINUE.
      ENDIF.

      IF lo_previous_parent &lt;&gt; lwa_fk_key-parent_obj.

        IF l_key_match = abap_true.
          READ TABLE lit_parent_object WITH KEY parent = lwa_fk_key-parent_obj
                                       TRANSPORTING NO FIELDS.

          IF syst-subrc &lt;&gt; 0.
            lwa_parent-parent = lo_previous_parent.
            APPEND lwa_parent TO lit_parent_object.
          ENDIF.
        ENDIF.


        l_key_match = abap_false.
        l_new_parent = abap_true.
        lo_previous_parent = lwa_fk_key-parent_obj.
      ENDIF.

      ASSIGN COMPONENT lwa_fk_key-key OF STRUCTURE &lt;fk_key&gt; TO &lt;fk_key_comp&gt;.

      IF &lt;fk_key_comp&gt; IS ASSIGNED.

        IF &lt;fk_key_comp&gt; &lt;&gt; lwa_fk_key-value.
          l_key_match  = abap_false.
        ELSEIF l_new_parent = abap_true.
          l_key_match  = abap_true.
        ENDIF.

      ELSE.
        l_key_match  = abap_false.
      ENDIF.

      l_new_parent = abap_false.
    ENDLOOP.

    IF l_key_match = abap_true.
      READ TABLE lit_parent_object WITH KEY parent = lwa_fk_key-parent_obj
                                   TRANSPORTING NO FIELDS.

      IF syst-subrc &lt;&gt; 0.
        lwa_parent-parent = lwa_fk_key-parent_obj.
        APPEND lwa_parent TO lit_parent_object.
      ENDIF.
    ENDIF.

    LOOP AT lit_parent_object INTO lwa_parent.
      inject_mapped_fk_object( im_fk_name = im_fk_name
                               im_child_object = im_child_object
                               im_parent_obj = lwa_parent-parent ).
    ENDLOOP.

  ENDMETHOD.                    &quot;map_fk_object

  METHOD inject_mapped_fk_object.
*   importing im_fk_name type fieldname
*             im_child_object type ref to zif_ic_component.
*             im_parent_obj TYPE REF TO zif_ic_component,
    CONSTANTS: lc_prefix_setter TYPE char4 VALUE &apos;SET_&apos;.

    DATA: lo_class TYPE REF TO zcl_ic_class,
          lo_class_val TYPE REF TO zcl_ic_class,
          lo_attrib TYPE REF TO zcl_ic_class_attrib,
          l_class_name TYPE zic_clsname,
          lo_value_val TYPE REF TO zcl_ic_class_value.

    l_class_name = cl_abap_classdescr=&gt;get_class_name( im_parent_obj ).
    l_class_name = l_class_name+7.

    CREATE OBJECT lo_class
      EXPORTING
        i_class_name        = l_class_name
        i_return_class_name = l_class_name.

    l_class_name = cl_abap_classdescr=&gt;get_class_name( im_child_object ).
    l_class_name = l_class_name+7.

    CREATE OBJECT lo_class_val
      EXPORTING
        i_class_name        = l_class_name
        i_return_class_name = l_class_name.

*todo CLASSNAME WHEN STATIC METHOD FOR FOREIGN KEY
    lo_class-&gt;set_object( im_parent_obj ).
    lo_attrib ?= zcl_ic_object=&gt;instance( i_parent = lo_class
                                          i_obj_type =  zcl_ic_object=&gt;c_class_attrib_type ).
    lo_attrib-&gt;zif_ic_component~set_name( im_fk_name ).

    lo_class_val-&gt;set_object( im_child_object ).
    lo_value_val ?= zcl_ic_class_value=&gt;create( lo_class_val ).

    lo_attrib-&gt;set_ic_value( lo_value_val ).
    lo_attrib-&gt;zif_ic_wirable~wire( ).

*   execute setter method
    DATA: lit_methods TYPE zcl_ic_method=&gt;ty_methods,
          lo_meth TYPE REF TO zcl_ic_method,
          l_setter_name TYPE string.

    l_setter_name = lc_prefix_setter &amp;&amp; im_fk_name.
    lo_class-&gt;get_methods( IMPORTING e_methods = lit_methods ).

    LOOP AT lit_methods INTO lo_meth.
      IF lo_meth-&gt;is_setter_method( ) = abap_true
        AND lo_meth-&gt;get_name( ) = l_setter_name.

        lo_meth-&gt;set_is_active( abap_true ).
        lo_meth-&gt;zif_ic_wirable~wire( ).
        EXIT.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.                    &quot;inject_mapped_fk_object

  METHOD get_type_tree.
*   importing i_comp type ref to zif_ic_component
*   exporting rt_type_tree type t_obj_types.
    DATA: l_type TYPE t_obj_type,
          l_ranking TYPE i VALUE 1,
          l_temp_comp TYPE REF TO zif_ic_component.

    REFRESH rt_type_tree.

    IF i_comp IS NOT INITIAL.
      l_type-ranking = l_ranking.
      l_type-obj_type = i_comp-&gt;get_type( ).
      l_type-key_value = i_comp-&gt;get_object_nr( ).

      APPEND l_type TO rt_type_tree.
    ELSE.
      RETURN.
    ENDIF.

    l_temp_comp = i_comp-&gt;get_parent( ).
    WHILE  l_temp_comp IS NOT INITIAL.
      CLEAR l_type.

      l_ranking = l_ranking + 1.
      l_type-ranking = l_ranking.
      l_type-obj_type = l_temp_comp-&gt;get_type( ).
      l_type-key_value = l_temp_comp-&gt;get_object_nr( ).

      APPEND l_type TO rt_type_tree.

      l_temp_comp = l_temp_comp-&gt;get_parent( ).
    ENDWHILE.

  ENDMETHOD.                    &quot;get_type_tree
  METHOD get_child_rels.
*   importing im_obj_type TYPE zic_obj_type
*   RETURNING VALUE(rt_rel_tab) type t_relations,
    DATA: lit_rels TYPE t_relations,
          lwa_rel TYPE t_rel_mapping.

    LOOP AT m_relations_mapping INTO lwa_rel.

      IF lwa_rel-child = im_obj_type.
        APPEND lwa_rel-relation TO rt_rel_tab.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    &quot;get_child_rels
  METHOD get_child_entries.
*   IMPORTING im_obj_type TYPE zic_obj_type
*   RETURNING value(rt_ENTRIES) TYPE zif_ic_component=&gt;ty_comp_tab_entries,
    DATA: lit_rel TYPE t_relations,
          lwa_rel TYPE t_relation.

    lit_rel = get_child_rels( im_obj_type ).

    LOOP AT lit_rel INTO lwa_rel.

      IF lwa_rel-&gt;get_entries( ) IS NOT INITIAL.
        rt_entries = lwa_rel-&gt;get_entries( ).
        RETURN.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    &quot;GET_CHILD_ENTRIES
  METHOD get_class_name.
*   IMPORTING i_type type zic_obj_type
*   RETURNING value(rt_class_name) type SEOCLSNAME.

*   TODO must be configuration later
    CASE i_type.
      WHEN zcl_ic_object=&gt;c_container_type.
        rt_class_name = &apos;ZCL_IC_CONTAINER&apos;.
      WHEN zcl_ic_object=&gt;c_cont_context_type.
        rt_class_name = &apos;ZCL_IC_CONT_CONTEXT&apos;.
      WHEN zcl_ic_object=&gt;c_impl_context_type.
        rt_class_name = &apos;ZCL_IC_IMPL_CONTEXT&apos;.
      WHEN zcl_ic_object=&gt;c_class_type.
        rt_class_name = &apos;ZCL_IC_CLASS&apos;.
    ENDCASE.

  ENDMETHOD.                    &quot;get_class_name
  METHOD get_identity.
*    IMPORTING im_tab_name TYPE tabname
*    RETURNING value(rt_identity) TYPE string.
    DATA lwa_type TYPE zic_or_types.

    READ TABLE ic_types INTO lwa_type
                        WITH KEY context = c_context
                                 table_name = im_tab_name
                        TRANSPORTING or_identity.

    rt_identity = lwa_type-or_identity.

  ENDMETHOD.                    &quot;get_identity

  METHOD map_all_passive_rels.
    DATA: lwa_rel TYPE t_relation,
          lit_rels TYPE t_relations.

    lit_rels = lcl_relation=&gt;get_rel_map_table( ).

    LOOP AT lit_rels INTO lwa_rel.

      IF lwa_rel-&gt;get_type( ) = lcl_relation=&gt;c_foreign_rel
        AND lwa_rel-&gt;is_passive_select( ) = abap_true.

        map_passive_rel( CHANGING ch_rel = lwa_rel ).
      ENDIF.
    ENDLOOP.

  ENDMETHOD.                    &quot;map_all_passive_rels
  METHOD map_passive_rel.
*   CHANGING ch_rel type ref to lcl_relation.
    FIELD-SYMBOLS: &lt;lit_fk&gt; TYPE table,
                   &lt;lwa_fk&gt; TYPE any,
                   &lt;lwa_fk_2&gt; TYPE any.

    DATA: lit_rel_childs TYPE t_relations,
          lit_rel_parents TYPE t_relations,
          lo_rel_child TYPE t_relation,
          lo_child TYPE REF TO zif_ic_component,
          lit_child_entries TYPE zif_ic_component=&gt;ty_comp_tab_entries,
          lwa_child_entry TYPE zif_ic_component=&gt;ty_comp_tab_entry,
          lit_parent_entries TYPE zif_ic_component=&gt;ty_comp_tab_entries,
          l_ref_fk_tab TYPE REF TO data,
          l_ref_fk_2 TYPE REF TO data.

    lit_parent_entries = lcl_relation=&gt;get_child_entries( im_obj_type = ch_rel-&gt;get_parent_type( )  ).
    lit_child_entries = lcl_relation=&gt;get_child_entries( im_obj_type = ch_rel-&gt;get_child_type( )  ).

    lit_rel_childs = lcl_relation=&gt;get_child_rels( ch_rel-&gt;get_parent_type( ) ).

    IF lit_parent_entries IS INITIAL
      OR lit_child_entries IS INITIAL.
      RETURN.
    ENDIF.

    READ TABLE lit_child_entries INTO lwa_child_entry INDEX 1.
    lo_child = lwa_child_entry-comp.

    LOOP AT lit_rel_childs INTO lo_rel_child.

      l_ref_fk_tab = lo_rel_child-&gt;get_fk_table( im_fk_name = ch_rel-&gt;get_fk_mapping( )
                                                 im_ref_child_key = lo_child-&gt;get_key_struct( ) ).

      ASSIGN l_ref_fk_tab-&gt;* TO &lt;lit_fk&gt;.

      IF &lt;lit_fk&gt; IS ASSIGNED
        AND &lt;lit_fk&gt; IS NOT INITIAL.

        LOOP AT &lt;lit_fk&gt; ASSIGNING &lt;lwa_fk&gt;.

          LOOP AT lit_child_entries INTO lwa_child_entry.
            l_ref_fk_2 = lwa_child_entry-comp-&gt;get_key_struct( ).
            ASSIGN l_ref_fk_2-&gt;* TO &lt;lwa_fk_2&gt;.

            IF  &lt;lwa_fk_2&gt; IS ASSIGNED
              AND &lt;lwa_fk_2&gt; IS NOT INITIAL
              AND   &lt;lwa_fk_2&gt; = &lt;lwa_fk&gt;.

              lo_rel_child-&gt;map_fk_object( im_fk_mapping = ch_rel-&gt;get_fk_mapping( )
                                           im_fk_name = ch_rel-&gt;get_foreign_key( )
                                           im_child_object = lwa_child_entry-comp ).
            ENDIF.
          ENDLOOP.
        ENDLOOP.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    &quot;map_passive_rel
  METHOD get_parent_rels.
*    RETURNING VALUE(rt_rels) TYPE t_relations
    DATA: lo_par_rels TYPE t_relations,
          lo_par_rel TYPE REF TO lcl_relation.

    lo_par_rels = lcl_relation=&gt;create( get_parent_type( ) ).

    LOOP AT lo_par_rels INTO lo_par_rel.

      IF lo_par_rel-&gt;get_child_type( ) = get_type( ).
        APPEND lo_par_rel TO rt_rels.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    &quot;get_parent_rel
  METHOD get_keys_table.
*   EXPORTING e_key_table TYPE table
    FIELD-SYMBOLS: &lt;key_struc_tab&gt; TYPE STANDARD TABLE,
                   &lt;key_struc&gt; TYPE any.

    DATA: lo_struct_type   TYPE REF TO cl_abap_structdescr,
          lo_table_type    TYPE REF TO cl_abap_tabledescr,
          l_r_key_table TYPE REF TO data,
          l_r_key_struc TYPE REF TO data.

    IF m_keys IS INITIAL.
      RETURN.
    ENDIF.

    READ TABLE m_keys INTO l_r_key_struc INDEX 1.

*   create key table
    lo_struct_type ?= cl_abap_structdescr=&gt;describe_by_data_ref( l_r_key_struc ).
    lo_table_type = cl_abap_tabledescr=&gt;create( lo_struct_type ).

    CREATE DATA l_r_key_table TYPE HANDLE lo_table_type.
    ASSIGN l_r_key_table-&gt;* TO &lt;key_struc_tab&gt;.

*   create key childs table from link table
    LOOP AT m_keys INTO l_r_key_struc.

      ASSIGN l_r_key_struc-&gt;* TO &lt;key_struc&gt;.
      APPEND &lt;key_struc&gt; TO &lt;key_struc_tab&gt;.
    ENDLOOP.

    e_key_table = &lt;key_struc_tab&gt;.
  ENDMETHOD.                    &quot;get_keys_table
  METHOD  get_entries.
*    RETURNING VALUE(RT_COMPS) TYPE zif_ic_component=&gt;ty_comp_tab_entries,
    rt_comps = m_entries.
  ENDMETHOD.                    &quot;GET_ENTRIES
  METHOD get_comp_by_nr.
*       IMPORTING i_obj_type    TYPE zic_obj_type
*                 i_obj_number TYPE zic_object_nr
*       RETURNING VALUE(rt_comp) TYPE zif_ic_component=&gt;ty_component,
    DATA: lo_comp TYPE zif_ic_composite=&gt;ty_component,
          lwa_entry TYPE zif_ic_composite=&gt;ty_comp_tab_entry.

    IF m_entries IS INITIAL.
      RETURN.
    ENDIF.

    READ TABLE m_entries
                INTO lwa_entry
                WITH TABLE KEY comp_type = i_comp_type
                               number = i_comp_number.

    IF m_entries IS NOT INITIAL.
      rt_comp = lwa_entry-comp.
    ENDIF.

  ENDMETHOD.                    &quot;get_entry
  METHOD get_parent_by_key.
*          IMPORTING I_comp_KEY type ref to DATA
*          RETURNING value(RT_COMPONENT) type ref to zif_ic_composite
    FIELD-SYMBOLS: &lt;lwa_key_struct&gt; TYPE any,
                   &lt;lwa_key_struct2&gt; TYPE any,
                   &lt;lwa_key_parent&gt; TYPE any.

    DATA: lo_parent TYPE REF TO zif_ic_composite,
          lwa_entry TYPE zif_ic_component=&gt;ty_comp_tab_entry,
          ld_parent TYPE REF TO data,
          ld_object_key2 TYPE REF TO data.

    LOOP AT m_entries INTO lwa_entry.
      IF lwa_entry-comp-&gt;is_parent( ) = abap_true.
        lo_parent ?= lwa_entry-comp.
      ELSE.
*       if this component is not a parent, other composists aren&apos;t parents
        EXIT.
      ENDIF.

*     assign component key
      ASSIGN  i_comp_key-&gt;* TO &lt;lwa_key_struct&gt;.

*     assign the object key to search for
      ld_parent = lo_parent-&gt;get_key_struct( ).
      ASSIGN ld_parent-&gt;* TO &lt;lwa_key_parent&gt;.

*   assign second structure &lt;lwa_key_struct2&gt; as a copy of  &lt;lwa_key_struct&gt;
      CREATE DATA ld_object_key2 LIKE &lt;lwa_key_parent&gt;.
      ASSIGN ld_object_key2-&gt;* TO &lt;lwa_key_struct2&gt;.

      MOVE-CORRESPONDING &lt;lwa_key_struct&gt; TO &lt;lwa_key_struct2&gt;.

      IF  &lt;lwa_key_parent&gt; = &lt;lwa_key_struct2&gt;.
        rt_component = lo_parent.
        EXIT.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.                    &quot;gET_comp_by_key
  METHOD constructor.

    m_rel_type = i_wa_relation-rel_type.
    m_parent_type    = i_wa_relation-parent.
    m_child_type    = i_wa_relation-child.
    m_sub_type = i_wa_relation-sub_type.
    m_inner_key = i_wa_relation-inner_key.
*   linking with
    m_link_tabname   = i_wa_relation-link_table.
    m_link_key_field = i_wa_relation-link_key_field.
    m_link_type_field = i_wa_relation-link_type_field.
    m_link_key_map  = i_wa_relation-link_keymap_field.
    m_foreign_key   = i_wa_relation-foreign_key.
    m_fk_mapping = i_wa_relation-fk_mapping.
    m_is_passive_select = i_wa_relation-is_passive_select.

  ENDMETHOD.                    &quot;constructor

  METHOD get_type.
    r_rel_type = m_rel_type.
  ENDMETHOD.                    &quot;get_rel_type

  METHOD get_parent_type.
    r_parent_type = m_parent_type.
  ENDMETHOD.                    &quot;get_parent_type

  METHOD get_child_type.
    r_child_type = m_child_type.
  ENDMETHOD.                    &quot;get_child_type
  METHOD get_sub_type.
    r_sub_type = m_sub_type.
  ENDMETHOD.                    &quot;get_sub_type
  METHOD get_inner_key.
    r_inner_key = m_inner_key.
  ENDMETHOD.                    &quot;get_inner_key
  METHOD  get_link_table.
    &quot; returning value(r_tabname) type tabname.
    r_tabname = m_link_tabname.
  ENDMETHOD.                    &quot;get_link_table
  METHOD get_link_key_field.
    r_fieldname = m_link_key_field.
  ENDMETHOD.                    &quot;get_link_key_field
  METHOD get_link_key_map.
    r_fieldname = m_link_key_map.
  ENDMETHOD.                    &quot;get_link_key_map
  METHOD get_link_type_field.
    r_fieldname = m_link_type_field.
  ENDMETHOD.                    &quot;get_link_type_field
  METHOD get_parent_via_tree.
*    importing i_wa_child type ref to data
*              i_parent_comp type ref to zif_ic_composite
*              i_ancestor TYPE REF TO zif_ic_composite
*              i_parent_rel TYPE REF TO lcl_relation
*    returning value(rt_parent) TYPE REF TO zif_ic_composite,
    DATA: lo_temp_parent TYPE REF TO zif_ic_composite,
          lwa_obj_type TYPE t_obj_type,
          lit_obj_types TYPE t_obj_types,
          l_type_index TYPE i.

    CLEAR l_type_index.

    IF i_parent_rel IS NOT INITIAL
      AND m_rel_type &lt;&gt; lcl_relation=&gt;c_inner_rel.
      &quot;TODO  and m_rel_type &lt;&gt; lcl_relation=&gt;c_inner_rel. moet inheritance worden???
      rt_parent ?= i_parent_rel-&gt;get_parent_by_key( i_comp_key = i_wa_child  ).
      RETURN.
    ENDIF.

    lo_temp_parent = i_ancestor.

    lcl_relation=&gt;get_type_tree(
                    EXPORTING i_comp = i_parent_comp
                    IMPORTING rt_type_tree = lit_obj_types ).

*   Select branch of type tree
    READ TABLE lit_obj_types INTO lwa_obj_type WITH KEY obj_type = lo_temp_parent-&gt;get_type( ).

    IF sy-subrc = 0.
      l_type_index = lwa_obj_type-ranking.
    ELSE.
      l_type_index = 0.
    ENDIF.

    SORT lit_obj_types BY ranking.

    WHILE l_type_index &gt; 1.
      DATA: lo_child TYPE REF TO zif_ic_component.

      l_type_index =  l_type_index - 1.
      READ TABLE lit_obj_types INTO lwa_obj_type WITH KEY ranking = l_type_index BINARY SEARCH.

      IF sy-subrc = 0.
        DATA: l_has_inner_rel TYPE abap_bool,
              l_relations TYPE t_relations,
              l_relation TYPE t_relation.

        lcl_inner_relation=&gt;has_inner_relation( EXPORTING i_obj_type = lwa_obj_type-obj_type
                                                IMPORTING e_has_inner_rel = l_has_inner_rel
                                                          e_relations =  l_relations ).
        IF  l_has_inner_rel = abap_false
          OR  l_type_index = 1.  &quot;inner rrelation as i_wa_child not in lit_obj_types

          lo_child = lo_temp_parent-&gt;get_child_by_key( i_comp_type = lwa_obj_type-obj_type
                                            i_object_key = i_wa_child ).
        ENDIF.

        IF  l_has_inner_rel = abap_true &quot;is inner relation and inner relation is not child
           AND lo_child IS INITIAL.
          LOOP AT l_relations INTO l_relation.
            DATA l_obj_nr TYPE zic_object_nr.

            IF l_relation-&gt;get_child_type( ) = lwa_obj_type-obj_type.
              l_obj_nr = lwa_obj_type-key_value.
              lo_child = lo_temp_parent-&gt;get_child( i_comp_type = lwa_obj_type-obj_type
                                                    i_object_nr = l_obj_nr ).
            ENDIF.

          ENDLOOP.

        ENDIF.

        IF lo_child IS INITIAL.
          &quot;TODO ERROR  ERROR IF child is initial ???
          break bcuser.
        ENDIF.
        IF lo_child-&gt;is_parent( ) = abap_true.
          lo_temp_parent ?= lo_child.
        ELSE.
          l_type_index = 0.
        ENDIF.
      ELSE.
        l_type_index = 0.
      ENDIF.

      FREE lo_child.
    ENDWHILE.

    rt_parent = lo_temp_parent.
  ENDMETHOD.                    &quot;get_parent_via_tree

  METHOD calc_min_key.
*     IMPORTING i_root_comp TYPE REF TO zif_ic_composite
*               i_parent_comp TYPE REF TO zif_ic_composite
*     EXPORTING ex_ancester_comp TYPE REF TO zif_ic_composite
*               ex_min_object_key TYPE REF TO data,

*   determine the minimum common key
*   until the root component is reached
    DATA: l_search_flag TYPE abap_bool VALUE abap_true,
          l_has_key TYPE abap_bool,
          l_o_parent_temp TYPE REF TO zif_ic_composite,
          l_wa_temp_key TYPE REF TO data.

    IF zcl_ic_object=&gt;instance( i_obj_type = m_child_type i_parent = i_parent_comp ) IS INITIAL.
*     TODO ERROR
*      throw error
      break bcuser.
    ENDIF.

    l_wa_temp_key = zcl_ic_object=&gt;instance( i_obj_type = m_child_type i_parent = i_parent_comp )-&gt;zif_ic_meta_info~get_key_struct( ).
    l_o_parent_temp = i_parent_comp.

    WHILE l_search_flag = abap_true.
*     compare keys
      l_has_key = has_common_key( i_parent = l_o_parent_temp-&gt;get_key_struct( )
                                  i_child = l_wa_temp_key ).

*     set temp structure or temp minimal key + assign return key
      IF l_has_key = abap_true.
        l_wa_temp_key = l_o_parent_temp-&gt;get_key_struct( ).
        ex_min_object_key = l_wa_temp_key.
      ENDIF.

*     condition
      IF l_wa_temp_key IS INITIAL
         OR l_o_parent_temp-&gt;get_type( ) = i_root_comp-&gt;get_type( )
        OR l_o_parent_temp-&gt;get_parent( ) IS INITIAL.

        l_search_flag = abap_false.
      ELSE.
*       go on with parent of parent
        l_o_parent_temp = l_o_parent_temp-&gt;get_parent( ).
      ENDIF.
    ENDWHILE.

    ex_ancester_comp =  l_o_parent_temp.
  ENDMETHOD.                    &quot;calc_min_key

  METHOD has_common_key.
    FIELD-SYMBOLS: &lt;comp_descr&gt; LIKE LINE OF cl_abap_structdescr=&gt;components.

    DATA: l_has_common TYPE abap_bool VALUE abap_false,
          lo_parent TYPE REF TO cl_abap_structdescr,
          lo_child TYPE REF TO cl_abap_structdescr.

    TRY.
        lo_parent ?= cl_abap_structdescr=&gt;describe_by_data_ref( i_parent ).
        lo_child ?= cl_abap_structdescr=&gt;describe_by_data_ref( i_child ).
      CATCH cx_sy_move_cast_error.
        RETURN.
    ENDTRY.

    LOOP AT lo_parent-&gt;components ASSIGNING &lt;comp_descr&gt;.
      l_has_common = abap_true.

      READ TABLE lo_child-&gt;components WITH KEY name = &lt;comp_descr&gt;-name TRANSPORTING NO FIELDS.

      IF sy-subrc &lt;&gt; 0.
        l_has_common = abap_false.
        EXIT.
      ENDIF.

    ENDLOOP.

    rt_has_common_key = l_has_common.
  ENDMETHOD.                    &quot;get_common_key

ENDCLASS.         &quot;lcl_relation IMPLEMENTATION.



*----------------------------------------------------------------------*
*       CLASS lcl_relation_util
*----------------------------------------------------------------------*
* Relation Utilites
*----------------------------------------------------------------------*
CLASS lcl_relation_util IMPLEMENTATION.

  METHOD get_ancestor.
*    IMPORTING i_type_rel TYPE zic_rel_type
*              i_compn type ref to zif_ic_component
*    EXPORTING e_compn TYPE REF TO zif_ic_component.
    DATA l_compn TYPE REF TO zif_ic_component.

    l_compn = i_compn.

    WHILE l_compn IS NOT INITIAL.
      IF l_compn-&gt;get_type( ) = i_type_rel.
        e_compn = l_compn.
        RETURN.
      ENDIF.

      l_compn = l_compn-&gt;get_parent( ).
    ENDWHILE.

  ENDMETHOD.                    &quot;get_ancestor

  METHOD select_sub_tree.
*    IMPORTING i_root_comp TYPE REF TO zif_ic_composite OPTIONAL
*              i_dept TYPE numc2 DEFAULT 99
*              i_until_object TYPE zic_obj_type OPTIONAL
*    CHANGING  ch_parent_comp TYPE REF TO zif_ic_component
*              ch_prev_rel type lcl_relation=&gt;t_relation optional
    FIELD-SYMBOLS: &lt;lit_obj&gt; TYPE STANDARD TABLE,
                 &lt;lwa_obj&gt; TYPE any.

    DATA: lo_root_comp TYPE REF TO zif_ic_composite,
          l_dept TYPE numc2,
          lit_rel TYPE lcl_relation=&gt;t_relations,
          lo_rel TYPE lcl_relation=&gt;t_relation.

*   Recursive method with always the same root-component
    l_dept = i_dept.

    IF i_root_comp IS INITIAL
      AND ch_parent_comp-&gt;is_parent( ) = abap_true.

      lo_root_comp ?= ch_parent_comp.
    ELSE.
      lo_root_comp = i_root_comp.
    ENDIF.

    IF ch_parent_comp-&gt;get_type( ) = i_until_object.
      l_dept = 0.
    ENDIF.

    IF  l_dept &gt; 0.
      l_dept =  l_dept - 1.
    ELSE.
      RETURN.
    ENDIF.

    lit_rel = lcl_relation=&gt;create( i_obj_type = ch_parent_comp-&gt;get_type( ) ).

    LOOP AT lit_rel INTO lo_rel.

      IF  lo_rel-&gt;get_parent_type( ) = i_until_object
        OR lo_rel-&gt;get_child_type( ) = i_until_object.
*       last object to pt in tree
        l_dept = 0.
      ENDIF.

      IF lo_rel-&gt;get_type( )  = lcl_relation=&gt;c_foreign_rel.

        map_childs_via_rel_fk(  EXPORTING i_root_comp =  lo_root_comp
                                          i_prev_rel = ch_prev_rel
                                CHANGING  ch_fk_comp = ch_parent_comp
                                          ch_relation = lo_rel ).
      ELSE.
*       map childs via relation into objects
        DATA: lo_parent_comp TYPE REF TO zif_ic_composite.

        lo_parent_comp ?= ch_parent_comp.

        map_childs_via_relation(  EXPORTING i_root_comp =  lo_root_comp
                                            i_prev_rel = ch_prev_rel
                                  CHANGING  ch_parent_comp = lo_parent_comp
                                           ch_relation = lo_rel ).
      ENDIF.

      DATA: lit_childs TYPE zif_ic_component=&gt;ty_comp_tab_entries,
            lwa_child TYPE zif_ic_component=&gt;ty_comp_tab_entry.

      lwa_child = lo_rel-&gt;get_first_entry( ).

      IF sy-subrc = 0 AND lwa_child-comp IS NOT INITIAL.
*         child has children then child = parent
        DATA lit_rels TYPE lcl_relation=&gt;t_relations.

        REFRESH lit_rels.

        lit_rels = lcl_relation=&gt;create( lwa_child-comp-&gt;get_type( ) ).

*       don&apos;t do same types, they are already done =&gt; inner childs
        WHILE lwa_child-comp-&gt;get_parent( ) IS NOT INITIAL
               AND lwa_child-comp-&gt;get_parent( )-&gt;get_type( )
               = lwa_child-comp-&gt;get_type( ).

          DATA lo_temp_parent TYPE REF TO zif_ic_composite.

          lo_temp_parent ?= lwa_child-comp.
          lit_childs = lo_temp_parent-&gt;get_children( ).

          IF lit_childs IS NOT INITIAL.
            READ TABLE lit_childs INTO lwa_child WITH KEY comp_type = lo_temp_parent-&gt;get_type( ).

            IF sy-subrc &lt;&gt; 0.
              EXIT.
            ENDIF.
          ELSE.
            EXIT.
          ENDIF.
        ENDWHILE.

        IF lit_rels IS NOT INITIAL.

          select_sub_tree(
             EXPORTING i_root_comp = lo_root_comp
                       i_dept = l_dept
                       i_until_object = i_until_object
             CHANGING  ch_parent_comp = lwa_child-comp
                       ch_prev_rel = lo_rel ).

        ENDIF.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    &quot;select_sub_tree

  METHOD map_childs_via_relation.
*        IMPORTING i_root_comp TYPE REF TO zif_ic_composite
*                  i_prev_rel type ref to lcl_relation OPTIOnAL
*                  i_ref_condition TYPE REF TO data OPTIONAL
*        CHANGING  ch_parent_comp TYPE REF TO zif_ic_composite
*                  ch_relation    TYPE REF TO lcl_relation,

    DATA: lwa_min_key TYPE REF TO data,
          l_it_childs TYPE REF TO data,
          lo_child TYPE zif_ic_component=&gt;ty_component,
          lo_ancester_comp TYPE REF TO zif_ic_composite.

    CASE ch_relation-&gt;get_type( ).
      WHEN lcl_relation=&gt;c_composed_rel.
*       determine_min_key to get al instances in a relation
        ch_relation-&gt;calc_min_key(
                      EXPORTING i_root_comp = i_root_comp
                                i_parent_comp = ch_parent_comp
                      IMPORTING ex_ancester_comp = lo_ancester_comp
                                ex_min_object_key = lwa_min_key ).

*       get table with all childs
        ch_parent_comp-&gt;zif_ic_component~create_child(
                          EXPORTING i_parent = ch_parent_comp
                                    i_type = ch_relation-&gt;get_child_type( )
                          IMPORTING ex_instance = lo_child ).

        IF lo_child IS NOT BOUND.
          &quot;TODO THROW ERROR
          break bcuser.
        ENDIF.

        FIELD-SYMBOLS: &lt;lit_keys_ref&gt; TYPE table.
        DATA: lit_keys_ref TYPE lcl_relation=&gt;t_key_table,
              lo_struct_key_type   TYPE REF TO cl_abap_structdescr,
              lo_table_key_type    TYPE REF TO cl_abap_tabledescr,
              l_r_key_table TYPE REF TO data.

        IF i_prev_rel IS NOT INITIAL.
*         assign key table
          lo_struct_key_type ?= cl_abap_structdescr=&gt;describe_by_data_ref( ch_parent_comp-&gt;get_key_struct( ) ).
          lo_table_key_type = cl_abap_tabledescr=&gt;create( lo_struct_key_type ).

          CREATE DATA l_r_key_table TYPE HANDLE lo_table_key_type.
          ASSIGN l_r_key_table-&gt;* TO &lt;lit_keys_ref&gt;.
          i_prev_rel-&gt;get_keys_table( IMPORTING e_key_table  = &lt;lit_keys_ref&gt; ).

          l_it_childs = zcl_ic_persist=&gt;select_table( i_ic_obj_ref = lo_child
                              i_result_struc = lo_child-&gt;zif_ic_meta_info~get_obj_struct( )
                              i_condition_struc = ch_parent_comp-&gt;get_key_struct( )
                              i_is_fk = abap_true
                              i_key_tab = &lt;lit_keys_ref&gt; ).
        ELSE.
*         extra conditions
          IF i_ref_condition IS BOUND.
            lwa_min_key = zcl_ic_utils=&gt;merge_structure( i_struct_a = lwa_min_key
                                                         i_struct_b = i_ref_condition ).
          ENDIF.

          l_it_childs = zcl_ic_persist=&gt;select_table( i_ic_obj_ref = lo_child
                                        i_result_struc = lo_child-&gt;zif_ic_meta_info~get_obj_struct( )
                                        i_condition_struc = lwa_min_key ).

        ENDIF.

        lcl_composed_relation=&gt;map_comp_childs_into_parent(
           EXPORTING i_it_childs = l_it_childs
                    i_prev_rel = i_prev_rel
                    i_ancester_comp = lo_ancester_comp
           CHANGING ch_parent_comp = ch_parent_comp
                    ch_relation = ch_relation ).

      WHEN lcl_relation=&gt;c_inner_rel.
        DATA lo_inner_parent TYPE REF TO zif_ic_composite.
*       determine root parent
        lo_inner_parent = ch_parent_comp-&gt;get_parent( ).


        IF lo_inner_parent IS NOT INITIAL
          AND ch_parent_comp-&gt;get_type( ) = ch_relation-&gt;get_parent_type( ).

*       search children
*         determine_min_key to get al instances in a relation
          ch_relation-&gt;calc_min_key(
                        EXPORTING i_root_comp = lo_inner_parent
                                  i_parent_comp = lo_inner_parent
                        IMPORTING ex_ancester_comp = lo_ancester_comp
                                  ex_min_object_key = lwa_min_key ).

          ch_parent_comp-&gt;zif_ic_component~create_child(
                   EXPORTING i_parent = lo_inner_parent
                             i_type = ch_relation-&gt;get_child_type( )
                    IMPORTING ex_instance = lo_child ).

          l_it_childs = zcl_ic_persist=&gt;select_table( i_ic_obj_ref = lo_child
                                        i_result_struc = lo_child-&gt;zif_ic_meta_info~get_obj_struct( )
                                        i_condition_struc = lwa_min_key ).

          lcl_inner_relation=&gt;map_inner_childs_into_parent(
                EXPORTING i_it_childs = l_it_childs
                          i_prev_rel = i_prev_rel
                CHANGING  ch_ancester_comp = lo_ancester_comp
                          ch_parent_comp = lo_inner_parent
                          ch_relation = ch_relation ).
        ENDIF.
*TODO weg      WHEN lcl_relation=&gt;c_foreign_rel.

      WHEN lcl_relation=&gt;c_link_rel.
*       TODO make seperate method for all WHEN&apos;s
        FIELD-SYMBOLS: &lt;lit_link_childs&gt; TYPE STANDARD TABLE,
               &lt;lwa_link_child&gt; TYPE any.

        DATA: lo_link_obj TYPE REF TO zif_ic_meta_info,
               l_it_link_childs TYPE REF TO data.

*       Step 1: links: parent - child
*       *****************************

*       determine_min_key to get al instances in a relation
        ch_relation-&gt;calc_min_key(
                      EXPORTING i_root_comp = i_root_comp
                                i_parent_comp = ch_parent_comp
                      IMPORTING ex_ancester_comp = lo_ancester_comp
                                ex_min_object_key = lwa_min_key ).

*       get table with all linked childs
        ch_parent_comp-&gt;zif_ic_component~create_child(
                         EXPORTING i_parent = ch_parent_comp
                                    i_type = ch_relation-&gt;get_child_type( )
                          IMPORTING ex_instance = lo_child ).

        lo_link_obj = lcl_link_object=&gt;create( i_parent = ch_parent_comp
                                               i_child = lo_child
                                               i_rel = ch_relation ).

*       add type field to key for linked rel
        lwa_min_key = zcl_ic_utils=&gt;add_field_to_structure(
                                       im_field      = ch_relation-&gt;get_child_type( )
                                       im_field_name = ch_relation-&gt;get_link_type_field( )
                                       im_struct     = lwa_min_key ).

        l_it_link_childs = zcl_ic_persist=&gt;select_table( i_ic_obj_ref = lo_link_obj
                                      i_result_struc = lo_link_obj-&gt;get_key_struct( )
                                      i_condition_struc = lwa_min_key ).

* TODO  apparte methode maken?
*       Step 2: childs
*       **************
        FIELD-SYMBOLS: &lt;link_fk&gt; TYPE any,
                       &lt;child_struc&gt; TYPE any,
                       &lt;child_struc_tab&gt; TYPE table.

        DATA: l_key_name TYPE fieldname,
              l_r_child_key TYPE REF TO data,
              lo_struct_type   TYPE REF TO cl_abap_structdescr,
              lo_table_type    TYPE REF TO cl_abap_tabledescr,
              l_r_child_fk_table TYPE REF TO data.

        l_key_name =  ch_relation-&gt;get_link_key_field( ).
        ASSIGN l_it_link_childs-&gt;* TO &lt;lit_link_childs&gt;.

        IF &lt;lit_link_childs&gt; IS INITIAL.
          RETURN.
        ENDIF.
*       create a structure for the child key
        l_r_child_key = lo_child-&gt;get_key_struct( ).
        ASSIGN l_r_child_key-&gt;* TO &lt;child_struc&gt;.

*       create child key table
        lo_struct_type ?= cl_abap_structdescr=&gt;describe_by_data_ref( l_r_child_key ).
        lo_table_type = cl_abap_tabledescr=&gt;create( lo_struct_type ).

        CREATE DATA l_r_child_fk_table TYPE HANDLE lo_table_type.
        ASSIGN l_r_child_fk_table-&gt;* TO &lt;child_struc_tab&gt;.

*       create key childs table from link table
        LOOP AT &lt;lit_link_childs&gt; ASSIGNING &lt;lwa_link_child&gt;.
          CLEAR &lt;child_struc&gt;.

          ASSIGN COMPONENT l_key_name OF STRUCTURE &lt;lwa_link_child&gt; TO &lt;link_fk&gt;.

          MOVE &lt;link_fk&gt; TO &lt;child_struc&gt;.
          APPEND &lt;child_struc&gt; TO &lt;child_struc_tab&gt;.
        ENDLOOP.

*       get data from child table
        l_it_childs = zcl_ic_persist=&gt;select_table( i_ic_obj_ref = lo_child
                                      i_result_struc = lo_child-&gt;zif_ic_meta_info~get_obj_struct( )
                                      i_is_fk = abap_true
                                      i_condition_struc = lo_child-&gt;get_key_struct( )
                                      i_key_tab = &lt;child_struc_tab&gt; ).
*       map child table into objects
        lcl_linked_relation=&gt;map_linked_childs_into_parent(
             EXPORTING i_it_childs =  l_it_childs
                       i_link_table = &lt;lit_link_childs&gt;
                       i_prev_rel = i_prev_rel
             CHANGING  ch_ancester_comp = lo_ancester_comp
                       ch_parent_comp = ch_parent_comp
                       ch_relation = ch_relation ).

    ENDCASE.

  ENDMETHOD.                    &quot;map_childs_via_relation

  METHOD map_childs_via_rel_fk.
*        IMPORTING i_root_comp TYPE REF TO zif_ic_composite
*                  i_prev_rel type ref to lcl_relation OPTIOnAL
*                  i_ref_condition TYPE REF TO data OPTIONAL
*        CHANGING  ch_fk_comp TYPE REF TO zif_ic_component
*                  ch_relation    TYPE REF TO lcl_relation,
    FIELD-SYMBOLS: &lt;lit_fk_childs&gt; TYPE STANDARD TABLE,
                   &lt;lwa_fk_child&gt; TYPE any.

    DATA: l_it_childs TYPE REF TO data,
          lo_child TYPE zif_ic_component=&gt;ty_component,
          l_ref_fk_table TYPE REF TO data,
          l_ref_fk_item TYPE REF TO data,
          l_fk_name TYPE fieldname.

    IF i_prev_rel IS INITIAL.
      RETURN.
    ENDIF.

    IF ch_relation-&gt;is_passive_select( ) = abap_true.
      EXIT.
    ENDIF.
*   create keys table parents
    lo_child = zcl_ic_object=&gt;instance( i_obj_type = ch_relation-&gt;get_child_type( ) ).
    l_fk_name = ch_relation-&gt;get_foreign_key( ).
    l_ref_fk_table = i_prev_rel-&gt;get_fk_table( im_fk_name = ch_relation-&gt;get_fk_mapping( )
                                               im_ref_child_key = lo_child-&gt;get_key_struct( ) ).

    ASSIGN l_ref_fk_table-&gt;* TO &lt;lit_fk_childs&gt;.

*   get data from child table
    l_it_childs = zcl_ic_persist=&gt;select_table( i_ic_obj_ref = lo_child
                                  i_result_struc = lo_child-&gt;zif_ic_meta_info~get_obj_struct( )
                                  i_is_fk = abap_true
                                  i_condition_struc = lo_child-&gt;get_key_struct( )
                                  i_key_tab = &lt;lit_fk_childs&gt; ).

    ASSIGN l_it_childs-&gt;* TO &lt;lit_fk_childs&gt;.

    LOOP AT &lt;lit_fk_childs&gt; ASSIGNING &lt;lwa_fk_child&gt;.

      GET REFERENCE OF &lt;lwa_fk_child&gt; INTO l_ref_fk_item.
*     TODO with every instance method ADD i_sub_type = ch_relation-&gt;get_sub_type_value
      lo_child = zcl_ic_object=&gt;instance( i_obj_type = ch_relation-&gt;get_child_type( )
                                          i_sub_type = ch_relation-&gt;get_sub_type_value( &lt;lwa_fk_child&gt; ) ).

      IF lo_child IS NOT BOUND.
        break bcuser.
        &quot;TODO error subtype doesn&apos;t exist
      ENDIF.

      lo_child-&gt;fill_by_struct( l_ref_fk_item ).

      i_prev_rel-&gt;map_fk_object( im_fk_mapping = ch_relation-&gt;get_fk_mapping( )
                                 im_fk_name = l_fk_name
                                 im_child_object = lo_child ).

*     add_entry_to_table
      ch_relation-&gt;add_entry_to_table( i_key = lo_child-&gt;get_key_struct( )
                                       i_entry = lo_child-&gt;tab_entry( ) ).

      ch_relation-&gt;add_fk( im_ref_object = l_ref_fk_item
                           im_object = lo_child ).
    ENDLOOP.

    ch_relation-&gt;map_rel_table( ch_relation ).

  ENDMETHOD.                    &quot;map_childs_via_rel_fk

ENDCLASS.                    &quot;lcl_relation IMPLEMENTATION\
*----------------------------------------------------------------------*
*       CLASS lcl_composed_relatio
*----------------------------------------------------------------------*
* lcl_composed_relatio
*----------------------------------------------------------------------*
CLASS lcl_composed_relation IMPLEMENTATION.
  METHOD map_comp_childs_into_parent.
*                        IMPORTING i_it_childs TYPE REF TO data
*                                  i_prev_rel TYPE REF TO lcl_relation
*                                  i_ancester_comp TYPE REF TO zif_ic_composite
*                         CHANGING ch_parent_comp TYPE REF TO zif_ic_composite
*                                  ch_relation  TYPE REF TO lcl_relation,
    FIELD-SYMBOLS: &lt;lit_childs&gt; TYPE STANDARD TABLE,
                   &lt;lwa_child&gt; TYPE any.

    DATA: lo_temp_parent TYPE REF TO zif_ic_composite,
          lo_child TYPE zif_ic_composite=&gt;ty_component.

*   map childs in their specific tree structure
    IF NOT i_it_childs IS BOUND.
      RETURN.
    ENDIF.

    ASSIGN i_it_childs-&gt;* TO &lt;lit_childs&gt;.

    LOOP AT &lt;lit_childs&gt; ASSIGNING &lt;lwa_child&gt;.
      DATA: l_o_child TYPE REF TO data.

      GET REFERENCE OF &lt;lwa_child&gt; INTO l_o_child.

      lo_temp_parent = ch_relation-&gt;get_parent_via_tree( i_wa_child =  l_o_child
                                         i_parent_comp = ch_parent_comp
                                         i_ancestor = i_ancester_comp
                                         i_parent_rel = i_prev_rel ).

      lo_temp_parent-&gt;zif_ic_component~create_child(
                        EXPORTING i_parent = lo_temp_parent
                                  i_type = ch_relation-&gt;get_child_type( )
                                  i_sub_type = ch_relation-&gt;get_sub_type_value( &lt;lwa_child&gt; )
                        IMPORTING ex_instance = lo_child ).

      IF lo_child IS NOT BOUND.
        RETURN.
        &quot;TODO WEG
        &quot;TODO throw error
        break bcuser.
        lo_temp_parent-&gt;zif_ic_component~create_child(
                  EXPORTING i_parent = lo_temp_parent
                            i_type = ch_relation-&gt;get_child_type( )
                            i_sub_type = ch_relation-&gt;get_sub_type_value( &lt;lwa_child&gt; )
                  IMPORTING ex_instance = lo_child ).
        break bcuser.
      ENDIF.

      GET REFERENCE OF &lt;lwa_child&gt; INTO l_o_child.

      lo_child-&gt;fill_by_struct( l_o_child ).

      lo_temp_parent-&gt;add( lo_child ).

      ch_relation-&gt;add_entry_to_table( i_key = lo_child-&gt;get_key_struct( )
                                       i_entry = lo_child-&gt;tab_entry( ) ).

      ch_relation-&gt;add_fk( im_ref_object = l_o_child
                           im_object = lo_child ).
    ENDLOOP.

*   map relation
    ch_relation-&gt;map_rel_table( ch_relation ).

  ENDMETHOD.                    &quot;map_comp_childs_into_parent

ENDCLASS.                    &quot;lcl_composed_relation IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_Inner_relation
*----------------------------------------------------------------------*
* lcl_Inner_relation
*----------------------------------------------------------------------*
CLASS lcl_inner_relation IMPLEMENTATION.
  METHOD  has_inner_relation.
*           IMPORTING i_obj_type TYPE zic_obj_type
*           EXPORTING e_has_inner_rel TYPE abap_bool
*                     e_relations type ref to t_relations.
    DATA: lo_rels TYPE t_relations,
          lo_rel TYPE t_relation.

    e_has_inner_rel = abap_false.
    REFRESH e_relations.

    lo_rels = lcl_relation=&gt;create( i_obj_type ).

    LOOP AT lo_rels INTO lo_rel.

      IF lo_rel-&gt;get_type( ) = lcl_relation=&gt;c_inner_rel.
        e_has_inner_rel = abap_true.
        APPEND lo_rel TO e_relations.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    &quot;is_inner_relation
  METHOD map_inner_childs_into_parent.
*   IMPORTING i_it_childs TYPE REF TO data
*             i_prev_rel TYPE REF TO lcl_relation
*   CHANGING ch_ancester_comp TYPE REF TO zif_ic_composite
*            ch_parent_comp TYPE REF TO zif_ic_composite
*            ch_relation  TYPE REF TO lcl_relation.
*TODO make import
*TODO ch_parent_comp mag misschien weg??????????????????????????
    TYPES: BEGIN OF lt_inner_comp,
              comp_nr TYPE zic_object_nr,
              parent_nr TYPE zic_object_nr,
              inner_comp TYPE REF TO zif_ic_composite,
           END OF lt_inner_comp.

    FIELD-SYMBOLS: &lt;lit_childs&gt; TYPE STANDARD TABLE,
                   &lt;lit_inner_childs&gt; TYPE STANDARD TABLE,
                   &lt;lwa_child&gt; TYPE any,
                   &lt;lwa_child2&gt; TYPE any.

    DATA: lo_temp_parent TYPE REF TO zif_ic_composite,
          lo_child TYPE REF TO zif_ic_composite.
    DATA: lit_childs TYPE zif_ic_component=&gt;ty_comp_tab_entries,
          lwa_child TYPE zif_ic_component=&gt;ty_comp_tab_entry.
    DATA: lit_childs2 TYPE zif_ic_component=&gt;ty_comp_tab_entries,
          lwa_child2 TYPE zif_ic_component=&gt;ty_comp_tab_entry.
    DATA: lit_inner_comp TYPE SORTED TABLE OF lt_inner_comp WITH UNIQUE KEY comp_nr,
          lit_inner_comp2 TYPE SORTED TABLE OF lt_inner_comp WITH UNIQUE KEY comp_nr,
          lwa_inner_comp TYPE lt_inner_comp,
          lwa_inner_comp2 TYPE lt_inner_comp.
*   map childs in their specific tree structure
    IF NOT i_it_childs IS BOUND.
      RETURN.
    ENDIF.

    ASSIGN i_it_childs-&gt;* TO &lt;lit_childs&gt;.

    REFRESH lit_inner_comp.

    LOOP AT &lt;lit_childs&gt; ASSIGNING &lt;lwa_child&gt;.
      DATA: l_o_child TYPE REF TO data,
            lo_child_comp TYPE REF TO zif_ic_composite.

      GET REFERENCE OF &lt;lwa_child&gt; INTO l_o_child.

      lo_temp_parent = ch_relation-&gt;get_parent_via_tree( i_wa_child = l_o_child
                                         i_parent_comp = ch_parent_comp
                                         i_ancestor = ch_ancester_comp
                                         i_parent_rel =  i_prev_rel ).

      IF NOT lo_temp_parent IS INITIAL.
        lo_child ?= lo_temp_parent-&gt;get_child_by_key(
                                    i_comp_type = ch_relation-&gt;get_child_type( )
                                    i_object_key = l_o_child ).
      ENDIF.

      IF lo_child IS INITIAL
        OR lo_temp_parent IS INITIAL.
        CONTINUE.
      ENDIF.

*     get parent number of component
      FIELD-SYMBOLS &lt;l_comp_key&gt; TYPE zic_object_nr.
      DATA: l_ref_parent TYPE REF TO data,
            l_key_name TYPE string.

      l_key_name = ch_relation-&gt;get_inner_key( ).

      ASSIGN COMPONENT l_key_name
        OF STRUCTURE &lt;lwa_child&gt; TO &lt;l_comp_key&gt;.

*     add composite to list
      CLEAR lwa_inner_comp.
      lwa_inner_comp-comp_nr = lo_child-&gt;get_object_nr( ).
      lwa_inner_comp-parent_nr = &lt;l_comp_key&gt;.
      lwa_inner_comp-inner_comp = lo_child.

      APPEND lwa_inner_comp TO lit_inner_comp.

      ch_relation-&gt;add_fk( im_ref_object = l_o_child
                           im_object = lo_child ).
    ENDLOOP.


    lit_inner_comp2 = lit_inner_comp .
    lwa_inner_comp2 = lwa_inner_comp.

*   create child table
    LOOP AT lit_inner_comp INTO lwa_inner_comp.
      IF lwa_inner_comp-parent_nr IS NOT INITIAL.
        CLEAR lwa_inner_comp2.

        READ TABLE lit_inner_comp2
               WITH KEY comp_nr = lwa_inner_comp-parent_nr
               INTO lwa_inner_comp2.

        IF sy-subrc = 0.
          lwa_inner_comp2-inner_comp-&gt;add( lwa_inner_comp-inner_comp ).
        ENDIF.
      ENDIF.

*     map all inner parents
      ch_relation-&gt;add_entry_to_table( i_key = lwa_inner_comp-inner_comp-&gt;get_key_struct( )
                                       i_entry = lwa_inner_comp-inner_comp-&gt;tab_entry( ) ).

    ENDLOOP.

    ch_relation-&gt;map_rel_table( ch_relation ).
  ENDMETHOD.                    &quot;map_inner_childs_into_parent
  METHOD get_parent_via_tree.
*    importing i_wa_child type ref to data
*              i_parent_comp type ref to zif_ic_composite
*              i_ancestor TYPE REF TO zif_ic_composite
*              i_parent_rel TYPE REF TO lcl_relation
*    returning value(rt_parent) TYPE REF TO zif_ic_composite,
    DATA: lo_temp_parent TYPE REF TO zif_ic_composite,
          lwa_obj_type TYPE t_obj_type,
          lit_obj_types TYPE t_obj_types,
          l_type_index TYPE i.

    CLEAR l_type_index.

    lo_temp_parent = i_ancestor.

    lcl_relation=&gt;get_type_tree(
                    EXPORTING i_comp = i_parent_comp
                    IMPORTING rt_type_tree = lit_obj_types ).

*   Select branch of type tree
    READ TABLE lit_obj_types INTO lwa_obj_type WITH KEY obj_type = lo_temp_parent-&gt;get_type( ).

    IF sy-subrc = 0.
      l_type_index = lwa_obj_type-ranking.
    ELSE.
      l_type_index = 0.
    ENDIF.

    SORT lit_obj_types BY ranking.

    WHILE l_type_index &gt; 1.
      DATA: lo_child TYPE REF TO zif_ic_component.

      l_type_index =  l_type_index - 1.
      READ TABLE lit_obj_types INTO lwa_obj_type WITH KEY ranking = l_type_index BINARY SEARCH.

      IF sy-subrc = 0.
        DATA: l_has_inner_rel TYPE abap_bool,
              l_relations TYPE t_relations,
              l_relation TYPE t_relation.

        lcl_inner_relation=&gt;has_inner_relation( EXPORTING i_obj_type = lwa_obj_type-obj_type
                                                IMPORTING e_has_inner_rel = l_has_inner_rel
                                                          e_relations =  l_relations ).

        IF  l_has_inner_rel = abap_false
          OR  l_type_index = 1.  &quot;inner rrelation as i_wa_child not in lit_obj_types

          lo_child = lo_temp_parent-&gt;get_child_by_key( i_comp_type = lwa_obj_type-obj_type
                                            i_object_key = i_wa_child ).
        ENDIF.

        IF  l_has_inner_rel = abap_true &quot;is inner relation and inner relation is not child
           AND lo_child IS INITIAL.
          LOOP AT l_relations INTO l_relation.
            DATA l_obj_nr TYPE zic_object_nr.

            IF l_relation-&gt;get_child_type( ) = lwa_obj_type-obj_type.
              l_obj_nr = lwa_obj_type-key_value.
              lo_child = lo_temp_parent-&gt;get_child( i_comp_type = lwa_obj_type-obj_type
                                                    i_object_nr = l_obj_nr ).
            ENDIF.

          ENDLOOP.

        ENDIF.
        &quot;TODO ERROR IF child is initial
        IF lo_child-&gt;is_parent( ) = abap_true.
          lo_temp_parent ?= lo_child.
        ELSE.
          l_type_index = 0.
        ENDIF.
      ELSE.
        l_type_index = 0.
      ENDIF.

      FREE lo_child.
    ENDWHILE.

    rt_parent = lo_temp_parent.
  ENDMETHOD.                    &quot;get_parent_via_tree
ENDCLASS.                    &quot;lcl_Inner_relation IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_Linked_relation
*----------------------------------------------------------------------*
* lcl_linked_relation
*----------------------------------------------------------------------*
CLASS lcl_linked_relation IMPLEMENTATION.

  METHOD map_linked_childs_into_parent.
*      IMPORTING i_it_childs TYPE REF TO data
*                i_link_table TYPE table
*                i_prev_rel TYPE REF TO lcl_relation
*      CHANGING  ch_ancester_comp TYPE REF TO zif_ic_composite
*                ch_parent_comp TYPE REF TO zif_ic_composite
*                ch_relation  TYPE REF TO lcl_relation.

    FIELD-SYMBOLS: &lt;lit_childs&gt; TYPE STANDARD TABLE,
                   &lt;lwa_child&gt; TYPE any.

    DATA: lo_temp_parent TYPE REF TO zif_ic_composite.

*   map childs in their specific tree structure
    IF NOT i_it_childs IS BOUND.
      RETURN.
    ENDIF.

    ASSIGN i_it_childs-&gt;* TO &lt;lit_childs&gt;.

    LOOP AT &lt;lit_childs&gt; ASSIGNING &lt;lwa_child&gt;.
      FIELD-SYMBOLS: &lt;l_key_value&gt; TYPE any,
               &lt;lwa_link&gt;  TYPE any.

      DATA: l_o_child TYPE REF TO data,
            lo_child_fk TYPE zif_ic_component=&gt;ty_component.

      DATA: l_key_name TYPE abap_keyname  ,
             l_linkkey_name TYPE abap_keyname.
*     create child object
      ch_parent_comp-&gt;zif_ic_component~create_child(
                       EXPORTING i_parent = ch_parent_comp
                                  i_type = ch_relation-&gt;get_child_type( )
                        IMPORTING ex_instance = lo_child_fk ).

      GET REFERENCE OF &lt;lwa_child&gt; INTO l_o_child.
      lo_child_fk-&gt;fill_by_struct( l_o_child ).


      l_linkkey_name = ch_relation-&gt;get_link_key_field( ).
      l_key_name = ch_relation-&gt;get_link_key_map( ).

      ASSIGN COMPONENT l_key_name OF STRUCTURE &lt;lwa_child&gt; TO &lt;l_key_value&gt;.

      READ TABLE i_link_table WITH KEY (l_linkkey_name) = &lt;l_key_value&gt; ASSIGNING &lt;lwa_link&gt;.

      DATA lref_lwa_link TYPE REF TO data.

      GET REFERENCE OF &lt;lwa_link&gt; INTO lref_lwa_link.

      lo_temp_parent = ch_relation-&gt;get_parent_via_tree( i_wa_child = lref_lwa_link
                                         i_parent_comp = ch_parent_comp
                                         i_ancestor = ch_ancester_comp
                                         i_parent_rel = i_prev_rel ).

      IF lo_temp_parent IS INITIAL.
        RETURN.
        &quot;TODO weg 01/2016
        &quot;may be delete ZCL_IC_INJ_OBJECT-&gt;load_ctx
        &quot;and change something here
        break bcuser.
      ENDIF.

      lo_temp_parent-&gt;add( lo_child_fk ).
      ch_relation-&gt;add_entry_to_table( i_key = lo_child_fk-&gt;get_key_struct( )
                                     i_entry = lo_child_fk-&gt;tab_entry( ) ).

      ch_relation-&gt;add_fk( im_ref_object = l_o_child
                           im_object = lo_child_fk ).

    ENDLOOP.

    ch_relation-&gt;map_rel_table( ch_relation ).

  ENDMETHOD.                    &quot;map_linked_childs_into_parent

  METHOD calc_min_key.
*     IMPORTING i_root_comp TYPE REF TO zif_ic_composite
*               i_parent_comp TYPE REF TO zif_ic_composite
*     EXPORTING ex_ancester_comp TYPE REF TO zif_ic_composite
*               ex_min_object_key TYPE REF TO data,

*   determine the minimum common key
*   until the root component is reached
    DATA: l_search_flag TYPE abap_bool VALUE abap_true,
          l_has_key TYPE abap_bool,
          l_o_parent_temp TYPE REF TO zif_ic_composite,
          l_wa_temp_key TYPE REF TO data.

    l_o_parent_temp = i_parent_comp-&gt;get_parent( ).

    IF l_o_parent_temp IS INITIAL.
      ex_ancester_comp = i_parent_comp.
      RETURN.
    ENDIF.

    &quot;TODO super maken hierna is dezelfde code

    l_wa_temp_key = zcl_ic_object=&gt;instance( i_obj_type = m_parent_type i_parent = l_o_parent_temp )-&gt;zif_ic_meta_info~get_key_struct( ).
    l_o_parent_temp = i_parent_comp.

    WHILE l_search_flag = abap_true.
*     compare keys
      l_has_key = has_common_key( i_parent = l_o_parent_temp-&gt;get_key_struct( )
                                  i_child = l_wa_temp_key ).

*     set temp structure or temp minimal key + assign return key
      IF l_has_key = abap_true.
        l_wa_temp_key = l_o_parent_temp-&gt;get_key_struct( ).
        ex_min_object_key = l_wa_temp_key.
      ENDIF.

*     condition
      IF l_wa_temp_key IS INITIAL
         OR l_o_parent_temp-&gt;get_type( ) = i_root_comp-&gt;get_type( )
        OR l_o_parent_temp-&gt;get_parent( ) IS INITIAL.

        l_search_flag = abap_false.
      ELSE.
*       go on with parent of parent
        l_o_parent_temp = l_o_parent_temp-&gt;get_parent( ).
      ENDIF.
    ENDWHILE.

    ex_ancester_comp =  l_o_parent_temp.
  ENDMETHOD.                    &quot;calc_min_key
ENDCLASS.                    &quot;lcl_linked_relation IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_foreignkey_relation IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_foreignkey_relation IMPLEMENTATION.
  METHOD class_constructor.
    SELECT * FROM zic_or_fk_map INTO TABLE m_mapping_fk.
  ENDMETHOD.                    &quot;CLASS_CONSTRUCTOR
  METHOD get_mapping_fk_table.
*     importing im_key_name type zic_or_key_map_name
*     exporting ex_map_fk_tab TYPE t_mapping_fk_tab.
    DATA lwa_mapping_fk TYPE zic_or_fk_map.

    REFRESH ex_map_fk_tab.

    LOOP AT m_mapping_fk INTO lwa_mapping_fk WHERE key_name = im_key_name.
      APPEND lwa_mapping_fk TO ex_map_fk_tab.
    ENDLOOP.

  ENDMETHOD.                    &quot;get_mapping_table

ENDCLASS.                    &quot;lcl_foreignkey_relation IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_link_object IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_link_object IMPLEMENTATION.
  METHOD constructor.
    m_parent = i_parent.
    m_child = i_child.
    m_relation = i_rel.
  ENDMETHOD.                    &quot;constructor

  METHOD create.
*   IMPORTING i_parent TYPE REF TO zif_ic_meta_info
*             i_child TYPE REF TO zif_ic_meta_info OPTIONAL
*             i_rel type ref to lcl_relation.
*   RETURNING VALUE(RT_LINK_OBJ) TYPE REF TO ZIF_IC_META_INFO
    DATA lo_link_obj TYPE REF TO lcl_link_object.

    CREATE OBJECT lo_link_obj
      EXPORTING
        i_parent = i_parent
        i_child  = i_child
        i_rel    = i_rel.

    rt_link_obj = lo_link_obj.
  ENDMETHOD.                    &quot;create
  METHOD zif_ic_meta_info~get_obj_struct.
*    RETURNING
*      value(rt_obj_struct) TYPE REF TO data .

    FIELD-SYMBOLS: &lt;lwa_link_obj&gt; TYPE any,
                  &lt;struc_parent&gt; TYPE any,
                  &lt;struc_child&gt; TYPE any.

    DATA: struc_parent TYPE REF TO data,
          struc_child TYPE REF TO data,
          l_table_name TYPE tablename,
          lwa_field_change TYPE zcl_ic_utils=&gt;ty_field_change,
          lit_field_changes TYPE zcl_ic_utils=&gt;ty_field_change_tab.

*   create corresponding type
    l_table_name = m_relation-&gt;get_link_table( ).
    CREATE DATA rt_obj_struct TYPE (l_table_name).
    ASSIGN rt_obj_struct-&gt;*  TO &lt;lwa_link_obj&gt;.

*   assign child and parent structure
    struc_parent = m_parent-&gt;get_obj_struct( ).
    struc_child = m_child-&gt;get_obj_struct( ).

    ASSIGN struc_parent-&gt;* TO &lt;struc_parent&gt;.
    ASSIGN struc_child-&gt;* TO &lt;struc_child&gt;.

*   fill fields
    MOVE-CORRESPONDING &lt;struc_parent&gt; TO &lt;lwa_link_obj&gt;.
    MOVE-CORRESPONDING &lt;struc_child&gt; TO &lt;lwa_link_obj&gt;.

*   Add type field
    FIELD-SYMBOLS: &lt;l_type_field&gt; TYPE any.
    DATA l_type_field TYPE fieldname.

    l_type_field = m_relation-&gt;get_link_type_field( ).
    ASSIGN COMPONENT l_type_field OF STRUCTURE &lt;lwa_link_obj&gt; TO &lt;l_type_field&gt;.
    &lt;l_type_field&gt; = m_relation-&gt;get_child_type( ).

*   fill field name changes
    REFRESH lit_field_changes.
    CLEAR lwa_field_change.

    lwa_field_change-source_field = m_relation-&gt;get_link_key_map( ).
    lwa_field_change-new_field =  m_relation-&gt;get_link_key_field( ).

    APPEND lwa_field_change TO lit_field_changes.

    zcl_ic_utils=&gt;transform_structure(
                    EXPORTING
                      i_struct_from = struc_child
                      i_field_changes = lit_field_changes
                    CHANGING
                      ch_struct = rt_obj_struct
                 ).

  ENDMETHOD.                    &quot;zif_ic_meta_info~get_obj_struct
  METHOD zif_ic_meta_info~fill_by_struct.
*   METHOD not implemented, functionality not used in LCL_LINK_OBJECT-zif_ic_meta_info~fill_by_struct !!!
    ASSERT 1 = 2.
  ENDMETHOD.                    &quot;zif_ic_meta_info~fill_by_struct
  METHOD zif_ic_meta_info~get_relations.
*    EXPORTING
*      !ex_relations TYPE ty_relations .
    REFRESH ex_relations.
  ENDMETHOD.                    &quot;zif_ic_meta_info~get_relations
  METHOD zif_ic_meta_info~get_table_name.
*    RETURNING
*      value(rt_table_name) TYPE tabname16 .
    rt_table_name = m_relation-&gt;get_link_table( ).
  ENDMETHOD.                    &quot;zif_ic_meta_info~get_table_name
  METHOD zif_ic_meta_info~get_key_struct.
*    RETURNING
*      value(rt_comp_key_struct) TYPE REF TO data .
    DATA: lwa_field_change TYPE zcl_ic_utils=&gt;ty_field_change,
          lit_field_changes TYPE zcl_ic_utils=&gt;ty_field_change_tab,
          temp_struct TYPE REF TO data.

*    Add two key structures into one
    REFRESH lit_field_changes.
    CLEAR lwa_field_change.

    lwa_field_change-source_field = m_relation-&gt;get_link_key_map( ).
    lwa_field_change-new_field =  m_relation-&gt;get_link_key_field( ).

    APPEND lwa_field_change TO lit_field_changes.

    temp_struct = zcl_ic_utils=&gt;merge_structure(
                                   i_struct_a = m_parent-&gt;get_key_struct( )
                                   i_struct_b = m_child-&gt;get_key_struct( ) ).

    rt_comp_key_struct = zcl_ic_utils=&gt;change_struct_names(
                i_field_changes = lit_field_changes
                i_struct = temp_struct ).

  ENDMETHOD.                    &quot;zif_ic_meta_info~get_key_struct

ENDCLASS.                    &quot;lcl_link_object IMPLEMENTATION</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_PERSIST" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="ADD" VERSION="1" LANGU="E" DESCRIPT="Update IC object" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="ADD" SCONAME="CH_IC_COMP" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <source>METHOD add.
  FIELD-SYMBOLS &lt;lwa_ic_struc&gt; TYPE any.
  DATA: l_ref_outtab TYPE REF TO data,
        l_tab_name TYPE tabname,
        l_identity TYPE string.

  l_ref_outtab = ch_ic_comp-&gt;get_key_struct( ).
  l_tab_name = ch_ic_comp-&gt;get_table_name( ).

  ASSIGN l_ref_outtab-&gt;* TO &lt;lwa_ic_struc&gt;.

* get identity key
  l_identity = lcl_relation=&gt;get_identity( ch_ic_comp-&gt;get_table_name( ) ).

  IF l_identity IS NOT INITIAL.
    DATA: l_new_key TYPE zic_object_nr,
          l_obj_nr  TYPE zic_object_nr.

    CONCATENATE &apos;MAX(&apos;  l_identity &apos;)&apos; INTO l_identity SEPARATED BY space.

    SELECT SINGLE (l_identity) INTO l_new_key FROM (l_tab_name).

    l_obj_nr = l_new_key + 1.
    ch_ic_comp-&gt;set_object_nr( l_obj_nr ).
  ENDIF.

  save( ch_ic_comp ).

* save link
  IF ch_ic_comp-&gt;get_parent( ) IS BOUND.
    save_link( i_ic_child_comp = ch_ic_comp
               i_rel_type = lcl_relation=&gt;c_link_rel ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="DELETE" VERSION="1" LANGU="E" DESCRIPT="Delete IC object" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETE.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_FOR_ALL_ENTRIES" VERSION="1" LANGU="E" DESCRIPT="Create for all entries from conditions tab" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_FOR_ALL_ENTRIES" SCONAME="I_CONDITION_STRUC" VERSION="1" LANGU="E" DESCRIPT="Table with where condition" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_FOR_ALL_ENTRIES" SCONAME="I_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="For all entries table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_FOR_ALL_ENTRIES" SCONAME="E_ALL_ENTRIES_WHERE" VERSION="1" LANGU="E" DESCRIPT="Text for where clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD make_for_all_entries.
  CONSTANTS: lc_entries_tab TYPE tabname VALUE &apos;I_KEY_TAB&apos;,
             lc_equals TYPE c VALUE &apos;=&apos;,
             lc_tilde TYPE char1 VALUE &apos;~&apos;,
             lc_minus TYPE char1 VALUE &apos;-&apos;,
             lc_and TYPE  char3 VALUE &apos;AND&apos;.

  FIELD-SYMBOLS: &lt;comp_descr&gt; LIKE LINE OF cl_abap_structdescr=&gt;components.

  DATA: lo_struc_type TYPE REF TO cl_abap_structdescr,
        l_first_flag TYPE flag VALUE abap_true.

  IF i_key_tab IS INITIAL.
    RETURN.
  ENDIF.

  TRY.
      lo_struc_type ?= cl_abap_structdescr=&gt;describe_by_data_ref( i_condition_struc ).
    CATCH cx_sy_move_cast_error.
      RETURN.
  ENDTRY.

* create text all entries
  CLEAR e_all_entries_where.

  LOOP AT lo_struc_type-&gt;components ASSIGNING &lt;comp_descr&gt;.
    IF l_first_flag = abap_false.
      CONCATENATE e_all_entries_WHERE lc_and into e_all_entries_where separated by space .
    ENDIF.

    CONCATENATE e_all_entries_where &lt;comp_descr&gt;-name lc_equals lc_entries_tab
                              INTO e_all_entries_where SEPARATED BY space .

    CONCATENATE e_all_entries_where lc_minus &lt;comp_descr&gt;-name INTO e_all_entries_where.

    l_first_flag = abap_false.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_SELECT_FROM_STRUC" VERSION="1" LANGU="E" DESCRIPT="Create select clause from structure" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_SELECT_FROM_STRUC" SCONAME="I_STRUCTURE" VERSION="1" LANGU="E" DESCRIPT="Structure for Select creation" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_SELECT_FROM_STRUC" SCONAME="I_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Table Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABNAME"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_SELECT_FROM_STRUC" SCONAME="E_SELECT_TAB" VERSION="1" LANGU="E" DESCRIPT="Select clause values" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TABLE"/>
   <source>method MAKE_SELECT_FROM_STRUC.
   CONSTANTS: lc_equals TYPE c VALUE &apos;=&apos;,
             lc_like(4) TYPE c VALUE &apos;LIKE&apos;,
             lc_tilde type char1 value &apos;~&apos;,
             lc_char_type TYPE abap_typekind VALUE &apos;C&apos;,
             lc_and(3) TYPE c VALUE &apos;AND&apos;,
             c_quote TYPE c VALUE &apos;&apos;&apos;&apos;.

  FIELD-SYMBOLS: &lt;comp_descr&gt; LIKE LINE OF cl_abap_structdescr=&gt;components,
                 &lt;i_struc&gt; TYPE any.

  DATA: lo_struc_type TYPE REF TO cl_abap_structdescr,
        l_sublist type edpline.

  CLEAR e_select_tab.

  TRY.
      lo_struc_type ?= cl_abap_structdescr=&gt;describe_by_data_ref( i_structure ).
    CATCH cx_sy_move_cast_error.
      RETURN.
  ENDTRY.

  LOOP AT lo_struc_type-&gt;components ASSIGNING &lt;comp_descr&gt;.

      l_sublist = i_table_name &amp;&amp; lc_tilde &amp;&amp; &lt;comp_descr&gt;-name.
      APPEND l_sublist TO e_select_tab.
  ENDLOOP.


endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_WHERE_FROM_STRUC" VERSION="1" LANGU="E" DESCRIPT="Create where clause from structure" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_WHERE_FROM_STRUC" SCONAME="I_STRUCTURE" VERSION="1" LANGU="E" DESCRIPT="Structure with data for clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_WHERE_FROM_STRUC" SCONAME="I_LIKE" VERSION="1" LANGU="E" DESCRIPT="Link field for view query" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="MAKE_WHERE_FROM_STRUC" SCONAME="R_WHERE_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="Constructed where clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD make_where_from_struc.
  CONSTANTS: lc_equals TYPE c VALUE &apos;=&apos;,
             lc_like(4) TYPE c VALUE &apos;LIKE&apos;,
             lc_char_type TYPE abap_typekind VALUE &apos;C&apos;,
             lc_and(3) TYPE c VALUE &apos;AND&apos;,
             c_quote TYPE c VALUE &apos;&apos;&apos;&apos;.

  FIELD-SYMBOLS: &lt;comp_descr&gt; LIKE LINE OF cl_abap_structdescr=&gt;components,
                 &lt;l_comp&gt; TYPE any,
                 &lt;i_struc&gt; TYPE any.

  DATA: lo_struc_type TYPE REF TO cl_abap_structdescr,
        l_and(3) TYPE c,
        l_where_value TYPE string,
        l_compare TYPE char4.

  IF i_structure IS INITIAL.
    RETURN.
  ENDIF.

  CLEAR r_where_clause.
  CLEAR l_and.

  ASSIGN i_structure-&gt;* TO &lt;i_struc&gt;.

  TRY.
      lo_struc_type ?= cl_abap_structdescr=&gt;describe_by_data_ref( i_structure ).
    CATCH cx_sy_move_cast_error.
      RETURN.
  ENDTRY.

  LOOP AT lo_struc_type-&gt;components ASSIGNING &lt;comp_descr&gt;.

    ASSIGN COMPONENT &lt;comp_descr&gt;-name
        OF STRUCTURE &lt;i_struc&gt; TO &lt;l_comp&gt;.

    IF &lt;l_comp&gt; IS NOT INITIAL.
      CONCATENATE c_quote &lt;l_comp&gt; c_quote INTO l_where_value.

*     Compare value
      IF i_like = abap_true AND &lt;comp_descr&gt;-type_kind = lc_char_type .
        l_compare = lc_like.
      ELSE.
        l_compare = lc_equals.
      ENDIF.
*     build where clause
      CONCATENATE r_where_clause
                  l_and
                  &lt;comp_descr&gt;-name
                  l_compare
                  l_where_value
            INTO r_where_clause
            SEPARATED BY space.

      l_and = lc_and.

    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="SAVE" VERSION="1" LANGU="E" DESCRIPT="Update IC object" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SAVE" SCONAME="I_IC_COMP" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_META_INFO"/>
   <source>METHOD SAVE.
  FIELD-SYMBOLS &lt;lwa_ic_struc&gt; TYPE any.
  DATA: l_ref_outtab TYPE REF TO data,
        l_tab_name TYPE tabname.

  l_ref_outtab = i_ic_comp-&gt;get_obj_struct( ).
  l_tab_name = i_ic_comp-&gt;get_table_name( ).

  ASSIGN l_ref_outtab-&gt;* TO &lt;lwa_ic_struc&gt;.
  MODIFY (l_tab_name) FROM &lt;lwa_ic_struc&gt;.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="SAVE_CHILD" VERSION="1" LANGU="E" DESCRIPT="Save child + link to parent" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SAVE_CHILD" SCONAME="I_IC_CHILD_COMP" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SAVE_CHILD" SCONAME="I_IC_PARENT_COMPS" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE" PAROPTIONL="X"/>
   <source>METHOD save_child.
  DATA: l_comps TYPE REF TO zif_ic_composite.

  IF i_ic_parent_comps IS INITIAL.
    l_comps = i_ic_child_comp-&gt;get_parent( ).
  ELSE.
    l_comps = i_ic_parent_comps.
    l_comps-&gt;add( i_ic_child_comp ).
  ENDIF.

  save( i_ic_child_comp ).

  save_link( i_ic_child_comp = i_ic_child_comp
             i_rel_type = lcl_relation=&gt;c_link_rel ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="SAVE_LINK" VERSION="1" LANGU="E" DESCRIPT="Saves the link of a child" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SAVE_LINK" SCONAME="I_IC_CHILD_COMP" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SAVE_LINK" SCONAME="I_REL_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC  Relation Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_REL_TYPE"/>
   <source>METHOD save_link.
  DATA: lo_link_obj TYPE REF TO zif_ic_meta_info,
        lo_rels     TYPE lcl_relation=&gt;t_relations,
        lo_rel      TYPE lcl_relation=&gt;t_relation.

  lo_rels = lcl_relation=&gt;create( i_obj_type = i_ic_child_comp-&gt;get_parent( )-&gt;get_type( ) ).

  LOOP AT lo_rels INTO lo_rel.

    IF lo_rel-&gt;get_type( ) = i_rel_type
      AND lo_rel-&gt;get_child_type( ) = i_ic_child_comp-&gt;get_type( ).

      IF i_rel_type = lcl_relation=&gt;c_link_rel.
        lo_link_obj = lcl_link_object=&gt;create( i_child = i_ic_child_comp
                                               i_parent = i_ic_child_comp-&gt;get_parent( )
                                               i_rel = lo_rel ).
      ENDIF.

      save( lo_link_obj ).
    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT" VERSION="1" LANGU="E" DESCRIPT="Select IC object" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT" SCONAME="I_IC_COMP" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_META_INFO"/>
   <source>METHOD select.

  FIELD-SYMBOLS: &lt;lwa_table_line&gt; TYPE any.
  DATA: lwa_object TYPE REF TO data,
        lwa_object_key TYPE REF TO data,
        l_tab_name TYPE tablename,
        l_where TYPE string.

  l_tab_name = i_ic_comp-&gt;get_table_name( ).
  lwa_object = i_ic_comp-&gt;get_obj_struct( ).
  lwa_object_key = i_ic_comp-&gt;get_key_struct( ).

  ASSIGN lwa_object-&gt;* TO &lt;lwa_table_line&gt;.

  l_where = make_where_from_struc( lwa_object_key ).

  SELECT SINGLE *
         FROM (l_tab_name)
         INTO &lt;lwa_table_line&gt;
         WHERE (l_where).

  IF sy-subrc = 0.
    i_ic_comp-&gt;fill_by_struct( lwa_object ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_CHILDS" VERSION="1" LANGU="E" DESCRIPT="Select all childs" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_CHILDS" SCONAME="I_OBJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Child object type to select" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_CHILDS" SCONAME="CH_PARENT_COMP" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE"/>
   <source>METHOD select_childs.
  DATA: lit_rel TYPE lcl_relation=&gt;t_relations,
        lo_rel TYPE lcl_relation=&gt;t_relation.

  lit_rel = lcl_relation=&gt;create( i_obj_type = ch_parent_comp-&gt;get_type( ) ).

  LOOP AT lit_rel INTO lo_rel.

    IF lo_rel-&gt;get_child_type( ) = i_obj_type
      OR i_obj_type = space.

*    map childs via relation into objects
      lcl_relation_util=&gt;map_childs_via_relation(
                  EXPORTING i_root_comp =  ch_parent_comp
                  CHANGING  ch_parent_comp = ch_parent_comp
                            ch_relation = lo_rel ).
    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_PATH" VERSION="1" LANGU="E" DESCRIPT="Select objects via path" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_PATH" SCONAME="I_COMP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_PATH" SCONAME="I_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_PATH"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_PATH" SCONAME="RT_PARENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <source>METHOD select_path.
  DATA: lo_compn TYPE REF TO zif_ic_component,
        lo_comps TYPE REF TO zif_ic_composite,
        lo_parent_root TYPE REF TO zif_ic_composite,
        lit_split TYPE TABLE OF string,
        l_path TYPE string,
        l_split TYPE char30,
        l_previous_split TYPE char30,
        l_name TYPE char30,
        l_comp_type TYPE zic_obj_type.

  l_path = i_path.

  IF l_path IS INITIAL.
    RETURN.
  ENDIF.

  TRANSLATE l_path TO UPPER CASE.

  SPLIT l_path AT zif_ic_composite=&gt;c_path_token INTO TABLE lit_split.

  READ TABLE lit_split INDEX 1 INTO l_split.

  IF l_split IS INITIAL.
    DELETE lit_split INDEX 1.
  ENDIF.

  l_comp_type = i_comp_type.

  WHILE lit_split IS NOT INITIAL.
    DATA: lo_rels TYPE lcl_relation=&gt;t_relations,
          lo_rels_prev TYPE lcl_relation=&gt;t_relations,
          lo_rel TYPE REF TO lcl_relation.

    lo_rels_prev = lo_rels.
    lo_rels = lcl_relation=&gt;create( i_obj_type = l_comp_type ).

    LOOP AT lo_rels INTO lo_rel.
      DATA: lo_obj TYPE REF TO object,
            lref_result_tab TYPE REF TO data,
            l_obj_name TYPE zic_name.

      CLEAR lref_result_tab.

      IF rt_parent IS INITIAL.
        FIELD-SYMBOLS: &lt;lit_table&gt; TYPE STANDARD TABLE,
                       &lt;lwa_entry&gt; TYPE any.
        DATA lref_result_entry TYPE REF TO data.

        READ TABLE lit_split INDEX 1 INTO l_split.

        IF l_split IS NOT INITIAL.
          l_obj_name = l_split.
        ENDIF.

        lo_rel-&gt;create_parent_object( EXPORTING i_parent = lo_comps
                                      CHANGING ch_object = lo_obj ).

        lo_compn ?= lo_obj.

        IF lo_compn IS NOT INITIAL.
          l_obj_name = l_split.
          lo_compn-&gt;set_name( l_obj_name ).
        ENDIF.

        lref_result_tab = select_table(  i_ic_obj_ref = lo_compn
                                         i_result_struc = lo_compn-&gt;get_obj_struct( )
                                         i_condition_struc = lo_compn-&gt;get_obj_struct( ) ).

        ASSIGN lref_result_tab-&gt;* TO &lt;lit_table&gt;.

        READ TABLE &lt;lit_table&gt; INDEX 1 ASSIGNING &lt;lwa_entry&gt;.
        GET REFERENCE OF &lt;lwa_entry&gt; INTO lref_result_entry.

        lo_compn-&gt;fill_by_struct( lref_result_entry ).

        rt_parent = lo_compn.

        IF lo_compn IS NOT INITIAL
            AND lo_compn-&gt;is_parent( ) = abap_true.

          lo_comps ?= lo_compn.
          lo_parent_root = lo_comps.
        ENDIF.

      ENDIF.

      IF lo_comps IS NOT INITIAL.
        DATA: lo_temp_rels TYPE lcl_relation=&gt;t_relations,
              lo_temp_rel TYPE  REF TO lcl_relation,
              lo_compn_temp TYPE REF TO zif_ic_component,
              lo_comps_temp TYPE REF TO zif_ic_composite,
              l_rel_type TYPE zic_rel_type,
              l_all_flag TYPE flag.

*       only when no inner relation
        l_all_flag = abap_false.

*       if child has inner relation then select all sub obj&apos;s
        lo_temp_rels = lcl_relation=&gt;create( lo_rel-&gt;get_child_type( ) ).

        LOOP AT lo_temp_rels INTO lo_temp_rel.
          IF lo_temp_rel-&gt;get_type( ) = lcl_relation=&gt;c_inner_rel.
*             OR  lo_rel-&gt;get_type( ) = lcl_relation=&gt;c_link_rel.
*           TODO, make this work for this two relations also
*           don&apos;t select all always
            l_all_flag = abap_true.
            EXIT.
          ENDIF.
        ENDLOOP.
*TODO 1 methode maken liefst met overerving !!!!!!!!
*       if child has inner relation then select all sub obj&apos;s
        lo_temp_rels = lcl_relation=&gt;create( lo_rel-&gt;get_parent_type( ) ).

        LOOP AT lo_temp_rels INTO lo_temp_rel.
          IF lo_temp_rel-&gt;get_type( ) = lcl_relation=&gt;c_inner_rel.
*             OR  lo_rel-&gt;get_type( ) = lcl_relation=&gt;c_link_rel.
*           TODO, make this work for this two relations also
*           don&apos;t select all always
            l_all_flag = abap_true.
            EXIT.
          ENDIF.
        ENDLOOP.

        IF l_all_flag = abap_true.
          lcl_relation_util=&gt;map_childs_via_relation(
                      EXPORTING i_root_comp = lo_parent_root
                      CHANGING  ch_parent_comp = lo_comps
                                ch_relation  = lo_rel ).
        ELSE.
*         set name condition to select on
          lo_rel-&gt;create_child_object( EXPORTING i_parent = lo_comps
                                       CHANGING ch_object = lo_obj ).
          lo_compn ?= lo_obj.

          lo_compn-&gt;set_name( i_name = l_obj_name ).
*         map childs for relation
          lcl_relation_util=&gt;map_childs_via_relation(
                                EXPORTING i_root_comp = lo_parent_root
                                          i_ref_condition = lo_compn-&gt;get_obj_struct( )
                                CHANGING  ch_parent_comp = lo_comps
                                          ch_relation  = lo_rel ).

        ENDIF.

      ENDIF.

      FREE lo_obj.
      FREE lo_compn.
    ENDLOOP.

*TODO apparte methode met eventueel regressieve functie
    DATA: lo_compn_tmp TYPE REF TO zif_ic_component,
          l_while_flag TYPE abap_bool.

    l_while_flag =  abap_true.

    READ TABLE lit_split INDEX 1 INTO l_split.

    IF lo_comps-&gt;get_name( ) = l_split.
      DELETE lit_split INDEX 1.
    ENDIF.

    WHILE l_split IS NOT INITIAL
        AND l_while_flag = abap_true.

      CLEAR l_split.
      READ TABLE lit_split INDEX 1 INTO l_split.

      lo_compn_tmp = lo_comps-&gt;get_child_by_name( i_path_name = l_split ).

      IF lo_compn_tmp IS NOT INITIAL.
        IF lo_compn_tmp-&gt;is_parent( ) = abap_true.
          lo_comps ?= lo_compn_tmp.
          l_comp_type = lo_comps-&gt;get_type( ).

          CLEAR l_previous_split.
          DELETE lit_split INDEX 1.
        ELSE.
          REFRESH lit_split.
        ENDIF.
      ELSE.
        IF l_previous_split &lt;&gt; l_split.
          l_previous_split = l_split.
          l_while_flag = abap_false.
        ELSE.
          REFRESH lit_split.
        ENDIF.
      ENDIF.

    ENDWHILE.

  ENDWHILE.

  rt_parent = lo_comps.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TABLE" VERSION="1" LANGU="E" DESCRIPT="Select IC object" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TABLE" SCONAME="I_IC_OBJ_REF" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_META_INFO"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TABLE" SCONAME="I_RESULT_STRUC" VERSION="1" LANGU="E" DESCRIPT="Selection structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TABLE" SCONAME="I_IS_FK" VERSION="1" LANGU="E" DESCRIPT="Is foreign key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TABLE" SCONAME="I_LINK_TABNAME" VERSION="1" LANGU="E" DESCRIPT="Link table name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABNAME" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TABLE" SCONAME="I_CONDITION_STRUC" VERSION="1" LANGU="E" DESCRIPT="Condition for search" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TABLE" SCONAME="I_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Key table" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TABLE" SCONAME="RE_TABLE_RESULT" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD select_table.
  CONSTANTS: lc_sql_and TYPE char3 VALUE &apos;AND&apos;.
  FIELD-SYMBOLS: &lt;lit_table&gt; TYPE STANDARD TABLE.
*TODO devide in two methods one for all entries + one for normal where
  DATA: l_tab_name TYPE tabname,
        lit_select TYPE TABLE OF edpline,
        l_where TYPE string,
        l_all_entries_where TYPE string,
        lo_struct_type   TYPE REF TO cl_abap_structdescr,
        lo_table_type    TYPE REF TO cl_abap_tabledescr.

  lo_struct_type ?= cl_abap_structdescr=&gt;describe_by_data_ref( i_result_struc ).
  lo_table_type = cl_abap_tabledescr=&gt;create( lo_struct_type ).

  CREATE DATA re_table_result TYPE HANDLE lo_table_type.
  ASSIGN re_table_result-&gt;* TO &lt;lit_table&gt;.

  l_tab_name = i_ic_obj_ref-&gt;get_table_name( ).

  make_select_from_struc( EXPORTING i_structure = i_result_struc
                                    i_table_name = l_tab_name
                          IMPORTING e_select_tab = lit_select ).

  IF i_condition_struc IS NOT INITIAL
    AND i_is_fk = abap_false.

    l_where = make_where_from_struc( i_structure = i_condition_struc
                                      i_like = abap_true ).
  ENDIF.

  IF i_is_fk = abap_true.

    make_for_all_entries( EXPORTING I_CONDITION_struc = i_condition_struc
                                    i_key_tab = i_key_tab
                          IMPORTING e_all_entries_where = l_all_entries_where ).
  ENDIF.

  IF l_all_entries_where IS NOT INITIAL.

    IF l_where IS NOT INITIAL.
      l_where = l_where &amp;&amp;  space &amp;&amp; lc_sql_and.
    ENDIF.

    l_where = l_where &amp;&amp; space &amp;&amp; l_all_entries_where.

  ENDIF.

* us one of these SELECT clauses
  IF l_all_entries_where IS INITIAL.

    SELECT (lit_select)
           INTO TABLE &lt;lit_table&gt;
           FROM (l_tab_name)
           WHERE (l_where).
  ELSE.

    SELECT (lit_select)
          INTO TABLE &lt;lit_table&gt;
          FROM (l_tab_name)
          FOR ALL ENTRIES IN i_key_tab
          WHERE (l_where).
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TO_ROOT_TODO" VERSION="1" LANGU="E" DESCRIPT="Select IC object until root parent." EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TO_ROOT_TODO" SCONAME="CH_COMPN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <source>METHOD SELECT_TO_ROOT_TODO.
  DATA: lit_rel TYPE lcl_relation=&gt;t_relations,
      lo_rel TYPE lcl_relation=&gt;t_relation,
      l_par_type TYPE zic_obj_type.

  IF ch_compn IS INITIAL.
    RETURN.
  ENDIF.
  break bcuser.
  lit_rel = lcl_relation=&gt;create( i_obj_type = ch_compn-&gt;get_type( ) ).


  LOOP AT lit_rel INTO lo_rel.
    DATA: lo_par_rels TYPE lcl_relation=&gt;t_relations,
          lo_par_rel TYPE REF TO lcl_relation,
          lo_parent TYPE zif_ic_composite=&gt;ty_component,
          lo_object TYPE REF TO object.

    lo_par_rels = lo_rel-&gt;get_parent_rels( ).

    LOOP AT lo_par_rels INTO lo_par_rel.
      lo_object = lo_parent.
      lo_par_rel-&gt;create_parent_object( CHANGING ch_object = lo_object ).

      IF lo_parent IS NOT INITIAL.
        EXIT.
      ENDIF.

      lo_parent-&gt;fill_by_struct( ch_compn-&gt;get_key_struct( ) ).
      zcl_ic_persist=&gt;select( lo_parent ).

      IF lo_parent IS NOT INITIAL.
        select_to_root_todo( CHANGING ch_compn = lo_parent ).
      ENDIF.
    ENDLOOP.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TREE" VERSION="1" LANGU="E" DESCRIPT="Select IC object with childs" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TREE" SCONAME="I_DEPT" VERSION="1" LANGU="E" DESCRIPT="Two digit number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="NUMC2" PARVALUE="99"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TREE" SCONAME="I_UNTIL_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Last Object to load in tree" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TREE" SCONAME="I_TO_ROOT" VERSION="1" LANGU="E" DESCRIPT="Select until root object" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_IC_PERSIST" CMPNAME="SELECT_TREE" SCONAME="CH_IC_PARENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE"/>
   <source>METHOD select_tree.
  DATA: lo_comp TYPE REF TO  zif_ic_component,
        lo_comp_parent TYPE REF TO  zif_ic_component.

  select( ch_ic_parent ).

  lo_comp_parent ?= ch_ic_parent.

  lcl_relation_util=&gt;select_sub_tree(
                  EXPORTING i_dept = i_dept
                             i_until_object = i_until_object
                   CHANGING  ch_parent_comp = lo_comp_parent ).

  lcl_relation=&gt;map_all_passive_rels( ).

  IF i_to_root = abap_true.
    lo_comp = lo_comp_parent .
    select_to_root_todo( CHANGING ch_compn =  lo_comp ).
  ENDIF.

  lcl_relation=&gt;clear_relations( ).
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Parent object" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="ZCL_IC_PARENT_OBJECT" REFCLSNAME="ZIF_IC_COMPOSITE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_PARENT_OBJECT" CMPNAME="M_CHILDS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPOSITE" REFCMPNAME="M_CHILDS" TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_PARENT_OBJECT" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_PARENT_OBJECT" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_COMPONENT~IS_PARENT" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_PARENT_OBJECT" CPDNAME="ZIF_IC_COMPONENT~IS_PARENT">
   <source>method ZIF_IC_COMPONENT~IS_PARENT.
  is_parent = abap_true.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_PARENT_OBJECT" CPDNAME="ZIF_IC_COMPOSITE~ADD">
   <source>METHOD zif_ic_composite~add.
  DATA lo_old_parent TYPE REF TO zif_ic_composite.

* delete from old parent comp
  lo_old_parent = i_component-&gt;get_parent( ).

  IF i_component-&gt;get_parent( ) &lt;&gt; me.
    i_component-&gt;set_parent( me ).
  ENDIF.

  IF lo_old_parent IS NOT INITIAL.
    lo_old_parent-&gt;remove( EXPORTING i_comp = i_component ).
  ENDIF.

  IF NOT i_component-&gt;tab_entry( ) IS INITIAL.
    INSERT i_component-&gt;tab_entry( ) INTO TABLE m_childs.
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_PARENT_OBJECT" CPDNAME="ZIF_IC_COMPOSITE~COUNT">
   <source>method ZIF_IC_COMPOSITE~COUNT.
  DESCRIBE TABLE m_childs lines rt_number.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_PARENT_OBJECT" CPDNAME="ZIF_IC_COMPOSITE~GET_CHILD">
   <source>METHOD zif_ic_composite~get_child.

  DATA l_entry TYPE zif_ic_composite=&gt;ty_comp_tab_entry.

  READ TABLE m_childs WITH TABLE KEY comp_type = i_comp_type
                                     number = i_object_nr
                      INTO l_entry.

  rt_component = l_entry-comp.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_PARENT_OBJECT" CPDNAME="ZIF_IC_COMPOSITE~GET_CHILDREN">
   <source>method ZIF_IC_COMPOSITE~GET_CHILDREN.
  rt_children = m_childs.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_PARENT_OBJECT" CPDNAME="ZIF_IC_COMPOSITE~GET_CHILD_BY_KEY">
   <source>METHOD zif_ic_composite~get_child_by_key.
  FIELD-SYMBOLS: &lt;lwa_key_struct&gt; TYPE any,
                 &lt;lwa_key_struct2&gt; TYPE any,
                 &lt;lwa_key_struc_obj&gt; TYPE any.

  DATA: m_child TYPE zif_ic_component~ty_comp_tab_entry,
        m_o_child TYPE REF TO zif_ic_component,
        ld_object_key TYPE REF TO data,
        ld_object_key2 TYPE REF TO data.

  LOOP AT m_childs INTO m_child WHERE comp_type = i_comp_type.
    m_o_child = m_child-comp.
*   assign child object key
    ld_object_key = m_o_child-&gt;get_key_struct( ).
    ASSIGN  ld_object_key-&gt;* TO &lt;lwa_key_struct&gt;.

*   assign the object key to search for
    ASSIGN  i_object_key-&gt;* TO &lt;lwa_key_struc_obj&gt;.

*   assign second structure &lt;lwa_key_struct2&gt; as a copy of  &lt;lwa_key_struct&gt;
    CREATE DATA ld_object_key2 LIKE &lt;lwa_key_struct&gt;.
    ASSIGN ld_object_key2-&gt;* TO &lt;lwa_key_struct2&gt;.

    MOVE-CORRESPONDING &lt;lwa_key_struc_obj&gt; TO &lt;lwa_key_struct2&gt;.

    IF &lt;lwa_key_struct&gt; = &lt;lwa_key_struct2&gt;.
      rt_component = m_o_child.
      EXIT.
    ENDIF.
  ENDLOOP.


ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_PARENT_OBJECT" CPDNAME="ZIF_IC_COMPOSITE~GET_CHILD_BY_NAME">
   <source>METHOD zif_ic_composite~get_child_by_name.

  DATA: l_entry TYPE zif_ic_composite=&gt;ty_comp_tab_entry,
        l_name1 TYPE char30,
        l_name2 TYPE char30.

  l_name1 = i_path_name.
  TRANSLATE l_name1 TO UPPER CASE.

  LOOP AT m_childs INTO l_entry.
    l_name2 = l_entry-name.
    TRANSLATE l_name2 TO UPPER CASE.

    IF l_name1 = l_name2.
      rt_component = l_entry-comp.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_PARENT_OBJECT" CPDNAME="ZIF_IC_COMPOSITE~GET_CHILD_BY_PATH">
   <source>METHOD zif_ic_composite~get_child_by_path.
  DATA: lr_comp TYPE REF TO zif_ic_component,
        lr_comps TYPE REF TO zif_ic_composite,
        lit_split TYPE TABLE OF string,
        l_path TYPE string,
        l_split TYPE string,
        l_name TYPE char30.

  l_path = i_path.
  lr_comp = me.

  IF l_path IS NOT INITIAL.
    TRANSLATE l_path TO UPPER CASE.

    SPLIT l_path AT zif_ic_composite=&gt;c_path_token INTO TABLE lit_split.
*   strip first and last path token
    READ TABLE lit_split INTO l_split INDEX 1.

    IF sy-subrc = 0 AND l_split IS INITIAL.
      DELETE lit_split INDEX 1.
    ENDIF.

    READ TABLE lit_split INTO l_split INDEX 1.

    l_name = get_name( ).
    TRANSLATE l_name TO UPPER CASE.

    IF sy-subrc = 0 AND l_split = l_name.
      DELETE lit_split INDEX 1.
    ELSE.
      EXIT.
    ENDIF.

    LOOP AT lit_split INTO l_split.
      l_name = l_split.
      TRANSLATE l_name TO UPPER CASE.

      IF lr_comp-&gt;is_parent( ) = abap_true.
        lr_comps ?= lr_comp.
        lr_comp = lr_comps-&gt;get_child_by_name( l_name ).
      ENDIF.

    ENDLOOP.

  ENDIF.

  rt_component = lr_comp.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_PARENT_OBJECT" CPDNAME="ZIF_IC_COMPOSITE~REMOVE">
   <source>METHOD zif_ic_composite~remove.

  IF ( i_comp_type IS NOT INITIAL )
     AND ( i_object_nr IS NOT INITIAL ).

    DELETE m_childs WHERE comp_type = i_comp_type
                      AND number = i_object_nr.
  ENDIF.

  IF i_comp IS NOT INITIAL.

    DELETE m_childs WHERE comp_type = i_comp-&gt;get_type( )
                     AND number = i_comp-&gt;get_object_nr( ).
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC Object" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_OBJECT" CMPNAME="TY_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENT" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_OBJECT" CMPNAME="TY_COMPONENTS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENTS" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_OBJECT" CMPNAME="TY_COMP_TAB_ENTRIES" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMP_TAB_ENTRIES" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_OBJECT" CMPNAME="TY_COMP_TAB_ENTRY" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMP_TAB_ENTRY" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_OBJECT" CMPNAME="TY_RELATION" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="TY_RELATION" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_OBJECT" CMPNAME="TY_RELATIONS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="TY_RELATIONS" TYPESRC_LENG="0 "/>
  <implementing CLSNAME="ZCL_IC_OBJECT" REFCLSNAME="ZIF_IC_COMPONENT" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_CLASS_ATTRIB_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;AT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_CLASS_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC class object type" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;CL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_CONTAINER_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC container object type" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;IC&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_CONT_CONTEXT_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC container context object type" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;CX&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_IMPL_CONTEXT_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC container application context object type" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;IX&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_INJ_OBJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" EXPOSURE="2" STATE="1" EDITORDER="10 " ATTDECLTYP="2" ATTVALUE="&apos;IO&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;IT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_METHOD_PARAM_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;PA&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_METHOD_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC method object type" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;ME&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="C_VALUE_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" EXPOSURE="2" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="&apos;VA&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="M_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="IC description" EXPOSURE="1" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="M_NAME" VERSION="1" LANGU="E" DESCRIPT="IC name" EXPOSURE="1" STATE="1" EDITORDER="12 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_NAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="M_OBJECT_NUMBER" VERSION="1" LANGU="E" DESCRIPT="IC object number" EXPOSURE="1" STATE="1" EDITORDER="11 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJECT_NR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="M_PARENT" VERSION="1" LANGU="E" DESCRIPT="IC object number" EXPOSURE="1" STATE="1" EDITORDER="15 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="M_RANK" VERSION="1" LANGU="E" DESCRIPT="IC rank" EXPOSURE="1" STATE="1" EDITORDER="14 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_RANK" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_OBJECT" CMPNAME="M_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC object type" EXPOSURE="1" STATE="1" EDITORDER="16 " ATTDECLTYP="0" ATTVALUE="&apos;IO&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>method ZIF_IC_META_INFO~FILL_BY_STRUCT.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>method ZIF_IC_META_INFO~GET_KEY_STRUCT.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>method ZIF_IC_META_INFO~GET_OBJ_STRUCT.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_META_INFO~GET_RELATIONS">
   <source>METHOD zif_ic_meta_info~get_relations.
  REFRESH ex_relations.
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>method ZIF_IC_META_INFO~GET_TABLE_NAME.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_VALIDATING~VALIDATE">
   <source>METHOD zif_ic_validating~validate.
  CONSTANTS: lc_field_name TYPE typename VALUE &apos;ZIC_NAME&apos;,
             lc_field_descr TYPE typename VALUE &apos;ZIC_DESCRIPTION&apos;,
             lc_field_type TYPE typename VALUE &apos;ZIC_TYPE&apos;.

  DATA: lwa_msg TYPE scx_t100key.

  IF m_name IS INITIAL.
    CLEAR lwa_msg.

    lwa_msg = zcx_ic_error=&gt;err_empty_field.
    lwa_msg-attr1 = zcl_ic_utils=&gt;get_field_label( lc_field_name ).

    ch_validate-&gt;add_ic_error( im_path = get_path( )
                               im_message = lwa_msg ).
  ENDIF.

  IF m_type IS INITIAL.
    CLEAR lwa_msg.
    lwa_msg = zcx_ic_error=&gt;err_empty_field.
    lwa_msg-attr1 = zcl_ic_utils=&gt;get_field_label( lc_field_type ).

    ch_validate-&gt;add_ic_error( im_path = get_path( )
                               im_message = lwa_msg ).
  ENDIF.

  IF m_description IS INITIAL.
    CLEAR lwa_msg.
    lwa_msg = zcx_ic_error=&gt;err_empty_field.
    lwa_msg-attr1 = zcl_ic_utils=&gt;get_field_label( lc_field_descr ).

    ch_validate-&gt;add_ic_warning( im_path = get_path( )
                                 im_message = lwa_msg ).
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~CREATE_CHILD">
   <source>METHOD zif_ic_component~create_child.
  DATA: lit_comps TYPE ty_components,
        lwa_comp TYPE ty_component.

  create_childs(
          EXPORTING i_parent = i_parent
                 i_type = i_type
                 i_sub_type = i_sub_type
          IMPORTING ex_instances = lit_comps ).

  LOOP AT lit_comps INTO lwa_comp.

    IF NOT lwa_comp IS INITIAL
      AND lwa_comp-&gt;get_type( ) = i_type.

      ex_instance = lwa_comp.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~CREATE_CHILDS">
   <source>METHOD zif_ic_component~create_childs.
  DATA: lwa_relation TYPE ty_relation,
        lit_relations TYPE ty_relations.

  i_parent-&gt;get_relations( IMPORTING ex_relations = lit_relations ).

  LOOP AT lit_relations INTO lwa_relation.
    DATA lo_comp TYPE REF TO zif_ic_component.

*   all if im_type is initial
    IF lwa_relation-child = i_type OR i_type IS INITIAL.
      lo_comp = instance(  i_obj_type =  i_type
                           i_parent = i_parent
                           i_sub_type = i_sub_type ).
      APPEND lo_comp TO ex_instances.
    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~GET_DESCRIPTION">
   <source>method ZIF_IC_COMPONENT~GET_DESCRIPTION.
  rt_description = m_description.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~GET_NAME">
   <source>method ZIF_IC_COMPONENT~GET_NAME.
  rt_name = m_name.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~GET_OBJECT_NR">
   <source>METHOD zif_ic_component~get_object_nr.
  rt_object_nr = m_object_number.
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~GET_PARENT">
   <source>method ZIF_IC_COMPONENT~GET_PARENT.
  rt_parent = m_parent.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~GET_PATH">
   <source>METHOD zif_ic_component~get_path.
* Return the path + if = container return with a c_path_token in front
  DATA: l_path TYPE zic_path,
        lr_comp TYPE REF TO zif_ic_component.

  l_path = get_name( ).
  lr_comp = get_parent( ).

  IF lr_comp IS NOT BOUND
    OR lr_comp-&gt;get_name( ) IS INITIAL.
    l_path = zif_ic_composite=&gt;c_path_token &amp;&amp; l_path.
  ENDIF.

  WHILE lr_comp IS BOUND AND lr_comp-&gt;get_name( ) IS NOT INITIAL .

    l_path = lr_comp-&gt;get_name( ) &amp;&amp; zif_ic_composite=&gt;c_path_token &amp;&amp; l_path.

*   Add path token in front when container
    IF lr_comp-&gt;get_type( ) = zcl_ic_object=&gt;c_container_type.
      l_path = zif_ic_composite=&gt;c_path_token &amp;&amp; l_path.
    ENDIF.

    lr_comp = lr_comp-&gt;get_parent( ).
  ENDWHILE.



  TRANSLATE l_path TO UPPER CASE.
  rt_path_name = l_path.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~GET_RANK">
   <source>method ZIF_IC_COMPONENT~GET_RANK.
  rt_rank = m_rank.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~GET_TYPE">
   <source>method ZIF_IC_COMPONENT~GET_TYPE.
  rt_type = m_type.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~IS_PARENT">
   <source>method ZIF_IC_COMPONENT~IS_PARENT.
  is_parent = abap_false.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~SET_DESCRIPTION">
   <source>method ZIF_IC_COMPONENT~SET_DESCRIPTION.
  m_description = im_description.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~SET_NAME">
   <source>method ZIF_IC_COMPONENT~SET_NAME.
  m_name = i_name.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~SET_OBJECT_NR">
   <source>METHOD zif_ic_component~set_object_nr.
  m_object_number = i_object_nr.
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~SET_PARENT">
   <source>METHOD zif_ic_component~set_parent.

  IF i_parent IS NOT INITIAL.
    m_parent = i_parent.
    i_parent-&gt;add( me ).
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~SET_RANK">
   <source>method ZIF_IC_COMPONENT~SET_RANK.
  m_rank = im_rank.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_OBJECT" CPDNAME="ZIF_IC_COMPONENT~TAB_ENTRY">
   <source>method ZIF_IC_COMPONENT~TAB_ENTRY.
  r_tab_entry = convert_to_tab_entry( me ).
endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_OBJECT" CMPNAME="ADD_TO_PARENT" VERSION="1" LANGU="E" DESCRIPT="Add me to parent" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD add_to_parent.

  IF  m_parent IS NOT INITIAL.
    IF m_parent-&gt;get_key_struct( ) IS NOT INITIAL
      AND me-&gt;get_object_nr( ) IS NOT INITIAL.

      m_parent-&gt;add( me ).
    ENDIF.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJECT_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_PARENT" VERSION="1" LANGU="E" DESCRIPT="IC Object" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" PARVALUE="&apos;IO&apos;"/>
   <source>METHOD constructor.

  m_object_number = i_object_nr.
  m_name = i_name.
  m_description = i_description.
  m_rank = i_rank.
  m_parent = i_parent.
  m_type = i_type.

  init( ).
  add_to_parent( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONVERT_TO_TAB_ENTRY" VERSION="1" LANGU="E" DESCRIPT="Convert an object to a tab entry" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONVERT_TO_TAB_ENTRY" SCONAME="I_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="CONVERT_TO_TAB_ENTRY" SCONAME="R_TAB_ENTRY" VERSION="1" LANGU="E" DESCRIPT="Component tab entry" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIF_IC_COMPONENT~TY_COMP_TAB_ENTRY"/>
   <source>METHOD convert_to_tab_entry.

  IF i_component IS NOT INITIAL.
    r_tab_entry-comp_type = i_component-&gt;get_type( ).
    r_tab_entry-number = i_component-&gt;get_object_nr( ).
    r_tab_entry-name = i_component-&gt;get_name( ).
    r_tab_entry-rank =  i_component-&gt;get_rank( ).
    r_tab_entry-comp = i_component.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_OBJECT" CMPNAME="INIT" VERSION="1" LANGU="E" DESCRIPT="Initialize object" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_OBJECT" CMPNAME="INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Return an empty object" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="INSTANCE" SCONAME="I_OBJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE"/>
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="INSTANCE" SCONAME="I_PARENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="INSTANCE" SCONAME="I_SUB_TYPE" VERSION="1" LANGU="E" DESCRIPT="Sub type value" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_OBJECT" CMPNAME="INSTANCE" SCONAME="RE_IC_OBJ" VERSION="1" LANGU="E" DESCRIPT="IC Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_OBJECT"/>
   <source>METHOD instance.
  DATA: lo_cont TYPE REF TO zcl_ic_container,
        lo_cont_ctx TYPE REF TO zcl_ic_cont_context,
        lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
        lo_ctx      type ref to zcl_ic_context,
        lo_inj_type TYPE REF TO zcl_ic_inj_type,
        lo_class  TYPE REF TO zcl_ic_class,
        lo_method TYPE REF TO zcl_ic_method,
        lo_method_param TYPE REF TO zcl_ic_method,
        lo_attrib TYPE REF TO zcl_ic_class_attrib,
        lo_param  TYPE REF TO zcl_ic_method_param,
        lo_inj_obj TYPE REF TO zcl_ic_inj_object,
        lo_value TYPE REF TO zcl_ic_value.

  CASE i_obj_type.
    WHEN c_container_type.

      CREATE OBJECT lo_cont.
      re_ic_obj = lo_cont.

    WHEN c_cont_context_type.

      IF i_parent-&gt;get_type( ) = c_container_type.
        lo_cont ?= i_parent.

        CREATE OBJECT lo_cont_ctx
          EXPORTING
            i_cont = lo_cont.
      ELSEIF i_parent-&gt;get_type( ) = c_cont_context_type.
        DATA  lo_cont_ctx_parent TYPE REF TO zcl_ic_cont_context.

        lo_cont_ctx_parent ?= i_parent.

        lo_cont = lo_cont_ctx_parent-&gt;get_container( ).

        CREATE OBJECT lo_cont_ctx
          EXPORTING
            i_cont       = lo_cont
            i_parent_ctx = lo_cont_ctx_parent.
      ELSE.
        &quot;TODO throw erro
      ENDIF.

      re_ic_obj = lo_cont_ctx.

    WHEN c_impl_context_type.
      CASE i_sub_type.
        WHEN zcl_ic_context=&gt;c_impl_ctx OR space. &quot;default type
          IF i_parent-&gt;get_type( ) = c_cont_context_type.
            lo_cont_ctx ?= i_parent.
            lo_cont = lo_cont_ctx-&gt;get_container( ).

            CREATE OBJECT lo_impl_ctx
              EXPORTING
                i_cont       = lo_cont
                i_parent_ctx = lo_cont_ctx.
          ELSE.
            &quot;TODO throw erro
          ENDIF.

          re_ic_obj = lo_impl_ctx.
      ENDCASE.
    WHEN c_inj_type.
      CASE i_sub_type.
        WHEN zcl_ic_context=&gt;c_inj_sub_type OR space. &quot;default type
          IF i_parent IS BOUND
            AND i_parent-&gt;get_type( ) = c_cont_context_type.
            lo_cont_ctx ?= i_parent.
            lo_cont = lo_cont_ctx-&gt;get_container( ).

            CREATE OBJECT lo_inj_type
              EXPORTING
                i_cont       = lo_cont
                i_parent_ctx = lo_cont_ctx.
          ELSE.
            CREATE OBJECT lo_inj_type.
          ENDIF.

          re_ic_obj = lo_inj_type.
      ENDCASE.

    WHEN c_class_type.

      IF i_parent-&gt;get_type( ) = c_impl_context_type.
        lo_impl_ctx ?= i_parent.
        lo_cont = lo_impl_ctx-&gt;get_container( ).

        CREATE OBJECT lo_class
          EXPORTING
            i_parent = lo_impl_ctx.
      ELSEIF i_parent-&gt;get_type( ) = c_inj_type.
        lo_inj_type ?= i_parent.
        lo_cont = lo_inj_type-&gt;get_container( ).

        CREATE OBJECT lo_class
          EXPORTING
            i_parent = lo_inj_type.
      ELSE.
        &quot;TODO throw erro
      ENDIF.

      re_ic_obj = lo_class.
    WHEN c_method_type.

      IF i_parent-&gt;get_type( ) = c_class_type.

        lo_class ?= i_parent.

        CASE i_sub_type.
          WHEN zcl_ic_method=&gt;c_normal_method OR space.
            DATA lo_method_base TYPE REF TO zcl_ic_method.

            CREATE OBJECT lo_method_base
              EXPORTING
                i_class = lo_class.

            lo_method ?= lo_method_base.
          WHEN zcl_ic_method=&gt;c_constr_method.
            DATA lo_method_constr TYPE REF TO zcl_ic_constr_method.

            CREATE OBJECT lo_method_constr
              EXPORTING
                i_class = lo_class.

            lo_method ?= lo_method_constr.
          WHEN zcl_ic_method=&gt;c_setter_method.
            DATA lo_method_setter TYPE REF TO zcl_ic_setter_method.

            CREATE OBJECT lo_method_setter
              EXPORTING
                i_class = lo_class.

            lo_method ?= lo_method_setter.
        ENDCASE.
      ELSE.
        &quot;TODO throw erro
      ENDIF.

      re_ic_obj = lo_method.
    WHEN c_class_attrib_type.

      IF i_parent IS BOUND
         AND i_parent-&gt;get_type( ) = c_class_type.
        lo_class ?= i_parent.

        CREATE OBJECT lo_attrib
          EXPORTING
            i_class = lo_class.
      ELSE.
        &quot;TODO weg?
        CREATE OBJECT lo_attrib.
        &quot;TODO throw erro
      ENDIF.

      re_ic_obj = lo_attrib.
    WHEN c_method_param_type.

      IF i_parent-&gt;get_type( ) = c_method_type.
        lo_method_param ?= i_parent.

        CREATE OBJECT lo_param
          EXPORTING
            i_method = lo_method_param.
      ELSE.
        &quot;TODO weg
        CREATE OBJECT lo_attrib.
        &quot;TODO throw erro
      ENDIF.

      re_ic_obj = lo_param.
    WHEN c_inj_obj_type.

      IF i_parent-&gt;get_type( ) = c_impl_context_type
        or i_parent-&gt;get_type( ) = c_inj_type.
        lo_ctx ?= i_parent.

        CREATE OBJECT lo_inj_obj
          EXPORTING
            i_parent = lo_ctx.
      ELSE.
        CREATE OBJECT lo_inj_obj.
      ENDIF.

      re_ic_obj = lo_inj_obj.
    WHEN c_value_type.
      DATA: l_data_type TYPE rs38l_typ VALUE &apos;STRING&apos;.

*     default data type
      CASE i_sub_type.
        WHEN zcl_ic_value=&gt;c_value_type_data OR space.  &quot;Default type
          lo_value ?= zcl_ic_data=&gt;create( i_data_type = l_data_type
                                           i_data_value = space ).
        WHEN zcl_ic_value=&gt;c_value_type_table.
          lo_value ?= zcl_ic_table=&gt;create( i_table_name = space ).
        WHEN zcl_ic_value=&gt;c_value_type_object.
          DATA lo_ic_class TYPE REF TO zcl_ic_class.
          lo_value ?= zcl_ic_class_value=&gt;create( i_ic_class = lo_ic_class ).
        WHEN zcl_ic_value=&gt;c_value_type_param.
          DATA lo_ic_param TYPE REF TO zcl_ic_method_param.

          lo_value ?= zcl_ic_method_param_value=&gt;create( i_ic_param = lo_ic_param ).
        WHEN zcl_ic_value=&gt;c_value_type_attrib.
          DATA lo_ic_attrib TYPE REF TO zcl_ic_class_attrib.

          lo_value ?= zcl_ic_class_attrib_value=&gt;create( i_ic_attrib = lo_ic_attrib ).
        WHEN zcl_ic_value=&gt;c_value_type_inj_type.
          lo_value ?= zcl_ic_type_value=&gt;create( ).
      ENDCASE.

      re_ic_obj = lo_value.
    WHEN OTHERS.
      &quot;TODO raise error
  ENDCASE.

ENDMETHOD.</source>
  </method>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="CREATE_CHILDS" VERSION="1" EXPOSURE="0" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="CREATE_CHILDS"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="FILL_BY_STRUCT" VERSION="1" EXPOSURE="0" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="FILL_BY_STRUCT"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_DESCRIPTION" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_DESCRIPTION"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_KEY_STRUCT" VERSION="1" EXPOSURE="0" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_KEY_STRUCT"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_NAME" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_NAME"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_OBJECT_NR" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_OBJECT_NR"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_OBJ_STRUCT" VERSION="1" EXPOSURE="0" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_OBJ_STRUCT"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_PARENT" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_PARENT"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_PATH" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_PATH"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_RANK" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_RANK"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_RELATIONS" VERSION="1" EXPOSURE="0" CMPTYPE="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_RELATIONS"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_TABLE_NAME" VERSION="1" EXPOSURE="0" CMPTYPE="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_TABLE_NAME"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="GET_TYPE" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_TYPE"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="TAB_ENTRY" VERSION="1" EXPOSURE="0" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TAB_ENTRY"/>
  <aliasMethod CLSNAME="ZCL_IC_OBJECT" CMPNAME="VALIDATE" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_VALIDATING" REFCMPNAME="VALIDATE"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Method as Value Object" CATEGORY="00" EXPOSURE="1" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_VALUE">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="M_IC_METHOD_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC method parameter" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_METHOD_PARAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE_REF" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.
  FIELD-SYMBOLS: &lt;lwa_ic_value&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_value&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_value&gt; TO l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-value_nr IS INITIAL.
      m_object_number = l_struct-value_nr.
    ENDIF.

    IF NOT l_struct-value_name IS INITIAL.
      m_name = l_struct-value_name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-rank IS INITIAL.
      m_rank = l_struct-rank.
    ENDIF.

  ENDIF.

  init( ).
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.
  FIELD-SYMBOLS &lt;lwa_ic_value&gt; TYPE zcl_ic_value=&gt;ty_object.
  DATA lwa_ic_value TYPE ty_object.

* fill fields
  lwa_ic_value-value_nr = zif_ic_component~get_object_nr( ).
  lwa_ic_value-value_name = zif_ic_component~get_name( ).
  lwa_ic_value-value_type = get_value_type( ).
  lwa_ic_value-description = get_description( ).
  lwa_ic_value-rank = get_rank( ).

  lwa_ic_value-ic_param_class = get_ic_method_param( )-&gt;get_class( )-&gt;get_object_nr( ).
  lwa_ic_value-ic_param_method = get_ic_method_param( )-&gt;get_method( )-&gt;get_object_nr( ).
  lwa_ic_value-ic_param = get_ic_method_param( )-&gt;get_object_nr( ).

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_value&gt;.

  &lt;lwa_ic_value&gt; = lwa_ic_value.

ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="I_IC_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC method parameter" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_METHOD_PARAM"/>
   <source>METHOD CONSTRUCTOR.

  super-&gt;constructor( i_value_type = zcl_ic_value=&gt;c_value_type_param ).

  m_ic_method_param = i_ic_param.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create Data value" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="CREATE" SCONAME="I_IC_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC method parameter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_METHOD_PARAM"/>
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="CREATE" SCONAME="RT_IC_PARAM_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Class as Value Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_METHOD_PARAM_VALUE"/>
   <source>METHOD create.

  CREATE OBJECT rt_ic_param_value
    EXPORTING
      i_ic_param = i_ic_param.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="EXECUTE_METHOD" VERSION="1" LANGU="E" DESCRIPT="Execute the method to fill method parameters" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD execute_method.

  IF m_ic_method_param-&gt;get_method( ) IS INITIAL
    OR m_ic_method_param-&gt;get_method( )-&gt;get_class( ) IS INITIAL.

    m_ic_method_param-&gt;get_method( )-&gt;get_class( )-&gt;zif_ic_wirable~wire( ).
  ENDIF.

  IF m_ic_method_param-&gt;get_method( ) IS INITIAL.
    &quot;TODO throw error
  ENDIF.
* refresh the method param
  m_ic_method_param ?= m_ic_method_param-&gt;get_method( )-&gt;zif_ic_composite~get_child(
                                   i_comp_type = zcl_ic_object=&gt;c_method_param_type
                                   i_object_nr = m_ic_method_param-&gt;get_object_nr( ) ).

  m_ic_method_param-&gt;get_method( ).

  IF m_ic_method_param-&gt;get_method( )-&gt;is_passive( ) = abap_true.
*   if the method is active, the method is already executed
    m_ic_method_param-&gt;get_method( )-&gt;set_is_active( abap_true ).
    m_ic_method_param-&gt;get_method( )-&gt;zif_ic_wirable~wire( ).
*   TODO try catch : in finally block Method has to be passive again !!!!!!!!!!!!!

    m_ic_method_param-&gt;get_method( )-&gt;set_is_active( abap_false ).

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="GET_IC_METHOD_PARAM" VERSION="1" LANGU="E" DESCRIPT="Getter for value object IC-method" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="GET_IC_METHOD_PARAM" SCONAME="RT_IC_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC method parameter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_METHOD_PARAM"/>
   <source>method GET_IC_METHOD_PARAM.
  rt_ic_param = m_ic_method_param.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="GET_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="Getter for the ic value" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="GET_IC_VALUE" SCONAME="I_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_VALUE"/>
   <source>METHOD get_ic_value.

  IF m_ic_method_param IS NOT INITIAL.
    i_value =  m_ic_method_param-&gt;get_ic_value( ).
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value.

  execute_method( ).

  IF get_ic_value( ) IS NOT INITIAL.

    get_ic_value( )-&gt;get_value( IMPORTING e_value = e_value ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_REF" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value_ref.

  execute_method( ).

  IF get_ic_value( ) IS NOT INITIAL.

    rt_value_ref = get_ic_value( )-&gt;get_value_ref( i_type_name = i_type_name ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method INIT.
  super-&gt;init( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="SET_IC_METHOD_PARAM" VERSION="1" LANGU="E" DESCRIPT="setter for value object from IC-method" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM_VALUE" CMPNAME="SET_IC_METHOD_PARAM" SCONAME="IM_IC_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC method parameter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_METHOD_PARAM"/>
   <source>method SET_IC_METHOD_PARAM.
  m_ic_method_param = im_ic_param.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_METHOD_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC method parameter" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container method parameter" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZIC_METHOD_PARAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="22 " SRCCOLUMN1="4 " SRCROW2="26 " SRCCOLUMN2="38 " TYPESRC_LENG="262 " TYPESRC="BEGIN OF ty_object_key ,
                      class_nr TYPE zic_method_param-class_nr,
                      method_nr TYPE zic_method_param-method_nr ,
                      param_nr TYPE zic_method_param-param_nr,
                  END  OF ty_object_key
"/>
  <types CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="TY_METHOD_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC method parameter" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZCL_IC_METHOD_PARAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="TY_METHOD_PARAMS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="29 " SRCCOLUMN1="4 " SRCROW2="29 " SRCCOLUMN2="49 " TYPESRC_LENG="48 " TYPESRC="ty_method_params TYPE TABLE OF ty_method_param
"/>
  <implementing CLSNAME="ZCL_IC_METHOD_PARAM" REFCLSNAME="ZIF_IC_VALUEHOLDER" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_METHOD_PARAM" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="C_METHOD_PARAM_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_METHOD_PARAM&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="M_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_VALUE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_METHOD_PARAM" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_METHOD_PARAM" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="0"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD_PARAM" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.

    FIELD-SYMBOLS: &lt;lwa_ic_method_param&gt; TYPE any.
    DATA l_struct TYPE ty_object.

    ASSIGN i_structure-&gt;* TO &lt;lwa_ic_method_param&gt;.

    MOVE-CORRESPONDING &lt;lwa_ic_method_param&gt; TO  l_struct.

*   move data
    IF NOT l_struct IS INITIAL.

      IF NOT l_struct-param_nr IS INITIAL.
        m_object_number = l_struct-param_nr.
      ENDIF.

      IF NOT l_struct-param_name IS INITIAL.
        m_name = l_struct-param_name.
      ENDIF.

      IF NOT l_struct-description IS INITIAL.
        m_description = l_struct-description.
      ENDIF.

      IF NOT l_struct-rank IS INITIAL.
        m_rank = l_struct-rank.
      ENDIF.
&quot;TODO hierna weg
*      IF NOT l_struct-value_type IS INITIAL.
*        DATA: lo_ic_class TYPE REF TO zcl_ic_class,
*              lo_ic_method TYPE REF TO zcl_ic_method,
*              lo_ic_param  TYPE REF TO zcl_ic_method_param.

*        IF l_struct-value_type = zcl_ic_value=&gt;c_value_type_data.
*
*          IF NOT l_struct-data_type IS INITIAL.
*
*            m_ic_value = zcl_ic_data=&gt;create(
*                               i_data_type = l_struct-data_type
*                               i_data_value = l_struct-data_value ).
*          ENDIF.
*        ENDIF.
*
*        IF l_struct-value_type = zcl_ic_value=&gt;c_value_type_table.
*
*          IF NOT l_struct-table_name IS INITIAL.
*            m_ic_value = zcl_ic_table=&gt;create( i_table_name = l_struct-table_name ).
*          ENDIF.
*        ENDIF.
*
*        IF l_struct-value_type = zcl_ic_value=&gt;c_value_type_object.
*          lo_ic_class ?= get_class( )-&gt;get_parent( )-&gt;get_child(
*                                              i_comp_type = zcl_ic_object=&gt;c_class_type
*                                              i_object_nr = l_struct-ic_class ).
*
*          m_ic_value = zcl_ic_class_value=&gt;create( i_ic_class = lo_ic_class ).
*        ENDIF.
*
*        IF l_struct-value_type = zcl_ic_value=&gt;c_value_type_param.
*
*          lo_ic_class ?= get_class( )-&gt;get_parent( )-&gt;get_child(
*                                              i_comp_type = zcl_ic_object=&gt;c_class_type
*                                              i_object_nr = l_struct-ic_param_class ).
*          lo_ic_method ?= lo_ic_class-&gt;zif_ic_composite~get_child(
*                                              i_comp_type = zcl_ic_object=&gt;c_method_type
*                                              i_object_nr = l_struct-ic_param_method ).
*
*          lo_ic_param ?= lo_ic_method-&gt;zif_ic_composite~get_child(
*                                              i_comp_type = zcl_ic_object=&gt;c_method_param_type
*                                              i_object_nr = l_struct-ic_param ).
*
*          m_ic_value = zcl_ic_method_param_value=&gt;create( i_ic_param = lo_ic_param ).
*        ENDIF.
*      ENDIF.

    ENDIF.

    init( ).

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~FILL_BY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD_PARAM" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>METHOD zif_ic_meta_info~get_key_struct.

    FIELD-SYMBOLS &lt;lwa_ic_param_key&gt; TYPE ty_object_key.
    DATA lwa_ic_param_key TYPE ty_object_key.

*   fill key data
    IF get_method( ) IS NOT INITIAL
         AND get_method( )-&gt;get_class( ) IS NOT INITIAL.
      lwa_ic_param_key-class_nr = get_method( )-&gt;get_class( )-&gt;get_object_nr( ).
    ENDIF.

    IF get_method( ) IS NOT INITIAL.
      lwa_ic_param_key-method_nr = get_method( )-&gt;get_object_nr( ).
    ENDIF.

    lwa_ic_param_key-param_nr = get_object_nr( ).

    CREATE DATA rt_comp_key_struct TYPE ty_object_key.
    ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_param_key&gt;.

    &lt;lwa_ic_param_key&gt; = lwa_ic_param_key.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_KEY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD_PARAM" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.

    FIELD-SYMBOLS &lt;lwa_ic_method_param&gt; TYPE ty_object.
    DATA lwa_ic_method_param TYPE ty_object.

*   fill fields
    IF get_method( ) IS NOT INITIAL
        AND get_method( )-&gt;get_class( ) IS NOT INITIAL.
      lwa_ic_method_param-class_nr = get_method( )-&gt;get_class( )-&gt;get_object_nr( ).
    ENDIF.

    IF get_method( ) IS NOT INITIAL.
      lwa_ic_method_param-method_nr = get_method( )-&gt;get_object_nr( ).
    ENDIF.

    lwa_ic_method_param-param_nr = zif_ic_component~get_object_nr( ).

    lwa_ic_method_param-param_name = m_name.
    lwa_ic_method_param-description = m_description.
    lwa_ic_method_param-rank = m_rank.

    IF m_ic_value IS NOT INITIAL.
      lwa_ic_method_param-ic_value = m_ic_value-&gt;get_object_nr( ).
    ENDIF.

    IF m_ic_value IS NOT INITIAL.
      lwa_ic_method_param-value_type = m_ic_value-&gt;get_value_type( ).

      IF m_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_data.
        DATA lo_data TYPE REF TO zcl_ic_data.

        lo_data ?= m_ic_value.
        lwa_ic_method_param-data_type = lo_data-&gt;get_data_type( ).
        lwa_ic_method_param-data_value = lo_data-&gt;get_data_value( ).

      ELSEIF m_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_table.
        DATA lo_table TYPE REF TO zcl_ic_table.

        lo_table ?= m_ic_value.
        lwa_ic_method_param-table_name = lo_table-&gt;get_table_name( ).

      ELSEIF m_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_object.
        DATA lo_class_value TYPE REF TO zcl_ic_class_value.

        lo_class_value ?= m_ic_value.

        IF lo_class_value-&gt;get_ic_class( ) IS BOUND.
          lwa_ic_method_param-ic_class = lo_class_value-&gt;get_ic_class( )-&gt;get_object_nr( ).
        ENDIF.
      ELSEIF m_ic_value-&gt;get_value_type( ) = m_ic_value-&gt;c_value_type_param.
        DATA lo_param_value TYPE REF TO zcl_ic_method_param_value.

        IF m_ic_value IS NOT INITIAL.
          lo_param_value ?= m_ic_value.

          IF lo_param_value-&gt;get_ic_method_param( ) IS BOUND.
            lwa_ic_method_param-ic_param_class = lo_param_value-&gt;get_ic_method_param( )-&gt;get_class( )-&gt;get_object_nr( ).
            lwa_ic_method_param-ic_param_method = lo_param_value-&gt;get_ic_method_param( )-&gt;get_method( )-&gt;get_object_nr( ).
            lwa_ic_method_param-ic_param = lo_param_value-&gt;get_ic_method_param( )-&gt;get_object_nr( ).
          ENDIF.
        ENDIF.
      ENDIF.

    ENDIF.

    CREATE DATA rt_obj_struct TYPE ty_object.
    ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_method_param&gt;.

    &lt;lwa_ic_method_param&gt; = lwa_ic_method_param.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_OBJ_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD_PARAM" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD zif_ic_meta_info~get_table_name.
    rt_table_name = c_method_param_table.
  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_TABLE_NAME</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD_PARAM" CPDNAME="ZIF_IC_VALUEHOLDER~GET_IC_VALUE">
   <source>METHOD zif_ic_valueholder~get_ic_value.
  rt_ic_value = m_ic_value.
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD_PARAM" CPDNAME="ZIF_IC_VALUEHOLDER~SET_IC_VALUE">
   <source>METHOD zif_ic_valueholder~set_ic_value.
  m_ic_value = i_ic_value.
ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="CALC_PARAM_BINDING" VERSION="1" LANGU="E" DESCRIPT="Get the parameter binding" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="CALC_PARAM_BINDING" SCONAME="RT_PARAM_BINDING" VERSION="1" LANGU="E" DESCRIPT="Abap parameter binding" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_PARMBIND"/>
   <source>METHOD calc_param_binding.

  CLEAR rt_param_binding-kind.

  rt_param_binding-name = m_name.
  rt_param_binding-value = m_ic_value-&gt;get_value_ref( ).

  IF is_referenced_param( ) = abap_true.
*   bind ref to data
    rt_param_binding-value =  m_ic_value-&gt;get_value_data_ref( ).
  ELSEIF get_param_type( )-&gt;applies_to_data_ref( rt_param_binding-value ) = abap_false.
    DATA l_type TYPE rs38l_typ.
*   bind any other possible type
    l_type = get_param_type( )-&gt;get_relative_name( ).
    rt_param_binding-value = m_ic_value-&gt;get_value_ref( l_type ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="CONSTRUCTOR" SCONAME="I_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Container Context Method" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_METHOD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="CONSTRUCTOR" SCONAME="I_PARAM_NR" VERSION="1" LANGU="E" DESCRIPT="IC method parameter number" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_PARAM_NR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="CONSTRUCTOR" SCONAME="I_PARAM_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <source>METHOD constructor.

    super-&gt;constructor(
      EXPORTING
        i_object_nr = i_param_nr
        i_name = i_param_name
        i_description = i_description
        i_rank = i_rank
        i_type = zcl_ic_object=&gt;c_method_param_type
      ).

    IF i_method IS NOT INITIAL.
      m_parent = i_method.
    ENDIF.

    init( ).
    add_to_parent( ).

  ENDMETHOD.                    &quot;CONSTRUCTOR</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="GET_CLASS" VERSION="1" LANGU="E" DESCRIPT="Getter for the class" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="GET_CLASS" SCONAME="RT_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context Method" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>METHOD get_class.

  IF get_method( ) IS NOT INITIAL.
    rt_class = get_method( )-&gt;get_class( ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="GET_METHOD" VERSION="1" LANGU="E" DESCRIPT="Getter for the method" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="GET_METHOD" SCONAME="RT_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Container Context Method" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_METHOD"/>
   <source>method GET_METHOD.
  rt_method ?= m_parent.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="GET_PARAM_DESCR" VERSION="1" LANGU="E" DESCRIPT="Getter for the method description workarea" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="GET_PARAM_DESCR" SCONAME="RT_PARAM_DESCR" VERSION="1" LANGU="E" DESCRIPT="Parameter description" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_PARMDESCR"/>
   <source>METHOD GET_PARAM_DESCR.
  DATA: lit_parmdescr TYPE abap_parmdescr_tab,
        lwa_parm_descr TYPE abap_parmdescr.

  IF get_method( ) IS NOT INITIAL.
    lit_parmdescr = get_method( )-&gt;get_method_descr( )-parameters.

    READ TABLE lit_parmdescr WITH KEY name = m_name
                             INTO lwa_parm_descr.

    rt_param_descr = lwa_parm_descr.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="GET_PARAM_TYPE" VERSION="1" LANGU="E" DESCRIPT="Returns the parameter type" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="GET_PARAM_TYPE" SCONAME="RT_DATA_DESCR" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_DATADESCR"/>
   <source>METHOD get_param_type.

  rt_data_descr = get_class( )-&gt;get_class_descr( )-&gt;get_method_parameter_type(
                       p_method_name = get_method( )-&gt;zif_ic_component~get_name( )
                       p_parameter_name = zif_ic_component~get_name( ) ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_OBJECT" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD INIT.

  super-&gt;init( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="IS_REFERENCED_PARAM" VERSION="1" LANGU="E" DESCRIPT="Is the method parameter of type: ref to data" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="IS_REFERENCED_PARAM" SCONAME="RT_IS_REF_TO_DATA" VERSION="1" LANGU="E" DESCRIPT="Is method param ref to data" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD is_referenced_param.

  IF get_param_type( )-&gt;type_kind = cl_abap_datadescr=&gt;typekind_dref.
    rt_is_ref_to_data = abap_true.
  ELSE.
    rt_is_ref_to_data = abap_false.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <aliasMethod CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="GET_IC_VALUE" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_VALUEHOLDER" REFCMPNAME="GET_IC_VALUE"/>
  <aliasMethod CLSNAME="ZCL_IC_METHOD_PARAM" CMPNAME="SET_IC_VALUE" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_VALUEHOLDER" REFCMPNAME="SET_IC_VALUE"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Container Context Method" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_METHOD" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Method" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZIC_METHOD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_METHOD" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="12 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="36 " TYPESRC_LENG="179 " TYPESRC="BEGIN OF ty_object_key ,
                    class_nr TYPE zic_method-class_nr,
                    method_nr type zic_method-method_nr,
                END  OF ty_object_key
"/>
  <types CLSNAME="ZCL_IC_METHOD" CMPNAME="TY_METHOD" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZCL_IC_METHOD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_METHOD" CMPNAME="TY_METHODS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="18 " SRCCOLUMN1="4 " SRCROW2="18 " SRCCOLUMN2="37 " TYPESRC_LENG="36 " TYPESRC="ty_methods TYPE TABLE OF ty_method
"/>
  <implementing CLSNAME="ZCL_IC_METHOD" REFCLSNAME="ZIF_IC_WIRABLE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_METHOD" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <typeClasDef CLSNAME="ZCL_IC_METHOD" TYPEGROUP="ZCL_IC_CLASS_ATTRIB" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <typeClasDef CLSNAME="ZCL_IC_METHOD" TYPEGROUP="ZCL_IC_METHOD_PARAM" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="C_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC method type" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_METHOD_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="C_DECLARE_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Instance method" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SEOMTDDECL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="C_DECLARE_STATIC" VERSION="1" LANGU="E" DESCRIPT="static method" EXPOSURE="2" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SEOMTDDECL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="C_GETTER_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC method type" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="4" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_METHOD_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="C_IS_ACTIVE" VERSION="1" LANGU="E" DESCRIPT="IC Method is active or passive" EXPOSURE="2" STATE="1" EDITORDER="11 " ATTDECLTYP="2" ATTVALUE="ABAP_TRUE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_METHOD_ACTIVE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="C_IS_PASSIVE" VERSION="1" LANGU="E" DESCRIPT="IC Method is active or passive" EXPOSURE="2" STATE="1" EDITORDER="12 " ATTDECLTYP="2" ATTVALUE="ABAP_FALSE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_METHOD_ACTIVE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="C_METHOD_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_METHOD&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="C_NORMAL_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC method type" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_METHOD_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="C_SETTER_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC method type" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="3" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_METHOD_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="M_ACTIVE" VERSION="1" LANGU="E" DESCRIPT="IC Method is active or passive" EXPOSURE="1" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTVALUE="ABAP_FALSE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_METHOD_ACTIVE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="M_DECLARE_LEVEL" VERSION="1" LANGU="E" DESCRIPT="Method declaration level" EXPOSURE="1" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTVALUE="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SEOMTDDECL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="M_METHOD_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC method type" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_METHOD_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_METHOD" CMPNAME="M_PARAM_BINDINGS" VERSION="1" LANGU="E" DESCRIPT="Parameter bindings table" EXPOSURE="1" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_PARMBIND_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_METHOD" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_METHOD" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_METHOD" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_METHOD" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_METHOD" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_METHOD" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_RELATIONS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_METHOD" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_METHOD" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_VALIDATING~VALIDATE" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.

    FIELD-SYMBOLS: &lt;lwa_ic_method&gt; TYPE any.
    DATA l_struct TYPE ty_object.

    ASSIGN i_structure-&gt;* TO &lt;lwa_ic_method&gt;.

    MOVE-CORRESPONDING &lt;lwa_ic_method&gt; TO  l_struct.

*   move data
    IF NOT l_struct IS INITIAL.

      IF NOT l_struct-method_nr IS INITIAL.
        m_object_number = l_struct-method_nr.
      ENDIF.

      IF NOT l_struct-method_name IS INITIAL.
        m_name = l_struct-method_name.
      ENDIF.

      IF NOT l_struct-description IS INITIAL.
        m_description = l_struct-description.
      ENDIF.

      IF NOT l_struct-rank IS INITIAL.
        m_rank = l_struct-rank.
      ENDIF.

      l_struct-method_type = l_struct-rank.

      IF NOT l_struct-declare_level IS INITIAL.
        m_declare_level = l_struct-declare_level.
      ENDIF.

      m_active = l_struct-active.

    ENDIF.

    init( ).

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~FILL_BY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>METHOD ZIF_IC_META_INFO~GET_KEY_STRUCT.

    FIELD-SYMBOLS &lt;lwa_ic_method_key&gt; TYPE ty_object_key.
    DATA lwa_ic_method_key TYPE ty_object_key.

*   fill key data
    lwa_ic_method_key-class_nr = get_class( )-&gt;get_object_nr( ).
    lwa_ic_method_key-method_nr = get_object_nr( ).

    CREATE DATA rt_comp_key_struct TYPE ty_object_key.
    ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_method_key&gt;.

    &lt;lwa_ic_method_key&gt; = lwa_ic_method_key.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_KEY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.

    FIELD-SYMBOLS &lt;lwa_ic_method&gt; TYPE ty_object.
    DATA lwa_ic_method TYPE ty_object.

* fill fields
    lwa_ic_method-class_nr = get_class( )-&gt;get_object_nr( ).
    lwa_ic_method-method_nr = zif_ic_component~get_object_nr( ).

    lwa_ic_method-method_name = m_name.
    lwa_ic_method-description = m_description.
    lwa_ic_method-rank = m_rank.
    lwa_ic_method-method_type = m_method_type.
    lwa_ic_method-declare_level = m_declare_level.
    lwa_ic_method-active = m_active.

    CREATE DATA rt_obj_struct TYPE ty_object.
    ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_method&gt;.

    &lt;lwa_ic_method&gt; = lwa_ic_method.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_OBJ_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD" CPDNAME="ZIF_IC_META_INFO~GET_RELATIONS">
   <source>method ZIF_IC_META_INFO~GET_RELATIONS.
  DATA: lwa_rel TYPE zif_ic_meta_info~ty_relation.

  super-&gt;zif_ic_meta_info~get_relations( IMPORTING ex_relations = ex_relations ).

* Add relation 1
  CLEAR lwa_rel.

  lwa_rel-rel_type = &apos;CR&apos;.
  lwa_rel-parent = zcl_ic_object=&gt;c_method_type.
  lwa_rel-child = zcl_ic_object=&gt;c_method_param_type.

  APPEND lwa_rel TO ex_relations.

endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD zif_ic_meta_info~get_table_name.
    rt_table_name = c_method_table.
  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_TABLE_NAME</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD" CPDNAME="ZIF_IC_VALIDATING~VALIDATE">
   <source>METHOD zif_ic_validating~validate.
  CONSTANTS: lc_field_cl_name TYPE typename VALUE &apos;ZIC_CLSNAME&apos;,
             lc_field_return TYPE typename VALUE &apos;ZIC_CLSNAME&apos;.

  DATA: lwa_msg TYPE scx_t100key.

  super-&gt;zif_ic_validating~validate( CHANGING ch_validate = ch_validate ).

* METHOD NAME exists + Mandatory params
  IF m_name IS NOT INITIAL AND get_class( )-&gt;get_name( ) IS NOT INITIAL.

    IF get_class( )-&gt;get_class_descr( ) IS BOUND.
      DATA: lit_meth_descr TYPE STANDARD TABLE OF abap_methdescr,
            lwa_meth_descr TYPE abap_methdescr.

      lit_meth_descr = get_class( )-&gt;get_class_descr( )-&gt;methods .
      READ TABLE lit_meth_descr INTO lwa_meth_descr WITH KEY name = m_name.

      IF sy-subrc &lt;&gt; 0.
        CLEAR lwa_msg.
        lwa_msg = zcx_ic_error=&gt;err_method_not_exist.
        lwa_msg-attr1 = m_name.
        lwa_msg-attr2 = get_class( )-&gt;get_name( ).

        ch_validate-&gt;add_ic_error( im_path = get_path( )
                                   im_message = lwa_msg ).
      ELSE.
*       mandatory params
        DATA: lwa_param TYPE abap_parmdescr.

        LOOP AT lwa_meth_descr-parameters  INTO lwa_param WHERE is_optional = abap_false.

          IF get_param_by_name( lwa_param-name ) IS NOT BOUND.
            CLEAR lwa_msg.
            lwa_msg = zcx_ic_error=&gt;err_param_mandt.
            lwa_msg-attr1 = lwa_param-name.
            lwa_msg-attr2 = m_name.

            ch_validate-&gt;add_ic_error( im_path = get_path( )
                                       im_message = lwa_msg ).
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.


  ENDIF.


ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_METHOD" CPDNAME="ZIF_IC_WIRABLE~WIRE">
   <source>METHOD zif_ic_wirable~wire.

  build_param_bindings(  ).

  IF is_active( ) = c_is_active.
    execute( ).
  ENDIF.

  map_params( ).

  zif_ic_wirable~m_is_wired = abap_true.
ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="BUILD_PARAM_BINDINGS" VERSION="1" LANGU="E" DESCRIPT="Build the constructor param" EXPOSURE="1" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD build_param_bindings.
  DATA: lit_o_params TYPE zcl_ic_method_param=&gt;ty_method_params,
        lo_param TYPE REF TO zcl_ic_method_param,
        lit_param_bind TYPE abap_parmbind_tab,
        lwa_param_bind TYPE abap_parmbind.

  REFRESH lit_param_bind.

  get_params( IMPORTING e_method_params = lit_o_params ).

  LOOP AT lit_o_params INTO lo_param.
*   get parameter binding and add to table
    CLEAR lwa_param_bind.

    lwa_param_bind = lo_param-&gt;calc_param_binding( ).

    INSERT lwa_param_bind INTO TABLE lit_param_bind.
  ENDLOOP.

  m_param_bindings = lit_param_bind.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_METHOD_NR" VERSION="1" LANGU="E" DESCRIPT="IC method number" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_METHOD_NR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_METHOD_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_DECLARE_LEVEL" VERSION="1" LANGU="E" DESCRIPT="Method declaration level" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOMTDDECL" PARVALUE="0"/>
   <source>METHOD constructor.

    super-&gt;constructor(
      EXPORTING
        i_object_nr = i_method_nr
        i_name = i_method_name
        i_description = i_description
        i_rank = i_rank
        i_type = zcl_ic_object=&gt;c_method_type
      ).

    m_method_type = c_normal_method.
    m_declare_level = i_declare_level.

    IF i_class IS NOT INITIAL.
      m_parent = i_class.
    ENDIF.

    m_active = c_is_passive.

    init( ).
    add_to_parent( ).

  ENDMETHOD.                    &quot;CONSTRUCTOR</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="EXECUTE" VERSION="1" LANGU="E" DESCRIPT="Execute the method" EXPOSURE="1" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD execute.
  DATA: l_class_name TYPE seoclsname.

  l_class_name = get_class( )-&gt;get_class_name( ).

  IF m_declare_level = c_declare_static.
    CALL METHOD (l_class_name)=&gt;(m_name) PARAMETER-TABLE m_param_bindings.

  ELSEIF m_declare_level = c_declare_instance.
    DATA lo_object TYPE REF TO object.

    lo_object = get_class( )-&gt;get_object( ).

    CALL METHOD lo_object-&gt;(m_name) PARAMETER-TABLE m_param_bindings.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_CLASS" VERSION="1" LANGU="E" DESCRIPT="Get the class" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_CLASS" SCONAME="RT_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>METHOD get_class.
  rt_class ?= m_parent.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_DECLARE_LEVEL" VERSION="1" LANGU="E" DESCRIPT="Level = instance or static" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_DECLARE_LEVEL" SCONAME="RT_DECLARE_LEVEL" VERSION="1" LANGU="E" DESCRIPT="Method declaration level" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SEOMTDDECL"/>
   <source>method GET_DECLARE_LEVEL.
  RT_DECLARE_LEVEL = m_declare_level.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_METHOD_DESCR" VERSION="1" LANGU="E" DESCRIPT="Get method description work area" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_METHOD_DESCR" SCONAME="RT_METHOD_DESCR_WA" VERSION="1" LANGU="E" DESCRIPT="Method description WA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_METHDESCR"/>
   <source>METHOD GET_METHOD_DESCR.

  DATA: lit_methods TYPE abap_methdescr_tab,
        lwa_method TYPE abap_methdescr.

  lit_methods = get_class( )-&gt;get_class_descr( )-&gt;methods.

  SORT lit_methods BY name.

  READ TABLE lit_methods INTO lwa_method WITH KEY name = m_name BINARY SEARCH.

  IF syst-subrc = 0.
    rt_method_descr_wa = lwa_method.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_METHOD_TYPE" VERSION="1" LANGU="E" DESCRIPT="Getter for method type" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_METHOD_TYPE" SCONAME="RT_METHOD_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC method type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_METHOD_TYPE"/>
   <source>method GET_METHOD_TYPE.
  rt_method_type = m_method_type.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_PARAM" VERSION="1" LANGU="E" DESCRIPT="Getter for a method parameter" EXPOSURE="2" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_PARAM" SCONAME="IM_PARAM_NR" VERSION="1" LANGU="E" DESCRIPT="IC method parameter number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_PARAM_NR"/>
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_PARAM" SCONAME="RT_IC_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC method parameter" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_METHOD_PARAM"/>
   <source>METHOD get_param.

  rt_ic_param ?=  me-&gt;zif_ic_composite~get_child(
                       i_comp_type  = zcl_ic_object=&gt;c_method_param_type
                       i_object_nr  = im_param_nr ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_PARAMS" VERSION="1" LANGU="E" DESCRIPT="Get method parameters" EXPOSURE="2" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_PARAMS" SCONAME="E_METHOD_PARAMS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_IC_METHOD_PARAM=&gt;TY_METHOD_PARAMS"/>
   <source>METHOD get_params.
  DATA l_child TYPE zif_ic_component~ty_comp_tab_entry.

  LOOP AT m_childs INTO l_child WHERE comp_type = zcl_ic_object=&gt;c_method_param_type.
    DATA lo_param TYPE zcl_ic_method_param=&gt;ty_method_param.

    lo_param ?= l_child-comp.
    APPEND lo_param TO e_method_params.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_PARAM_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Get method param by name" EXPOSURE="2" STATE="1" EDITORDER="19 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_PARAM_BY_NAME" SCONAME="IM_PARAM_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME"/>
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="GET_PARAM_BY_NAME" SCONAME="RT_IC_PARAM" VERSION="1" LANGU="E" DESCRIPT="IC method parameter" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_METHOD_PARAM"/>
   <source>METHOD get_param_by_name.
  rt_ic_param ?=  me-&gt;zif_ic_composite~get_child_by_name( i_path_name  = im_param_name ).
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PARENT_OBJECT" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init.

  super-&gt;init( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_ACTIVE" VERSION="1" LANGU="E" DESCRIPT="Is this an active method" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_ACTIVE" SCONAME="RT_ACTIVE" VERSION="1" LANGU="E" DESCRIPT="IC Method is active or passive" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_METHOD_ACTIVE"/>
   <source>method IS_ACTIVE.
  rt_active = m_active.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="Is this method a constructor method" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_CONSTR_METHOD" SCONAME="RT_IS_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Is IC constructor method." CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD is_constr_method.

  IF m_method_type = c_constr_method.
    rt_is_constructor = abap_true.
  ELSE.
    rt_is_constructor = abap_false.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_GETTER_METHOD" VERSION="1" LANGU="E" DESCRIPT="Is this method a getter method" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_GETTER_METHOD" SCONAME="RT_IS_GETTER" VERSION="1" LANGU="E" DESCRIPT="Is method a getter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD is_getter_method.

  IF m_method_type = c_getter_method.
    rt_is_getter = abap_true.
  ELSE.
    rt_is_getter = abap_false.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_NORMAL_METHOD" VERSION="1" LANGU="E" DESCRIPT="Is this a normal method of a class" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_NORMAL_METHOD" SCONAME="RT_IS_NORMAL" VERSION="1" LANGU="E" DESCRIPT="Is this a normal method" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD is_normal_method.

  IF m_method_type = c_normal_method.
    rt_is_normal = abap_true.
  ELSE.
    rt_is_normal = abap_false.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_PASSIVE" VERSION="1" LANGU="E" DESCRIPT="Is this an passive method" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_PASSIVE" SCONAME="RT_PASSIVE" VERSION="1" LANGU="E" DESCRIPT="IC Method is active or passive" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_METHOD_ACTIVE"/>
   <source>METHOD is_passive.

  CASE m_active.
    WHEN abap_true.
      rt_passive = abap_false.
    WHEN abap_false.
      rt_passive = abap_true.
    WHEN OTHERS.
      rt_passive = abap_true.
  ENDCASE.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_SETTER_METHOD" VERSION="1" LANGU="E" DESCRIPT="Is this method a setter method" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="IS_SETTER_METHOD" SCONAME="RT_IS_SETTER" VERSION="1" LANGU="E" DESCRIPT="Is this method a setter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD is_setter_method.

  IF m_method_type = c_setter_method.
    rt_is_setter = abap_true.
  ELSE.
    rt_is_setter = abap_false.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="MAP_PARAMS" VERSION="1" LANGU="E" DESCRIPT="Map the parameters after execution" EXPOSURE="0" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_IC_METHOD" CMPNAME="MAP_PARAMS" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD map_params.
  DATA: lwa_param_binding TYPE abap_parmbind,
        lo_comp TYPE REF TO zif_ic_component.

  LOOP AT m_param_bindings INTO lwa_param_binding.

    lo_comp = zif_ic_composite~get_child_by_name( lwa_param_binding-name ).

    IF lo_comp IS NOT INITIAL
       AND  lo_comp-&gt;get_type( ) = zcl_ic_object=&gt;c_method_param_type.

      DATA: lo_param TYPE REF TO zcl_ic_method_param,
           lo_value TYPE REF TO zcl_ic_value.

      lo_param ?= lo_comp.
      lo_value = lo_param-&gt;get_ic_value( ).

      IF lo_param-&gt;is_referenced_param( ) = abap_true.
*       binding is alreay done in zcl_ic_method_param-&gt;CALC_PARAM_BINDING
        EXIT.
      ENDIF.

      WHILE lo_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_attrib
        OR lo_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_param.

        IF lo_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_attrib.
          DATA lo_attrib_value TYPE REF TO zcl_ic_class_attrib_value.

          lo_attrib_value ?= lo_value.
          lo_value = lo_attrib_value-&gt;get_ic_value( ).
        ENDIF.

        IF lo_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_param.
          DATA lo_param_value TYPE REF TO zcl_ic_method_param_value.

          lo_param_value ?= lo_value.
          lo_value = lo_param_value-&gt;get_ic_value( ).
        ENDIF.

      ENDWHILE.

      IF lo_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_data.
        DATA lo_data_value TYPE REF TO zcl_ic_data.

        lo_data_value ?= lo_value.
        lo_data_value-&gt;set_data_value_ref( lwa_param_binding-value ).
      ENDIF.

      IF lo_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_table.
        DATA: lo_table TYPE REF TO zcl_ic_table.

        lo_table ?= lo_value.
        lo_table-&gt;set_value_ref( lwa_param_binding-value ).
      ENDIF.

      IF lo_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_object.
        FIELD-SYMBOLS &lt;object&gt; TYPE any.

        DATA: lo_ic_value TYPE REF TO zcl_ic_class_value,
              lo_object TYPE REF TO object.

        lo_ic_value ?= lo_value.

        ASSIGN lwa_param_binding-value-&gt;* TO &lt;object&gt;.

        lo_object ?= &lt;object&gt;.
        lo_ic_value-&gt;get_ic_class( )-&gt;set_object( lo_object ).

        lo_ic_value-&gt;get_ic_class( )-&gt;zif_ic_wirable~wire( ).
      ENDIF.

    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="PROMOTE_TO_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Promote method to constructor method" EXPOSURE="2" STATE="1" EDITORDER="20 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="PROMOTE_TO_CONSTRUCTOR" SCONAME="I_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Container Context Method" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_METHOD"/>
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="PROMOTE_TO_CONSTRUCTOR" SCONAME="RT_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC constructor method" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CONSTR_METHOD"/>
   <source>METHOD promote_to_constructor.
  DATA: lo_constr_method TYPE REF TO zcl_ic_constr_method,
        lo_subtype TYPE string.

  IF i_method IS INITIAL.
    RETURN.
  ENDIF.

  lo_subtype = zcl_ic_method=&gt;c_constr_method.

  lo_constr_method ?= zcl_ic_object=&gt;instance(
                               i_obj_type = zcl_ic_object=&gt;c_method_type
                               i_parent = i_method-&gt;get_parent( )
                               i_sub_type = lo_subtype  ).

  lo_constr_method-&gt;zif_ic_component~fill_by_struct( i_method-&gt;zif_ic_component~get_obj_struct( ) ).

  rt_constr_method = lo_constr_method.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="SET_IS_ACTIVE" VERSION="1" LANGU="E" DESCRIPT="Setter for active or passive method" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="SET_IS_ACTIVE" SCONAME="I_IS_ACTIVE" VERSION="1" LANGU="E" DESCRIPT="IC Method is active or passive" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_METHOD_ACTIVE"/>
   <source>method SET_IS_ACTIVE.
  m_active = i_is_active.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="SET_METHOD_TYPE" VERSION="1" LANGU="E" DESCRIPT="Setter for method type" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_METHOD" CMPNAME="SET_METHOD_TYPE" SCONAME="IM_METHOD_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC method type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_METHOD_TYPE"/>
   <source>METHOD set_method_type.
  m_method_type = im_method_type.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_MESSAGE_MANAGER" VERSION="1" LANGU="E" DESCRIPT="IC error manager" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_MESSAGE_MANAGER" CMPNAME="MESSAGE_MNGR" VERSION="1" LANGU="E" DESCRIPT="IC error manager" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_MESSAGE_MANAGER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_IC_MESSAGE_MANAGER" CMPNAME="ADD_ERROR_MESSAGE" VERSION="1" LANGU="E" DESCRIPT="Add a message from object" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_MESSAGE_MANAGER" CMPNAME="ADD_ERROR_MESSAGE" SCONAME="IM_ERROR_KEY" VERSION="1" LANGU="E" DESCRIPT="T100 Key with Parameters Mapped to Attribute Names" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCX_T100KEY"/>
   <parameter CLSNAME="ZCL_IC_MESSAGE_MANAGER" CMPNAME="ADD_ERROR_MESSAGE" SCONAME="IM_IC_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Validation possible IC object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_VALIDATE"/>
   <source>method ADD_ERROR_MESSAGE.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_MESSAGE_MANAGER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="constructor" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CONSTRUCTOR.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_MESSAGE_MANAGER" CMPNAME="INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Singleton instance" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_MESSAGE_MANAGER" CMPNAME="INSTANCE" SCONAME="RT_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="IC error manager" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_MESSAGE_MANAGER"/>
   <source>METHOD instance.

  IF message_mngr IS BOUND.
    CREATE OBJECT message_mngr.
  ENDIF.

  rt_instance = message_mngr.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Class" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_IMPL_COMP">
  <types CLSNAME="ZCL_IC_CLASS" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZIC_CLASS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CLASS" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="17 " SRCCOLUMN2="36 " TYPESRC_LENG="120 " TYPESRC="BEGIN OF ty_object_key ,
                    class_nr TYPE zic_class-class_nr,
                END  OF ty_object_key
"/>
  <types CLSNAME="ZCL_IC_CLASS" CMPNAME="TY_CLASS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZCL_IC_CLASS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CLASS" CMPNAME="TY_CLASSES" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="20 " SRCCOLUMN1="4 " SRCROW2="20 " SRCCOLUMN2="36 " TYPESRC_LENG="35 " TYPESRC="ty_classes TYPE TABLE OF ty_class
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_CLASS" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <typeClasDef CLSNAME="ZCL_IC_CLASS" TYPEGROUP="ZCL_IC_CLASS_ATTRIB" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <typeClasDef CLSNAME="ZCL_IC_CLASS" TYPEGROUP="ZCL_IC_METHOD" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_IC_CLASS" CMPNAME="C_CLASS_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_CLASS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CLASS" CMPNAME="M_CLASS_DESCR" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ABAP_CLASSDESCR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CLASS" CMPNAME="M_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CLSNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CLASS" CMPNAME="M_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_CONSTR_METHOD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CLASS" CMPNAME="M_DEFAULT_CONSTR" VERSION="1" LANGU="E" DESCRIPT="Has IC Default Constructor" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTVALUE="ABAP_TRUE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CLASS_DEFCONSTR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CLASS" CMPNAME="M_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Generated Object" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CLASS" CMPNAME="M_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Type Name" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CLSNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_COMPOSITE~ADD" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_RELATIONS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_VALIDATING~VALIDATE" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_WIRABLE~WIRE" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.

    FIELD-SYMBOLS: &lt;lwa_ic_class&gt; TYPE any.
    DATA l_struct TYPE ty_object.

    ASSIGN i_structure-&gt;* TO &lt;lwa_ic_class&gt;.

    MOVE-CORRESPONDING &lt;lwa_ic_class&gt; TO  l_struct.

* move data
    IF NOT l_struct IS INITIAL.

      m_object_number = l_struct-class_nr.
      m_name = l_struct-impl_name.
      m_description = l_struct-description.
      m_rank = l_struct-rank.
      m_class_name = l_struct-class_name.
      m_return_class_name = l_struct-return_class_name.
      m_default_constr = l_struct-default_constr.
    ENDIF.

    init( ).

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~FILL_BY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>METHOD zif_ic_meta_info~get_key_struct.

    FIELD-SYMBOLS &lt;lwa_ic_class_key&gt; TYPE ty_object_key.
    DATA lwa_ic_class_key TYPE ty_object_key.

*   fill key data
    lwa_ic_class_key-class_nr = get_object_nr( ).


    CREATE DATA rt_comp_key_struct TYPE ty_object_key.
    ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_class_key&gt;.

    &lt;lwa_ic_class_key&gt; = lwa_ic_class_key.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_KEY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.

    FIELD-SYMBOLS &lt;lwa_ic_class&gt; TYPE ty_object.
    DATA lwa_ic_class TYPE ty_object.

* fill fields
    lwa_ic_class-class_nr = zif_ic_component~get_object_nr( ).
    lwa_ic_class-impl_name = m_name.
    lwa_ic_class-description = m_description.
    lwa_ic_class-rank = m_rank.
    lwa_ic_class-class_name = m_class_name.
    lwa_ic_class-return_class_name = m_return_class_name.
    lwa_ic_class-default_constr = m_default_constr.
    lwa_ic_class-PATH = get_path( ).

    CREATE DATA rt_obj_struct TYPE ty_object.
    ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_class&gt;.

    &lt;lwa_ic_class&gt; = lwa_ic_class.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_OBJ_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS" CPDNAME="ZIF_IC_META_INFO~GET_RELATIONS">
   <source>method ZIF_IC_META_INFO~GET_RELATIONS.
  DATA: lwa_rel TYPE zif_ic_meta_info~ty_relation.

  super-&gt;zif_ic_meta_info~get_relations( IMPORTING ex_relations = ex_relations ).

* Add relation 1
  clear lwa_rel.

  lwa_rel-rel_type = &apos;CR&apos;.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_method_type.

  APPEND lwa_rel TO ex_relations.

* Add relation 1
  clear lwa_rel.

  lwa_rel-rel_type = &apos;CR&apos;.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_class_attrib_type.

  APPEND lwa_rel TO ex_relations.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD zif_ic_meta_info~get_table_name.
    rt_table_name = c_class_table.
  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_TABLE_NAME</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS" CPDNAME="ZIF_IC_VALIDATING~VALIDATE">
   <source>METHOD zif_ic_validating~validate.
  CONSTANTS: lc_field_cl_name TYPE typename VALUE &apos;ZIC_CLSNAME&apos;,
           lc_field_return TYPE typename VALUE &apos;ZIC_CLSNAME&apos;.

  DATA: lwa_msg TYPE scx_t100key.

  super-&gt;zif_ic_validating~validate( CHANGING ch_validate = ch_validate ).

* empty fields
  IF m_class_name IS INITIAL.
    CLEAR lwa_msg.
    lwa_msg = zcx_ic_error=&gt;err_empty_field.
    lwa_msg-attr1 = zcl_ic_utils=&gt;get_field_label( lc_field_cl_name ).

    ch_validate-&gt;add_ic_error( im_path = get_path( )
                               im_message = lwa_msg ).
  ENDIF.

  IF m_return_class_name IS INITIAL.
    CLEAR lwa_msg.
    lwa_msg = zcx_ic_error=&gt;err_empty_field.
    lwa_msg-attr1 = zcl_ic_utils=&gt;get_field_label( lc_field_return ).

    ch_validate-&gt;add_ic_error( im_path = get_path( )
                               im_message = lwa_msg ).
  ENDIF.

*class errors
  IF m_class_name IS NOT INITIAL.

    cl_abap_typedescr=&gt;describe_by_name(
        EXPORTING p_name = m_class_name
        EXCEPTIONS    type_not_found = 1
                      OTHERS         = 2 ).

    IF sy-subrc = 1.
      CLEAR lwa_msg.
      lwa_msg = zcx_ic_error=&gt;err_class_not_exist.
      lwa_msg-attr1 = m_class_name.

      ch_validate-&gt;add_ic_error( im_path = get_path( )
                                 im_message = lwa_msg ).
    ELSEIF sy-subrc = 2.
      CLEAR lwa_msg.
      lwa_msg = zcx_ic_error=&gt;err_class_not_inst.
      lwa_msg-attr1 = m_class_name.

      ch_validate-&gt;add_ic_error( im_path = get_path( )
                                 im_message = lwa_msg ).
    ENDIF.

  ENDIF.

  IF m_return_class_name IS NOT INITIAL.

    cl_abap_typedescr=&gt;describe_by_name(
        EXPORTING p_name = m_return_class_name
        EXCEPTIONS    type_not_found = 1
                      OTHERS         = 2 ).

    IF sy-subrc = 1.
      CLEAR lwa_msg.
      lwa_msg = zcx_ic_error=&gt;err_class_not_exist.
      lwa_msg-attr1 = m_return_class_name.

      ch_validate-&gt;add_ic_error( im_path = get_path( )
                                 im_message = lwa_msg ).
    ELSEIF sy-subrc = 2.
      CLEAR lwa_msg.
      lwa_msg = zcx_ic_error=&gt;err_class_not_inst.
      lwa_msg-attr1 = m_return_class_name.

      ch_validate-&gt;add_ic_error( im_path = get_path( )
                                 im_message = lwa_msg ).
    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS" CPDNAME="ZIF_IC_COMPOSITE~ADD">
   <source>METHOD zif_ic_composite~add.
  super-&gt;zif_ic_composite~add( i_component ).

  IF i_component-&gt;get_type( ) = zcl_ic_method=&gt;c_method_type.
    DATA lo_method TYPE REF TO zcl_ic_method.

    lo_method ?= i_component.

    IF lo_method-&gt;is_constr_method( ) = abap_true.
      DATA lo_constr_method TYPE REF TO zcl_ic_constr_method.

      lo_constr_method = zcl_ic_method=&gt;promote_to_constructor( lo_method ).
      set_constr_method( lo_constr_method ).

      INSERT lo_constr_method-&gt;zif_ic_component~tab_entry( ) INTO TABLE m_childs.
    ENDIF.
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS" CPDNAME="ZIF_IC_WIRABLE~WIRE">
   <source>METHOD zif_ic_wirable~wire.

  IF zif_ic_wirable~m_is_wired = abap_false.
    wire_constructor( ).
    wire_attribs( ).

    wire_methods( i_is_setter_wiring = abap_true ).
    wire_methods( ).

    zif_ic_wirable~m_is_wired = abap_true.
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS_NR" VERSION="1" LANGU="E" DESCRIPT="Class number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_IMPL_COMP_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" SCONAME="I_PARENT" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTEXT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Type Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLSNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" SCONAME="I_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Type Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLSNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" SCONAME="I_DEFAULT_CONSTR" VERSION="1" LANGU="E" DESCRIPT="Has default constructor" CMPTYPE="1" MTDTYPE="2" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLASS_DEFCONSTR" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="CONSTRUCTOR" SCONAME="I_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="TODO Foreign key to Method" CMPTYPE="1" MTDTYPE="2" EDITORDER="9 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="D" PAROPTIONL="X"/>
   <source>METHOD constructor.

    super-&gt;constructor(
      EXPORTING
        i_impl_comp_nr = i_class_nr
        i_name = i_name
        i_description = i_description
        i_type = zcl_ic_impl_comp=&gt;c_impl_class
        i_parent = i_parent
        i_rank = i_rank
      ).

    m_class_name = i_class_name.

    IF m_return_class_name IS NOT INITIAL.
      m_return_class_name = i_return_class_name.
    ELSE.
      m_return_class_name = m_class_name.
    ENDIF.

    m_default_constr = i_default_constr.

    init( ).
  ENDMETHOD.                    &quot;CONSTRUCTOR</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Getter of an Attribute" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_ATTRIB" SCONAME="IM_ATTRIB_NR" VERSION="1" LANGU="E" DESCRIPT="IC class attribute number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_ATTRIB_NR"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_ATTRIB" SCONAME="RT_IC_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB"/>
   <source>METHOD get_attrib.

  rt_ic_attrib ?=  me-&gt;zif_ic_composite~get_child(
                         i_comp_type  = zcl_ic_object=&gt;c_class_attrib_type
                         i_object_nr  = im_attrib_nr ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Get class attributes" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_ATTRIBS" SCONAME="E_ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Class attributes" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_IC_CLASS_ATTRIB=&gt;TY_CLASS_ATTRIBS"/>
   <source>METHOD get_attribs.
  DATA l_child TYPE zif_ic_component~ty_comp_tab_entry.

  LOOP AT m_childs INTO l_child WHERE comp_type = zcl_ic_class=&gt;c_class_attrib_type.
    DATA lo_attrib TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

    lo_attrib ?= l_child-comp.
    APPEND lo_attrib TO e_attribs.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_CLASS_DESCR" VERSION="1" LANGU="E" DESCRIPT="Gets the class description object" EXPOSURE="2" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_CLASS_DESCR" SCONAME="RT_CLASS_DESCR" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_CLASSDESCR"/>
   <source>METHOD get_class_descr.
  rt_class_descr = m_class_descr.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Get the class name of the impl. component." EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_CLASS_NAME" SCONAME="RT_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_CLSNAME"/>
   <source>method GET_CLASS_NAME.
  rt_class_name = m_class_name.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="Returns the constructor method" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_CONSTR_METHOD" SCONAME="RT_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC constructor method" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CONSTR_METHOD"/>
   <source>METHOD get_constr_method.
  DATA  lwa_child TYPE zif_ic_component=&gt;ty_comp_tab_entry.

  LOOP AT m_childs INTO lwa_child WHERE comp_type = zcl_ic_object=&gt;c_method_type.
    DATA lo_method TYPE REF TO zcl_ic_method.

    lo_method ?= lwa_child-comp.

    IF lo_method-&gt;is_constr_method( ) =  abap_true.
      rt_constr_method ?= lo_method.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_METHOD" VERSION="1" LANGU="E" DESCRIPT="Getter of a method" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_METHOD" SCONAME="IM_METHOD_NR" VERSION="1" LANGU="E" DESCRIPT="IC method number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_METHOD_NR"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_METHOD" SCONAME="RT_IC_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Container Context Method" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_METHOD"/>
   <source>method GET_METHOD.

   rt_ic_method ?=  me-&gt;zif_ic_composite~get_child(
                          i_comp_type  = zcl_ic_object=&gt;c_method_type
                          i_object_nr  = im_method_nr ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_METHODS" VERSION="1" LANGU="E" DESCRIPT="Returns the methods" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_METHODS" SCONAME="E_METHODS" VERSION="1" LANGU="E" DESCRIPT="IC Methods from the class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_IC_METHOD=&gt;TY_METHODS"/>
   <source>METHOD get_methods.

  DATA l_child TYPE zif_ic_component~ty_comp_tab_entry.


  LOOP AT m_childs INTO l_child WHERE comp_type = zcl_ic_class=&gt;c_method_type.
    DATA lo_method TYPE zcl_ic_method=&gt;ty_method.

    lo_method ?= l_child-comp.
    APPEND lo_method TO e_methods.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Getter for the generated class object" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_OBJECT" SCONAME="RT_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Returned class object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="OBJECT"/>
   <source>METHOD get_object.
  rt_object = m_object.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Get the return class name of the impl. component." EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="GET_RETURN_CLASS_NAME" SCONAME="RT_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_CLSNAME"/>
   <source>method GET_RETURN_CLASS_NAME.
  rt_class_name = m_return_class_name.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="HAS_DEFAULT_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Has class a default constructor" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="HAS_DEFAULT_CONSTRUCTOR" SCONAME="RT_HAS_DEF_CONSTR" VERSION="1" LANGU="E" DESCRIPT="Has IC default constructor" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_CLASS_DEFCONSTR"/>
   <source>METHOD has_default_constructor.
  rt_has_def_constr = m_default_constr.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init.
  super-&gt;init( ).

  IF m_class_name IS NOT INITIAL.
    DATA l_type_descr TYPE REF TO cl_abap_typedescr.

    cl_abap_typedescr=&gt;describe_by_name(
             EXPORTING p_name = m_class_name
             RECEIVING p_descr_ref =  l_type_descr
             EXCEPTIONS    type_not_found = 1
                           OTHERS         = 2 ).

    m_class_descr ?= l_type_descr.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Set the class name of the impl. component." EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_CLASS_NAME" SCONAME="I_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLSNAME"/>
   <source>method SET_CLASS_NAME.
  m_class_name = i_class_name.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="Sets the constructor method" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_CONSTR_METHOD" SCONAME="I_CONSTR_METHOD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONSTR_METHOD"/>
   <source>METHOD set_constr_method.
  m_constr_method = i_constr_method.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_DEFAULT_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Setter for has a default constructor" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_DEFAULT_CONSTRUCTOR" SCONAME="I_DEF_CONSTR" VERSION="1" LANGU="E" DESCRIPT="Has IC Default Constructor" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLASS_DEFCONSTR"/>
   <source>method SET_DEFAULT_CONSTRUCTOR.
  m_default_constr = i_def_constr.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Setter for the class object" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_OBJECT" SCONAME="I_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Class object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="OBJECT"/>
   <source>METHOD set_object.
  m_object = i_object.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="set the return class name of the impl. component." EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="SET_RETURN_CLASS_NAME" SCONAME="I_RETURN_CLASS_NAME" VERSION="1" LANGU="E" DESCRIPT="Class name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLSNAME"/>
   <source>method SET_RETURN_CLASS_NAME.
  m_return_class_name = i_return_class_name.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="WIRE_ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Wire class attributes" EXPOSURE="1" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_IC_CLASS" CMPNAME="WIRE_ATTRIBS" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD wire_attribs.
  DATA: lit_attribs TYPE zcl_ic_class_attrib=&gt;ty_class_attribs,
        lwa_attrib  TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

  get_attribs( IMPORTING e_attribs = lit_attribs ).

  LOOP AT lit_attribs INTO lwa_attrib.
    lwa_attrib-&gt;zif_ic_wirable~wire( ).
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="WIRE_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Build Constructor of the class object" EXPOSURE="1" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_IC_CLASS" CMPNAME="WIRE_CONSTRUCTOR" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD wire_constructor.

  IF m_default_constr = abap_true.
    CREATE OBJECT m_object TYPE (m_class_name).
  ELSE.
    IF get_constr_method( ) IS NOT INITIAL.
      get_constr_method( )-&gt;zif_ic_wirable~wire( ).
    ENDIF.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="WIRE_GETTER_ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Wire class attributes when getters" EXPOSURE="1" STATE="1" EDITORDER="19 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD wire_getter_attribs.
  DATA: lit_attribs TYPE zcl_ic_class_attrib=&gt;ty_class_attribs,
        lo_attrib  TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

  get_attribs( IMPORTING e_attribs = lit_attribs ).

*  LOOP AT lit_attribs INTO lo_attrib.
*
*    IF lo_attrib-&gt;get_ic_value( )-&gt;get_type( ) = zcl_ic_value=&gt;c_value_type_attrib.
*       DATA: lo_attrib_value TYPE REF TO zcl_ic_class_attrib_value.
*
*      break bcuser.
*     lo_attrib_value ?= lo_attrib-&gt;get_ic_value( ).
*
*     lo_attrib-&gt;get_ic_getter_method( )-&gt;get_class_attrib
*
*    ENDIF.
*
*  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS" CMPNAME="WIRE_METHODS" VERSION="1" LANGU="E" DESCRIPT="Wire methods" EXPOSURE="1" STATE="1" EDITORDER="20 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="WIRE_METHODS" SCONAME="I_IS_SETTER_WIRING" VERSION="1" LANGU="E" DESCRIPT="Is setter or no setter wiring" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_CLASS" CMPNAME="WIRE_METHODS" SCONAME="I_IS_GETTER_WIRING" VERSION="1" LANGU="E" DESCRIPT="Is getter or no getter wiring" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="SPACE"/>
   <exception CLSNAME="ZCL_IC_CLASS" CMPNAME="WIRE_METHODS" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD wire_methods.
  DATA: lo_methods TYPE zcl_ic_method=&gt;ty_methods,
      lo_method TYPE zcl_ic_method=&gt;ty_method.

  get_methods( IMPORTING e_methods = lo_methods ).

  LOOP AT lo_methods INTO lo_method.

    IF lo_method-&gt;is_constr_method( ) = abap_false
      AND lo_method-&gt;is_setter_method( ) = i_is_setter_wiring
      AND lo_method-&gt;is_getter_method( ) = i_is_getter_wiring.

      lo_method-&gt;zif_ic_wirable~wire( ).
    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_CLASS_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container class attribute" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZIC_CLASS_ATTRIB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" DESCRIPT="Attrib key" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="18 " SRCCOLUMN1="4 " SRCROW2="21 " SRCCOLUMN2="36 " TYPESRC_LENG="191 " TYPESRC="BEGIN OF ty_object_key ,
                    class_nr TYPE zic_class_attrib-class_nr,
                    ATTRIB_NR type zic_class_attrib-attrib_nr,
                END  OF ty_object_key
"/>
  <types CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="TY_CLASS_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Class attribs type" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="TY_CLASS_ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Class attribs type table" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="24 " SRCCOLUMN1="4 " SRCROW2="24 " SRCCOLUMN2="49 " TYPESRC_LENG="48 " TYPESRC="ty_class_attribs TYPE TABLE OF ty_class_attrib
"/>
  <implementing CLSNAME="ZCL_IC_CLASS_ATTRIB" REFCLSNAME="ZIF_IC_VALUEHOLDER" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="2 "/>
  <implementing CLSNAME="ZCL_IC_CLASS_ATTRIB" REFCLSNAME="ZIF_IC_WIRABLE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_CLASS_ATTRIB" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="C_CLASS_ATTRIB_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_CLASS_ATTRIB&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="M_IC_GETTER_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Getter method" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_GETTER_METHOD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="M_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_VALUE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="M_SETTER_INJ" VERSION="1" LANGU="E" DESCRIPT="IC Setter Injection" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTVALUE="&apos;X&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_SETTER_INJ" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_CLASS_ATTRIB" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB" REFCLSNAME="ZCL_IC_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="0"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_ATTRIB" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.

    FIELD-SYMBOLS: &lt;lwa_ic_class_attrib&gt; TYPE any.
    DATA l_struct TYPE ty_object.

    ASSIGN i_structure-&gt;* TO &lt;lwa_ic_class_attrib&gt;.

    MOVE-CORRESPONDING &lt;lwa_ic_class_attrib&gt; TO  l_struct.

*   move data
    IF NOT l_struct IS INITIAL.

      IF NOT l_struct-attrib_nr IS INITIAL.
        m_object_number = l_struct-attrib_nr.
      ENDIF.

      IF NOT l_struct-attrib_name IS INITIAL.
        m_name = l_struct-attrib_name.
      ENDIF.

      IF NOT l_struct-description IS INITIAL.
        m_description = l_struct-description.
      ENDIF.

      IF NOT l_struct-rank IS INITIAL.
        m_rank = l_struct-rank.
      ENDIF.
&quot;TODO hierna weg ??
&quot;TODO + tables aanpassen =&gt; velden verwijderen in zic_class_attrib + zic_method_param
      IF l_struct-value_type IS NOT INITIAL.
        DATA: lo_ic_class TYPE REF TO zcl_ic_class,
              lo_ic_method TYPE REF TO zcl_ic_method,
              lo_ic_param  TYPE REF TO zcl_ic_method_param.
*        &quot;TODO move method to zcl_ic_value, is the same as in zcl_ic_method_param
*        IF l_struct-value_type = zcl_ic_value=&gt;c_value_type_data.
*
*          IF NOT l_struct-data_type IS INITIAL.
*
*            m_ic_value = zcl_ic_data=&gt;create(
*                               i_data_type = l_struct-data_type
*                               i_data_value = l_struct-data_value ).
*          ENDIF.
*        ENDIF.
*
*        IF l_struct-value_type = zcl_ic_value=&gt;c_value_type_table.
*
*          IF NOT l_struct-table_name IS INITIAL.
*            m_ic_value = zcl_ic_table=&gt;create( i_table_name = l_struct-table_name ).
*          ENDIF.
*        ENDIF.
*
*        IF l_struct-value_type = zcl_ic_value=&gt;c_value_type_object.
*
*          lo_ic_class ?= get_class( )-&gt;get_parent( )-&gt;get_child(
*                                              i_comp_type = zcl_ic_object=&gt;c_class_type
*                                              i_object_nr = l_struct-ic_class ).
*
*          m_ic_value = zcl_ic_class_value=&gt;create( i_ic_class = lo_ic_class ).
*        ENDIF.

*        IF l_struct-value_type = zcl_ic_value=&gt;c_value_type_param.
*
*          lo_ic_class ?= get_class( )-&gt;get_parent( )-&gt;get_child(
*                                              i_comp_type = zcl_ic_object=&gt;c_class_type
*                                              i_object_nr = l_struct-ic_param_class ).
*          lo_ic_method ?= lo_ic_class-&gt;zif_ic_composite~get_child(
*                                              i_comp_type = zcl_ic_object=&gt;c_method_type
*                                              i_object_nr = l_struct-ic_param_method ).
*          lo_ic_param ?= lo_ic_method-&gt;zif_ic_composite~get_child(
*                                              i_comp_type = zcl_ic_object=&gt;c_method_param_type
*                                              i_object_nr = l_struct-ic_param ).
*
*          m_ic_value = zcl_ic_method_param_value=&gt;create( i_ic_param = lo_ic_param ).
*        ENDIF.

      ENDIF.

    ENDIF.

    init( ).

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~FILL_BY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_ATTRIB" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>METHOD zif_ic_meta_info~get_key_struct.

    FIELD-SYMBOLS &lt;lwa_ic_attrib_key&gt; TYPE ty_object_key.
    DATA lwa_ic_attrib_key TYPE ty_object_key.

*   fill key data
    lwa_ic_attrib_key-class_nr = get_class( )-&gt;get_object_nr( ).

    lwa_ic_attrib_key-attrib_nr = get_object_nr( ).

    CREATE DATA rt_comp_key_struct TYPE ty_object_key.
    ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_attrib_key&gt;.

    &lt;lwa_ic_attrib_key&gt; = lwa_ic_attrib_key.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_KEY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_ATTRIB" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.

    FIELD-SYMBOLS &lt;lwa_ic_class_attrib&gt; TYPE ty_object.
    DATA lwa_ic_class_attrib TYPE ty_object.

*   fill fields
    lwa_ic_class_attrib-class_nr = get_class( )-&gt;get_object_nr( ).
    lwa_ic_class_attrib-attrib_nr = zif_ic_component~get_object_nr( ).

    lwa_ic_class_attrib-attrib_name = m_name.
    lwa_ic_class_attrib-description = m_description.
    lwa_ic_class_attrib-rank = m_rank.

    IF m_ic_value IS NOT INITIAL.
      lwa_ic_class_attrib-ic_value = m_ic_value-&gt;get_object_nr( ).
    ENDIF.

    IF m_ic_value IS NOT INITIAL.
      lwa_ic_class_attrib-value_type = m_ic_value-&gt;get_value_type( ).

      IF m_ic_value-&gt;get_value_type( ) = m_ic_value-&gt;c_value_type_data.
        DATA lo_data TYPE REF TO zcl_ic_data.

        lo_data ?= m_ic_value.
        lwa_ic_class_attrib-data_type = lo_data-&gt;get_data_type( ).
        lwa_ic_class_attrib-data_value = lo_data-&gt;get_data_value( ).

      ELSEIF m_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_table.
        DATA lo_table TYPE REF TO zcl_ic_table.

        lo_table ?= m_ic_value.
        lwa_ic_class_attrib-table_name = lo_table-&gt;get_table_name( ).

      ELSEIF m_ic_value-&gt;get_value_type( ) = m_ic_value-&gt;c_value_type_object.
        DATA lo_class_value TYPE REF TO zcl_ic_class_value.

        lo_class_value ?= m_ic_value.

        IF lo_class_value-&gt;get_ic_class( ) IS BOUND.
          lwa_ic_class_attrib-ic_class = lo_class_value-&gt;get_ic_class( )-&gt;get_object_nr( ).
        ENDIF.
      ELSEIF m_ic_value-&gt;get_value_type( ) = m_ic_value-&gt;c_value_type_param.
        DATA lo_param_value TYPE REF TO zcl_ic_method_param_value.

        lo_param_value ?= m_ic_value.

        IF lo_param_value-&gt;get_ic_method_param( ) IS BOUND.
          lwa_ic_class_attrib-ic_param_class = lo_param_value-&gt;get_ic_method_param( )-&gt;get_class( )-&gt;get_object_nr( ).
          lwa_ic_class_attrib-ic_param_method = lo_param_value-&gt;get_ic_method_param( )-&gt;get_method( )-&gt;get_object_nr( ).
          lwa_ic_class_attrib-ic_param = lo_param_value-&gt;get_ic_method_param( )-&gt;get_object_nr( ).
        ENDIF.
      ENDIF.
    ENDIF.

    CREATE DATA rt_obj_struct TYPE ty_object.
    ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_class_attrib&gt;.

    &lt;lwa_ic_class_attrib&gt; = lwa_ic_class_attrib.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_OBJ_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_ATTRIB" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD ZIF_IC_META_INFO~GET_TABLE_NAME.
    rt_table_name = c_class_attrib_table.
  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_TABLE_NAME</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_ATTRIB" CPDNAME="ZIF_IC_WIRABLE~WIRE">
   <source>METHOD zif_ic_wirable~wire.

  IF get_class( ) IS INITIAL.
    &quot;todo throw error
  ENDIF.

  IF m_setter_inj = abap_true.
    wire_getter_inj( ).
    wire_setter_inj( ).
  ELSE.
*   Member Injection
    DATA: lit_attribs TYPE abap_attrdescr_tab,
          lwa_attrib TYPE abap_attrdescr.

    lit_attribs = get_class( )-&gt;get_class_descr( )-&gt;attributes.

    LOOP AT lit_attribs INTO lwa_attrib.

      IF m_name = lwa_attrib-name.
        &quot;TODO
        break bcuser.
      ENDIF.

    ENDLOOP.

  ENDIF.

  zif_ic_wirable~m_is_wired = abap_true.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_ATTRIB" CPDNAME="ZIF_IC_VALUEHOLDER~GET_IC_VALUE">
   <source>method ZIF_IC_VALUEHOLDER~GET_IC_VALUE.
  rt_ic_value = m_ic_value.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_ATTRIB" CPDNAME="ZIF_IC_VALUEHOLDER~SET_IC_VALUE">
   <source>METHOD zif_ic_valueholder~set_ic_value.
  m_ic_value = i_ic_value.
ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="CONSTRUCTOR" SCONAME="I_ATTRIB_NR" VERSION="1" LANGU="E" DESCRIPT="IC class attribute number" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_ATTRIB_NR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="CONSTRUCTOR" SCONAME="I_ATTRIB_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <source>METHOD CONSTRUCTOR.

    super-&gt;constructor(
      EXPORTING
        i_object_nr = i_attrib_nr
        i_name = i_attrib_name
        i_description = i_description
        i_rank = i_rank
        i_type = zcl_ic_object=&gt;c_class_attrib_type
      ).

    IF i_class IS NOT INITIAL.
      m_parent = i_class.
    ENDIF.

    init( ).
    add_to_parent( ).

  ENDMETHOD.                    &quot;CONSTRUCTOR</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="GET_CLASS" VERSION="1" LANGU="E" DESCRIPT="Getter for the method" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="GET_CLASS" SCONAME="RT_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context Method" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>method GET_CLASS.
  rt_class ?= m_parent.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="GET_IC_GETTER_METHOD" VERSION="1" LANGU="E" DESCRIPT="Get the value of the GETTER of the attribute" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="GET_IC_GETTER_METHOD" SCONAME="RT_IC_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Getter method" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_GETTER_METHOD"/>
   <source>METHOD GET_IC_GETTER_METHOD.
 rt_ic_method = m_ic_getter_method.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_OBJECT" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD INIT.

  super-&gt;init( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="IS_SETTER_INJ" VERSION="1" LANGU="E" DESCRIPT="Is this method a constructor method" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="IS_SETTER_INJ" SCONAME="RT_IS_SETTER_INJ" VERSION="1" LANGU="E" DESCRIPT="IC Setter Injection" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_SETTER_INJ"/>
   <source>METHOD is_setter_inj.
  rt_is_setter_inj = m_setter_inj.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="WIRE_GETTER_INJ" VERSION="1" LANGU="E" DESCRIPT="Wire getter injection" EXPOSURE="1" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD wire_getter_inj.
  CONSTANTS lc_method_get TYPE char4 VALUE &apos;GET_&apos;.

  wire_inj( EXPORTING is_setter_inj = abap_false
                      im_method_prefix = lc_method_get ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="WIRE_INJ" VERSION="1" LANGU="E" DESCRIPT="Wire injection" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="WIRE_INJ" SCONAME="IS_SETTER_INJ" VERSION="1" LANGU="E" DESCRIPT="Is setter injection" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="WIRE_INJ" SCONAME="IM_METHOD_PREFIX" VERSION="1" LANGU="E" DESCRIPT="Set/Get method prefix" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR4"/>
   <source>METHOD wire_inj.
  DATA: lit_methods TYPE abap_methdescr_tab,
        lwa_method TYPE abap_methdescr.

  lit_methods = get_class( )-&gt;get_class_descr( )-&gt;methods.

  LOOP AT lit_methods INTO lwa_method.
    DATA: l_method_name TYPE abap_methname,
      lo_method_set TYPE REF TO zcl_ic_setter_method,
      lo_method_get TYPE REF TO zcl_ic_getter_method,
      l_method_ic_name TYPE zic_name,
      l_method_nr  TYPE zic_object_nr,
      l_rank TYPE zic_rank,
      lo_value_obj TYPE REF TO zcl_ic_class_value.

*   look for Setter methods
    l_method_name = im_method_prefix &amp;&amp; m_name.

    IF l_method_name = lwa_method-name.

      l_method_name = im_method_prefix &amp;&amp; m_name.

      l_method_ic_name = lwa_method-name.
      l_method_nr = 99999 + m_object_number.

      IF  m_ic_value IS BOUND.
        IF m_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_object.

          lo_value_obj ?= m_ic_value.

          IF lo_value_obj-&gt;get_object_value( ) IS NOT BOUND.
            lo_value_obj-&gt;get_ic_class( )-&gt;zif_ic_wirable~wire( ).
          ENDIF.

        ELSEIF m_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_attrib.
          DATA lo_value_att TYPE REF TO zcl_ic_class_attrib_value.

          lo_value_att ?= m_ic_value.

          IF lo_value_att-&gt;get_ic_class_attrib( ) IS BOUND
            AND lo_value_att-&gt;get_ic_class_attrib( )-&gt;get_class( )-&gt;get_object( ) IS NOT BOUND.

            lo_value_att-&gt;get_ic_class_attrib( )-&gt;get_class( )-&gt;zif_ic_wirable~wire( ).
          ENDIF.
        ENDIF.
      ENDIF.

      IF is_setter_inj = abap_true.
        CREATE OBJECT lo_method_set
          EXPORTING
            i_class        = get_class( )
            i_method_nr    = l_method_nr
            i_method_name  = l_method_ic_name
            i_rank         = l_rank
            i_class_attrib = me.
      ELSE.

        DATA: lo_attrib TYPE REF TO zcl_ic_class_attrib,
              lo_ic_value TYPE REF TO zcl_ic_value,
              l_subtype TYPE string.

*        lo_attrib ?= zcl_ic_object=&gt;instance( i_parent = get_class( )
*                                              i_obj_type = zcl_ic_object=&gt;c_class_attrib_type ).
*        lo_attrib-&gt;zif_ic_component~fill_by_struct( me-&gt;zif_ic_component~get_obj_struct( ) ).
*        lo_attrib-&gt;set_ic_value( m_ic_value ).
*        &quot;TODO range??? objectid
        l_method_nr = 99999 + m_object_number + 500.

        CREATE OBJECT lo_method_get
          EXPORTING
            i_class        = get_class( )
            i_method_nr    = l_method_nr
            i_method_name  = l_method_ic_name
            i_rank         = l_rank
            i_class_attrib = me.

        lo_method_get-&gt;set_is_active( abap_false ).
        m_ic_getter_method = lo_method_get.
      ENDIF.
    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="WIRE_SETTER_INJ" VERSION="1" LANGU="E" DESCRIPT="Wire setter injection" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD wire_setter_inj.
  CONSTANTS lc_method_set TYPE char4 VALUE &apos;SET_&apos;.

  wire_inj( EXPORTING is_setter_inj = abap_true
                      im_method_prefix = lc_method_set ).

ENDMETHOD.</source>
  </method>
  <aliasMethod CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="GET_IC_VALUE" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_VALUEHOLDER" REFCMPNAME="GET_IC_VALUE"/>
  <aliasMethod CLSNAME="ZCL_IC_CLASS_ATTRIB" CMPNAME="SET_IC_VALUE" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_VALUEHOLDER" REFCMPNAME="SET_IC_VALUE"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Method as Value Object" CATEGORY="00" EXPOSURE="1" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_VALUE">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="M_IC_CLASS_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE_REF" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="0"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD ZIF_IC_META_INFO~FILL_BY_STRUCT.
  FIELD-SYMBOLS: &lt;lwa_ic_value&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_value&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_value&gt; TO l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-value_nr IS INITIAL.
      m_object_number = l_struct-value_nr.
    ENDIF.

    IF NOT l_struct-value_name IS INITIAL.
      m_name = l_struct-value_name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-rank IS INITIAL.
      m_rank = l_struct-rank.
    ENDIF.

  ENDIF.

  init( ).
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD ZIF_IC_META_INFO~GET_OBJ_STRUCT.
  FIELD-SYMBOLS &lt;lwa_ic_value&gt; TYPE zcl_ic_value=&gt;ty_object.
  DATA lwa_ic_value TYPE ty_object.

* fill fields
  lwa_ic_value-value_nr = zif_ic_component~get_object_nr( ).
  lwa_ic_value-value_name = zif_ic_component~get_name( ).
  lwa_ic_value-value_type = get_value_type( ).
  lwa_ic_value-description = get_description( ).
  lwa_ic_value-rank = get_rank( ).

  lwa_ic_value-ic_attrib_class = get_ic_class_attrib( )-&gt;get_class( )-&gt;get_object_nr( ).
  lwa_ic_value-ic_attrib = get_ic_class_attrib( )-&gt;get_object_nr( ).

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_value&gt;.

  &lt;lwa_ic_value&gt; = lwa_ic_value.

ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="I_IC_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB"/>
   <source>METHOD CONSTRUCTOR.

  super-&gt;constructor( i_value_type = zcl_ic_value=&gt;c_value_type_attrib ).

  m_ic_class_attrib = i_ic_attrib.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create Data value" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="CREATE" SCONAME="I_IC_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB"/>
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="CREATE" SCONAME="RT_IC_ATTRIB_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Method as Value Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB_VALUE"/>
   <source>METHOD CREATE.

  CREATE OBJECT rt_ic_attrib_value
    EXPORTING
      i_ic_attrib = i_ic_attrib.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="EXECUTE_METHOD" VERSION="1" LANGU="E" DESCRIPT="Execute the method to fill method parameters" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD execute_method.
  DATA lo_method TYPE REF TO zcl_ic_method.

  IF m_ic_class_attrib IS INITIAL
    OR m_ic_class_attrib-&gt;get_ic_getter_method( ) IS INITIAL.
*    TODO throw error
    RETURN.
  ENDIF.

  lo_method = m_ic_class_attrib-&gt;get_ic_getter_method( ).

* if method is active, method is already executed
  IF lo_method-&gt;is_active( ) = abap_false.

    lo_method-&gt;set_is_active( abap_true ).
    lo_method-&gt;zif_ic_wirable~wire( ).
*   TODO try catch : in finally block Method has to be passive again !!!!!!!!!!!!!
    lo_method-&gt;set_is_active( abap_false ).

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="GET_IC_CLASS_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Getter for value object IC-attribute" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="GET_IC_CLASS_ATTRIB" SCONAME="RT_IC_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB"/>
   <source>method GET_IC_CLASS_ATTRIB.
  rt_ic_attrib = m_ic_class_attrib.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="GET_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="Getter for the ic value" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="GET_IC_VALUE" SCONAME="I_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_VALUE"/>
   <source>METHOD GET_IC_VALUE.

  IF m_ic_class_attrib IS NOT INITIAL.
    i_value =  m_ic_class_attrib-&gt;get_ic_value( ).
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value.

  execute_method( ).

  IF m_ic_class_attrib-&gt;get_ic_getter_method( ) IS NOT INITIAL
    AND m_ic_class_attrib-&gt;get_ic_getter_method( )-&gt;get_param_binding_ref( ) IS BOUND.

    e_value = m_ic_class_attrib-&gt;get_ic_getter_method( )-&gt;get_param_binding_ref( ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_REF" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value_ref.

  execute_method( ).

  IF m_ic_class_attrib-&gt;get_ic_getter_method( ) IS NOT INITIAL
  AND m_ic_class_attrib-&gt;get_ic_getter_method( )-&gt;get_param_binding_ref( ) IS BOUND.

    rt_value_ref = m_ic_class_attrib-&gt;get_ic_getter_method( )-&gt;get_param_binding_ref( ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method INIT.
  super-&gt;init( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="SET_IC_CLASS_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="Setter for value object from IC-attribute" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_ATTRIB_VALUE" CMPNAME="SET_IC_CLASS_ATTRIB" SCONAME="IM_IC_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB"/>
   <source>METHOD set_ic_class_attrib.
  m_ic_class_attrib = im_ic_attrib.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_CLASS_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Class as Value Object" CATEGORY="00" EXPOSURE="1" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_VALUE">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="M_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_CLASS_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_CLASS_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE_REF" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CLASS_VALUE" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_VALUE" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>method ZIF_IC_META_INFO~FILL_BY_STRUCT.
  FIELD-SYMBOLS: &lt;lwa_ic_VALUE&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_VALUE&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_VALUE&gt; TO l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-value_nr IS INITIAL.
      m_object_number = l_struct-value_nr.
    ENDIF.

    IF NOT l_struct-VALUE_NAME IS INITIAL.
      m_name = l_struct-value_name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-rank IS INITIAL.
      m_rank = l_struct-rank.
    ENDIF.

  ENDIF.

  init( ).
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CLASS_VALUE" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.
  FIELD-SYMBOLS &lt;lwa_ic_value&gt; TYPE zcl_ic_value=&gt;ty_object.
  DATA lwa_ic_value TYPE ty_object.

* fill fields
  lwa_ic_value-value_nr = zif_ic_component~get_object_nr( ).
  lwa_ic_value-value_name = zif_ic_component~get_name( ).
  lwa_ic_value-value_type = get_value_type( ).
  lwa_ic_value-description = get_description( ).
  lwa_ic_value-rank = get_rank( ).
  lwa_ic_value-ic_class = get_ic_class( )-&gt;get_object_nr( ).

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_value&gt;.

  &lt;lwa_ic_value&gt; = lwa_ic_value.
ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="CONSTRUCTOR" SCONAME="I_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>METHOD constructor.
  super-&gt;constructor( i_value_type = zcl_ic_value=&gt;c_value_type_object ).

  m_ic_class = i_ic_class.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create Data value" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="CREATE" SCONAME="I_IC_CLASS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <parameter CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="CREATE" SCONAME="RT_IC_CLASS_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Class as Value Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS_VALUE"/>
   <source>METHOD create.

  CREATE OBJECT rt_ic_class_value
    EXPORTING
      i_ic_class = i_ic_class.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="GET_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="Getter for value object from IC-class" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="GET_IC_CLASS" SCONAME="RT_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>method GET_IC_CLASS.
  rt_ic_class = m_ic_class.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="GET_OBJECT_VALUE" VERSION="1" LANGU="E" DESCRIPT="Getter for object of IC-class" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="GET_OBJECT_VALUE" SCONAME="RT_OBJECT_VALUE" VERSION="1" LANGU="E" DESCRIPT="Object from IC class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="OBJECT"/>
   <source>METHOD get_object_value.

  IF m_ic_class IS NOT INITIAL.
    rt_object_value = m_ic_class-&gt;get_object( ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value.

  e_value = get_object_value( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_REF" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value_ref.
  FIELD-SYMBOLS: &lt;value&gt; TYPE any.
  DATA: l_class_name TYPE seoclsname,
        lo_object TYPE REF TO object.

  IF i_type_name IS INITIAL.
    l_class_name = get_ic_class( )-&gt;get_return_class_name( ).
  ELSE.
    l_class_name = i_type_name.
  ENDIF.

  CREATE DATA rt_value_ref TYPE REF TO (l_class_name).
  ASSIGN rt_value_ref-&gt;* TO &lt;value&gt;.

  &lt;value&gt; ?= get_object_value( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init.
  super-&gt;init( ).
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="SET_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="Setter for value object from IC-class" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CLASS_VALUE" CMPNAME="SET_IC_CLASS" SCONAME="IM_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>METHOD set_ic_class.
  m_ic_class = im_ic_class.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_COMMAND_MANAGER" VERSION="1" LANGU="E" DESCRIPT="Command manager" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_COMMAND_MANAGER" CMPNAME="T_COMMANDS" VERSION="1" LANGU="E" DESCRIPT="Command object" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="49 " TYPESRC_LENG="48 " TYPESRC="T_COMMANDS type table of ref to ZIF_IC_COMMAND
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_COMMAND_MANAGER" CMPNAME="COMMAND_LIST" VERSION="1" LANGU="E" DESCRIPT="Command object list" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="T_COMMANDS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_IC_COMMAND_MANAGER" CMPNAME="EXECUTE_COMMAND" VERSION="1" LANGU="E" DESCRIPT="Execute command" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_COMMAND_MANAGER" CMPNAME="EXECUTE_COMMAND" SCONAME="IM_COMMAND" VERSION="1" LANGU="E" DESCRIPT="Command object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMMAND"/>
   <source>METHOD execute_command.

  im_command-&gt;execute( ).
  APPEND im_command TO command_list.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_COMMAND_MANAGER" CMPNAME="ROLLBACK" VERSION="1" LANGU="E" DESCRIPT="Rollback command" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD rollback.
  DATA: l_last_record TYPE i,
        lo_command TYPE REF TO  zif_ic_command.

  l_last_record = lines( command_list ).

  READ TABLE command_list INDEX l_last_record INTO lo_command.

  IF lo_command IS BOUND.
    lo_command-&gt;rollback( ).
    DELETE command_list INDEX l_last_record.
  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_CONSTR_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC constructor method" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_METHOD">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="C_DEFAULT_NAME" VERSION="1" LANGU="E" DESCRIPT="Constructor Default Name" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;CONSTRUCTOR&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_NAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="M_CONSTR_INJ_OBJ" VERSION="1" LANGU="E" DESCRIPT="Constructor Injection Object" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="M_INJ_PARAM_NAME" VERSION="1" LANGU="E" DESCRIPT='Parameter Name for &quot;SAPOSCOL&quot;' EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_CONSTR_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_CONSTR_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" MTDNAME="BUILD_PARAM_BINDINGS" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCL_IC_CONSTR_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" MTDNAME="EXECUTE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCL_IC_CONSTR_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
  </inheritance>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="BUILD_PARAM_BINDINGS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD build_param_bindings.
  DATA: lit_params TYPE abap_parmdescr_tab,
        lwa_param TYPE abap_parmdescr.

  DATA: l_method_name TYPE seoclsname,
        lit_methods TYPE abap_methdescr_tab,
        lwa_method TYPE abap_methdescr.

  super-&gt;build_param_bindings( ).

  IF m_name = c_default_name.
*   Default method has no need for a Setter
    RETURN.
  ENDIF.

* Constructor method
  l_method_name = get_name( ).
  lit_methods = get_class( )-&gt;get_class_descr( )-&gt;methods.

  READ TABLE lit_methods INTO lwa_method
                WITH TABLE KEY name = l_method_name.

  IF lwa_method IS INITIAL.
    RETURN.
  ENDIF.

  lit_params = lwa_method-parameters.

* Search for method with the same Return / Export parameter as the class has
  LOOP AT lit_params INTO lwa_param WHERE type_kind = cl_abap_classdescr=&gt;typekind_oref
                                        AND  ( parm_kind = cl_abap_objectdescr=&gt;returning
                                            OR parm_kind = cl_abap_objectdescr=&gt;exporting ).
    DATA lo_data_descr TYPE REF TO cl_abap_datadescr.

    lo_data_descr = get_class( )-&gt;get_class_descr( )-&gt;get_method_parameter_type(
                               p_method_name = l_method_name
                               p_parameter_name = lwa_param-name ).

    IF lo_data_descr IS NOT INITIAL.
      DATA: lo_ref_descr TYPE REF TO cl_abap_refdescr,
            lo_class_temp TYPE REF TO cl_abap_classdescr.

      lo_ref_descr ?= lo_data_descr.
      lo_class_temp ?= lo_ref_descr-&gt;get_referenced_type( ).

      IF lo_class_temp-&gt;get_relative_name( ) = get_class( )-&gt;get_class_name( )
          OR lo_class_temp-&gt;get_relative_name( ) = get_class( )-&gt;get_return_class_name( ).

        DATA: lo_value_obj TYPE REF TO zcl_ic_class_value,
              lo_param TYPE REF TO zcl_ic_method_param,
              lwa_param_bind TYPE abap_parmbind,
              l_obj_nr      TYPE zic_object_nr.

        lo_param ?= zcl_ic_object=&gt;instance( i_obj_type = zcl_ic_object=&gt;c_method_param_type
                                             i_parent = me ).

        l_obj_nr =  9000 + sy-tabix.
        lo_param-&gt;zif_ic_component~set_object_nr( l_obj_nr ).

        lo_value_obj = zcl_ic_class_value=&gt;create( i_ic_class = get_class( ) ).

        lo_param-&gt;set_ic_value( lo_value_obj ).
        lo_param-&gt;zif_ic_component~set_name( lwa_param-name ).

*       get parameter binding and add to table
        CLEAR lwa_param_bind.
        lwa_param_bind = lo_param-&gt;calc_param_binding( ).

        m_inj_param_name = lwa_param_bind-name.
        INSERT lwa_param_bind INTO TABLE m_param_bindings.

        RETURN.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_METHOD_NR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_METHOD_NR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_METHOD_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_CONSTR_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_DECLARE_LEVEL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOMTDDECL" PARVALUE="0"/>
   <source>METHOD constructor.

  super-&gt;constructor(
   EXPORTING
     i_class         = i_class
     i_method_nr     =  i_method_nr
     i_method_name   = i_method_name
     i_description   = i_description
     i_rank          = i_rank
     i_declare_level = i_declare_level
     ).

  m_method_type = c_constr_method.
  m_active = c_is_active.

  init( ).
  add_to_parent( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="EXECUTE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD execute.
  DATA l_class_name TYPE seoclsname.

  l_class_name = get_class( )-&gt;get_class_name( ).

  IF m_name = c_default_name.

    CREATE OBJECT m_constr_inj_obj TYPE (l_class_name)
      PARAMETER-TABLE m_param_bindings.

    get_class( )-&gt;set_object( m_constr_inj_obj ).
  ELSE.

    CALL METHOD (l_class_name)=&gt;(m_name) PARAMETER-TABLE m_param_bindings.

* Set the instance of the object that&apos;s created by the constructor
    IF m_inj_param_name IS NOT INITIAL.
      FIELD-SYMBOLS &lt;object&gt; TYPE any.
      DATA lwa_param TYPE abap_parmbind.

      READ TABLE m_param_bindings WITH TABLE KEY name = m_inj_param_name
                                  INTO lwa_param.

      ASSIGN lwa_param-value-&gt;* TO &lt;object&gt;.
      m_constr_inj_obj ?= &lt;object&gt;.

      get_class( )-&gt;set_object( m_constr_inj_obj ).
    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init.

  super-&gt;init( ).

  IF get_class( ) IS NOT INITIAL.

    IF is_constr_method( ) = abap_true.

      get_class( )-&gt;set_constr_method( i_constr_method = me ).
    ENDIF.

  ENDIF.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_CONTAINER" CMPNAME="TY_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENT" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CONTAINER" CMPNAME="TY_COMPONENTS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENTS" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CONTAINER" CMPNAME="TY_COMP_TAB_ENTRY" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMP_TAB_ENTRY" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CONTAINER" CMPNAME="TY_CHILD" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_IC_CONTEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CONTAINER" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="ZIC_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CONTAINER" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container number" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="19 " SRCCOLUMN1="4 " SRCROW2="21 " SRCCOLUMN2="32 " TYPESRC_LENG="114 " TYPESRC="BEGIN OF ty_object_key ,
                cont_nr TYPE zic_container-cont_nr,
            END  OF ty_object_key
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses></localTestClasses>
  <attribute CLSNAME="ZCL_IC_CONTAINER" CMPNAME="C_CONTAINER_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table name" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_CONTAINER&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTAINER" CMPNAME="C_CUSTOMIZING_CONTAINER_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC customizing Container" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;C&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CONT_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTAINER" CMPNAME="C_TYPE_CONTAINER_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC type container type" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;T&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CONT_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTAINER" CMPNAME="M_CONT_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC container type" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTVALUE="&apos;C&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CONT_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_CONTAINER" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_CONTAINER" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONTAINER" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONTAINER" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONTAINER" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONTAINER" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_RELATIONS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONTAINER" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_CONTAINER" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.

  FIELD-SYMBOLS: &lt;lwa_ic_cont&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_cont&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_cont&gt; TO  l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-cont_nr IS INITIAL.
      m_object_number = l_struct-cont_nr.
    ENDIF.

    IF NOT l_struct-name IS INITIAL.
      m_name = l_struct-name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-cont_type IS INITIAL.
      m_cont_type = l_struct-cont_type.
    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CONTAINER" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>method ZIF_IC_META_INFO~GET_KEY_STRUCT.
  FIELD-SYMBOLS &lt;lwa_ic_cont_key&gt; TYPE TY_OBJECT_KEY.
  DATA lwa_ic_cont_key TYPE TY_OBJECT_KEY.

* fill key data
  lwa_ic_cont_key-cont_nr = zif_ic_component~get_object_nr( ).

  CREATE DATA RT_comp_KEY_STRUCT TYPE TY_OBJECT_KEY.
  ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_cont_key&gt;.

  &lt;lwa_ic_cont_key&gt; = lwa_ic_cont_key.

endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CONTAINER" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>method ZIF_IC_META_INFO~GET_OBJ_STRUCT.

  FIELD-SYMBOLS &lt;lwa_ic_cont&gt; TYPE ty_object.
  DATA lwa_ic_cont TYPE ty_object.

* fill fields
  lwa_ic_cont-cont_nr = zif_ic_component~get_object_nr( ).
  lwa_ic_cont-name = zif_ic_component~get_name( ).
  lwa_ic_cont-description = get_description( ).
  lwa_ic_cont-cont_type = get_cont_type( ).

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_cont&gt;.

  &lt;lwa_ic_cont&gt; = lwa_ic_cont.

endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CONTAINER" CPDNAME="ZIF_IC_META_INFO~GET_RELATIONS">
   <source>METHOD zif_ic_meta_info~get_relations.
  DATA: lwa_rel TYPE zif_ic_meta_info~ty_relation,
        l_inner_parent TYPE zcl_ic_cont_context=&gt;ty_object-parent_ctx.

  super-&gt;zif_ic_meta_info~get_relations( IMPORTING ex_relations = ex_relations ).

* Add relation 1
  clear lwa_rel.

  lwa_rel-rel_type = &apos;CR&apos;.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_cont_context_type.

  APPEND lwa_rel TO ex_relations.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CONTAINER" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD zif_ic_meta_info~get_table_name.
  rt_table_name = c_container_table.
ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_CONTAINER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Constructor" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTAINER" CMPNAME="CONSTRUCTOR" SCONAME="I_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJECT_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_CONTAINER" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONTAINER" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONTAINER" CMPNAME="CONSTRUCTOR" SCONAME="I_CONT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Container type" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CONT_TYPE" PARVALUE="&apos;C&apos;"/>
   <source>METHOD constructor.
  super-&gt;constructor( i_object_nr = i_object_nr
                      i_name =  i_name
                      i_description = i_description
                      i_type = zcl_ic_object=&gt;c_container_type ).

  m_cont_type = i_cont_type.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTAINER" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create a class from the object key" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTAINER" CMPNAME="CREATE" SCONAME="I_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJECT_NR"/>
   <parameter CLSNAME="ZCL_IC_CONTAINER" CMPNAME="CREATE" SCONAME="RT_ZCL_IC_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <source>METHOD create.

  CREATE OBJECT rt_zcl_ic_container
    EXPORTING
      i_object_nr = i_object_nr.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTAINER" CMPNAME="GET_CONT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Get container type" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTAINER" CMPNAME="GET_CONT_TYPE" SCONAME="RT_CONT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_CONT_TYPE"/>
   <source>method GET_CONT_TYPE.
  rt_cont_type = m_cont_type.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_PARENT_OBJECT" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method INIT.
 SUPER-&gt;INIT( ).

 m_type = C_CONTAINER_TYPE.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTAINER" CMPNAME="SET_CONT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Set container type" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTAINER" CMPNAME="SET_CONT_TYPE" SCONAME="IM_CONT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CONT_TYPE"/>
   <source>METHOD set_cont_type.
  m_cont_type = im_cont_type.
ENDMETHOD.</source>
  </method>
  <aliasMethod CLSNAME="ZCL_IC_CONTAINER" CMPNAME="SET_NAME" VERSION="1" EXPOSURE="2" CMPTYPE="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="SET_NAME"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <types CLSNAME="ZCL_IC_CONTEXT" CMPNAME="TY_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENT" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CONTEXT" CMPNAME="TY_COMPONENTS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENTS" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CONTEXT" CMPNAME="TY_COMP_TAB_ENTRY" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="0" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMP_TAB_ENTRY" TYPESRC_LENG="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses></localTestClasses>
  <attribute CLSNAME="ZCL_IC_CONTEXT" CMPNAME="C_CONT_CONTEXT_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_CONT_CONTEXT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTEXT" CMPNAME="C_CONT_CTX" VERSION="1" LANGU="E" DESCRIPT="IC Container Context Type" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;C&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CTX_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTEXT" CMPNAME="C_IMPL_CONTEXT_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_IMPL_CONTEXT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTEXT" CMPNAME="C_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="IC Implementation Context Type" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;I&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CTX_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTEXT" CMPNAME="C_INJ_CONTEXT_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_IMPL_CONTEXT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTEXT" CMPNAME="C_INJ_SUB_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context Type" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;T&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CTX_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTEXT" CMPNAME="M_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_CONTEXT" CMPNAME="M_CTX_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC Context Type" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTVALUE="&apos;C&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_CTX_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_CONTEXT" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_CONTEXT" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
  </inheritance>
  <method CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Constructor" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_CONT" VERSION="1" LANGU="E" DESCRIPT="IC object number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_CTX_NR" VERSION="1" LANGU="E" DESCRIPT="IC context number" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CTX_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="IC Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="IC description" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_CTX_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC context type" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CTX_TYPE" PARVALUE="&apos;C&apos;"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_PARENT_CTX" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <source>METHOD constructor.

  super-&gt;constructor( i_object_nr = i_ctx_nr
                      i_name =  i_name
                      i_description = i_description
                      i_rank = i_rank ).

  m_container = i_cont.
  m_ctx_type = i_ctx_type.

* parent
  IF NOT i_parent_ctx IS INITIAL.
    m_parent = i_parent_ctx.
  ELSE.
    m_parent = i_cont.
  ENDIF.


  init( ).
  add_to_parent( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create a class from the object key" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CREATE" SCONAME="I_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CREATE" SCONAME="I_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJECT_NR"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CREATE" SCONAME="I_CTX_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CTX_TYPE" PARVALUE="&apos;C&apos;"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CREATE" SCONAME="I_PARENT_CTX" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container parent context" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONT_CONTEXT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="CREATE" SCONAME="RT_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CONTEXT"/>
   <source>METHOD create.

  CASE i_ctx_type.
    WHEN c_cont_ctx.

      CREATE OBJECT rt_context TYPE zcl_ic_cont_context
        EXPORTING
          i_cont     = i_container
          i_ctx_nr   = i_object_nr
          i_parent_ctx = i_parent_ctx.

    WHEN c_impl_ctx.

      CREATE OBJECT rt_context TYPE zcl_ic_impl_context
        EXPORTING
          i_cont     = i_container
          i_ctx_nr   = i_object_nr
          i_parent_ctx = i_parent_ctx.

    WHEN c_inj_type.

      CREATE OBJECT rt_context TYPE zcl_ic_inj_type
        EXPORTING
          i_cont     = i_container
          i_ctx_nr   = i_object_nr
          i_parent_ctx = i_parent_ctx.

  ENDCASE.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTEXT" CMPNAME="GET_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Get container" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="GET_CONTAINER" SCONAME="RT_CONT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <source>method GET_CONTAINER.
  rt_cont = m_container.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTEXT" CMPNAME="GET_CONTEXT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Get Context type" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="GET_CONTEXT_TYPE" SCONAME="RT_CTX_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_CTX_TYPE"/>
   <source>METHOD get_context_type.
  rt_ctx_type = m_ctx_type.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PARENT_OBJECT" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init.
  super-&gt;init( ).

  CASE m_ctx_type.
    WHEN c_cont_ctx.
      m_type = c_cont_context_type.
    WHEN c_impl_ctx.
      m_type = c_impl_context_type.
    when c_inj_sub_type.
      m_type = c_inj_type.
  ENDCASE.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_COMP" VERSION="1" LANGU="E" DESCRIPT="Search value by number" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_COMP" SCONAME="IM_OBJ_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJECT_NR"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_COMP" SCONAME="IM_OBJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_COMP" SCONAME="IM_PARENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_COMP" SCONAME="RT_COMP" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <source>METHOD SEARCH_COMP.
  DATA: l_child TYPE zif_ic_component~ty_comp_tab_entry,
        lo_parent type ref to zif_ic_composite.

  LOOP AT m_childs INTO l_child.

    IF l_child-comp-&gt;get_type( ) = im_obj_type
      AND l_child-comp-&gt;get_object_nr(  ) = im_obj_nr.

      rt_comp = l_child-comp.
      RETURN.
    ENDIF.

*   Search by parent
    IF l_child-comp-&gt;is_parent( ) = abap_true.
      lo_parent ?= l_child-comp.

      rt_comp = search_comp( im_obj_nr = im_obj_nr
                             im_obj_type = im_obj_type
                             im_parent = lo_parent ).

      IF rt_comp IS BOUND.
        RETURN.
      ENDIF.
    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_COMP_BY_PATH" VERSION="1" LANGU="E" DESCRIPT="Search component by path" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_COMP_BY_PATH" SCONAME="IM_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_PATH"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_COMP_BY_PATH" SCONAME="RT_COMP" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <source>METHOD search_comp_by_path.
  DATA: lo_temp_comp TYPE REF TO zif_ic_component,
        lwa_child TYPE zif_ic_composite=&gt;ty_comp_tab_entry,
        lo_ctx TYPE REF TO zcl_ic_context,
        lo_inj_obj TYPE REF TO zcl_ic_inj_object,
        lo_inj_type TYPE REF TO zcl_ic_inj_type.

  LOOP AT m_childs INTO lwa_child WHERE comp_type = zcl_ic_object=&gt;c_inj_obj_type
                                      OR comp_type = zcl_ic_object=&gt;c_inj_type
                                      OR comp_type = zcl_ic_object=&gt;c_cont_context_type
                                      OR comp_type = zcl_ic_object=&gt;c_impl_context_type.

    IF lwa_child-comp_type = zcl_ic_object=&gt;c_cont_context_type
       OR lwa_child-comp_type = zcl_ic_object=&gt;c_impl_context_type.

      lo_ctx ?= lwa_child-comp.
      lo_temp_comp  = lo_ctx-&gt;search_comp_by_path( im_path ).

      IF lo_temp_comp IS BOUND.
        rt_comp = lo_temp_comp.
        RETURN.
      ENDIF.

      EXIT.
    ENDIF.

    IF  lwa_child-comp_type = zcl_ic_object=&gt;c_inj_obj_type.
      lo_inj_obj ?= lwa_child-comp.
      lo_inj_type = lo_inj_obj-&gt;get_inj_type( ).
    ELSEIF lwa_child-comp_type = zcl_ic_object=&gt;c_inj_type.
      lo_inj_type ?= lwa_child-comp.
    ENDIF.

    lo_temp_comp = lo_inj_type-&gt;zif_ic_composite~get_child_by_path( im_path ).

    IF lo_temp_comp IS NOT BOUND.
      lo_temp_comp = lo_inj_type-&gt;search_comp_by_path( im_path = im_path ).
    ENDIF.

    IF lo_temp_comp IS BOUND.
      rt_comp = lo_temp_comp.
      RETURN.
    ENDIF.

  ENDLOOP.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_VALUE" VERSION="1" LANGU="E" DESCRIPT="Search value by number" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_VALUE" SCONAME="IM_VALUE_NR" VERSION="1" LANGU="E" DESCRIPT="IC value number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_VALUE_NR"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_VALUE" SCONAME="IM_PARENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SEARCH_VALUE" SCONAME="RT_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_VALUE"/>
   <source>METHOD search_value.
  CONSTANTS: lc_value_cl_name TYPE classname VALUE &apos;ZIF_IC_VALUEHOLDER&apos;.
  DATA: lit_childs TYPE zif_ic_composite=&gt;ty_comp_tab_entries,
        l_child TYPE zif_ic_component~ty_comp_tab_entry,
        lo_parent TYPE REF TO zif_ic_composite,
        lo_if_descr TYPE REF TO cl_abap_intfdescr.

  IF im_parent IS BOUND.
    lit_childs = im_parent-&gt;get_children( ).
  ELSE.
    lit_childs = m_childs.
  ENDIF.

  lo_if_descr ?= cl_abap_typedescr=&gt;describe_by_name( lc_value_cl_name ).

  LOOP AT lit_childs INTO l_child.

    IF lo_if_descr-&gt;applies_to( l_child-comp ) = abap_true.
      DATA lo_value_holder TYPE REF TO zif_ic_valueholder.

      lo_value_holder ?= l_child-comp.

      IF lo_value_holder-&gt;get_ic_value( ) IS BOUND
        AND lo_value_holder-&gt;get_ic_value( )-&gt;get_object_nr(  ) = im_value_nr.

        rt_value ?= lo_value_holder-&gt;get_ic_value( ).
        RETURN.
      ENDIF.
    ENDIF.

*   Search by parent
    IF l_child-comp-&gt;is_parent( ) = abap_true.
      lo_parent ?= l_child-comp.

      rt_value = search_value( im_value_nr = im_value_nr
                              im_parent = lo_parent ).

      IF rt_value IS BOUND.
        RETURN.
      ENDIF.
    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SET_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Set container" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_CONTEXT" CMPNAME="SET_CONTAINER" SCONAME="I_CONT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <source>method SET_CONTAINER.
  m_container = i_cont.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_CONT_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_CONTEXT">
  <types CLSNAME="ZCL_IC_CONT_CONTEXT" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZIC_CONT_CONTEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_CONT_CONTEXT" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="18 " SRCCOLUMN2="30 " TYPESRC_LENG="165 " TYPESRC="BEGIN OF ty_object_key ,
              cont_nr TYPE zic_cont_context-cont_nr,
              ctx_nr TYPE zic_cont_context-ctx_nr,
          END  OF ty_object_key
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_CONT_CONTEXT" CMPNAME="C_INNER_PARENT_NAME" VERSION="1" LANGU="E" DESCRIPT="Inner parent component name" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;PARENT_CTX&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_CONT_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_CONT_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_COMPOSITE~ADD" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONT_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONT_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONT_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONT_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_RELATIONS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_CONT_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_CONT_CONTEXT" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.

  FIELD-SYMBOLS: &lt;lwa_ic_ctx&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_ctx&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_ctx&gt; TO  l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-ctx_nr IS INITIAL.
      m_object_number = l_struct-ctx_nr.
    ENDIF.

    IF NOT l_struct-ctx_name IS INITIAL.
      m_name = l_struct-ctx_name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-rank IS INITIAL.
      m_rank = l_struct-rank.
    ENDIF.

  ENDIF.

  init( ).

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CONT_CONTEXT" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>method ZIF_IC_META_INFO~GET_KEY_STRUCT.

 FIELD-SYMBOLS &lt;lwa_ic_cont_key&gt; TYPE ty_object_key.
  DATA lwa_ic_cont_key TYPE ty_object_key.

* fill key data
  lwa_ic_cont_key-cont_nr = get_container( )-&gt;get_object_nr( ).
  lwa_ic_cont_key-ctx_nr = get_object_nr( ).

  CREATE DATA rt_comp_key_struct TYPE ty_object_key.
  ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_cont_key&gt;.

  &lt;lwa_ic_cont_key&gt; = lwa_ic_cont_key.

endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CONT_CONTEXT" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.

  FIELD-SYMBOLS &lt;lwa_ic_ctx&gt; TYPE ty_object.
  DATA lwa_ic_cont TYPE ty_object.

* fill fields
  lwa_ic_cont-cont_nr = get_container( )-&gt;get_object_nr( ).
  lwa_ic_cont-CTX_NR = zif_ic_component~get_object_nr( ).
  lwa_ic_cont-ctx_name = zif_ic_component~get_name( ).
  lwa_ic_cont-ctx_type = get_context_type( ).
  lwa_ic_cont-description = get_description( ).
  lwa_ic_cont-rank = get_rank( ).

* set parent context
  IF m_parent-&gt;get_type( ) = zcl_ic_object=&gt;c_cont_context_type.
    lwa_ic_cont-parent_ctx = m_parent-&gt;get_object_nr( ).
  ELSE.
    CLEAR lwa_ic_cont-parent_ctx.
  ENDIF.

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_ctx&gt;.

  &lt;lwa_ic_ctx&gt; = lwa_ic_cont.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CONT_CONTEXT" CPDNAME="ZIF_IC_META_INFO~GET_RELATIONS">
   <source>METHOD zif_ic_meta_info~get_relations.
  FIELD-SYMBOLS &lt;l_inner_parent&gt; TYPE zcl_ic_cont_context=&gt;ty_object-parent_ctx.

  DATA: lwa_rel TYPE zif_ic_meta_info~ty_relation,
        l_inner_parent TYPE zcl_ic_cont_context=&gt;ty_object-parent_ctx,
        lo_parent_comp TYPE REF TO cl_abap_datadescr.

  super-&gt;zif_ic_meta_info~get_relations( IMPORTING ex_relations = ex_relations ).

*Relation 1
  CLEAR lwa_rel.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = get_type( ).
*  lwa_rel-inner_parent_name = zcl_ic_cont_context=&gt;c_inner_parent_name.
** TODOTODOTODOTODOTODOTODOTODOTODOTODOTODO
  lwa_rel-inner_key = space.

  APPEND lwa_rel TO ex_relations.

* Relation 2
  CLEAR lwa_rel.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_impl_context_type.

  APPEND lwa_rel TO ex_relations.

* Relation 3
  CLEAR lwa_rel.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_inj_type.

  APPEND lwa_rel TO ex_relations.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CONT_CONTEXT" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>method ZIF_IC_META_INFO~GET_TABLE_NAME.
  rt_table_name = C_CONT_CONTEXT_TABLE.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_CONT_CONTEXT" CPDNAME="ZIF_IC_COMPOSITE~ADD">
   <source>METHOD zif_ic_composite~add.
  DATA lo_ctx TYPE REF TO zcl_ic_context.

  super-&gt;zif_ic_composite~add( i_component ).

  lo_ctx ?= i_component.

  lo_ctx-&gt;set_container( m_container ).

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_DATA" VERSION="1" LANGU="E" DESCRIPT="Common data as a value object" CATEGORY="00" EXPOSURE="1" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_VALUE">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_DATA" CMPNAME="M_DATA_TYPE" VERSION="1" LANGU="E" DESCRIPT="Associated Type of an Interface Parameter" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTVALUE="&apos;STRING&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="RS38L_TYP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_DATA" CMPNAME="M_DATA_VALUE" VERSION="1" LANGU="E" DESCRIPT="Initial value" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SEOVALUE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_DATA" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_DATA" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_DATA" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="GET_VALUE_REF" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_DATA" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_DATA" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_DATA" REFCLSNAME="ZCL_IC_VALUE" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_DATA" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.
  FIELD-SYMBOLS: &lt;lwa_ic_value&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_value&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_value&gt; TO l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-value_nr IS INITIAL.
      m_object_number = l_struct-value_nr.
    ENDIF.

    IF NOT l_struct-value_name IS INITIAL.
      m_name = l_struct-value_name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-rank IS INITIAL.
      m_rank = l_struct-rank.
    ENDIF.

    IF NOT l_struct-data_type IS INITIAL.
      m_data_type = l_struct-data_type.
    ENDIF.

    IF NOT l_struct-data_value IS INITIAL.
      m_data_value = l_struct-data_value.
    ENDIF.

  ENDIF.

  init( ).
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_DATA" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>method ZIF_IC_META_INFO~GET_OBJ_STRUCT.
FIELD-SYMBOLS &lt;lwa_ic_value&gt; TYPE zcl_ic_value=&gt;ty_object.
  DATA lwa_ic_value TYPE ty_object.

* fill fields
  lwa_ic_value-value_nr = zif_ic_component~get_object_nr( ).
  lwa_ic_value-value_name = zif_ic_component~get_name( ).
  lwa_ic_value-value_type = get_value_type( ).
  lwa_ic_value-description = get_description( ).
  lwa_ic_value-rank = get_rank( ).
  lwa_ic_value-data_type = get_data_type( ).
  lwa_ic_value-data_value = get_data_value( ).

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_value&gt;.

  &lt;lwa_ic_value&gt; = lwa_ic_value.
endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_DATA" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="CONSTRUCTOR" SCONAME="I_DATA_TYPE" VERSION="1" LANGU="E" DESCRIPT="Associated Type of an Interface Parameter" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L_TYP" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="CONSTRUCTOR" SCONAME="I_DATA_VALUE" VERSION="1" LANGU="E" DESCRIPT="Initial value" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOVALUE" PAROPTIONL="X"/>
   <source>METHOD constructor.
  super-&gt;constructor( i_value_type = zcl_ic_value=&gt;c_value_type_data ).

  m_data_type = i_data_type.
  m_data_value = i_data_value.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DATA" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create Data value" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="CREATE" SCONAME="I_DATA_TYPE" VERSION="1" LANGU="E" DESCRIPT="Associated Type of an Interface Parameter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L_TYP"/>
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="CREATE" SCONAME="I_DATA_VALUE" VERSION="1" LANGU="E" DESCRIPT="Initial value" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOVALUE" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="CREATE" SCONAME="RT_IC_DATA" VERSION="1" LANGU="E" DESCRIPT="Common data as a value object" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_DATA"/>
   <source>METHOD create.

  CREATE OBJECT rt_ic_data
    EXPORTING
      i_data_type  = i_data_type
      i_data_value = i_data_value.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DATA" CMPNAME="GET_DATA_TYPE" VERSION="1" LANGU="E" DESCRIPT="Getter for Data Type" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="GET_DATA_TYPE" SCONAME="RT_DATA_TYPE" VERSION="1" LANGU="E" DESCRIPT="Associated Type of an Interface Parameter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="RS38L_TYP"/>
   <source>METHOD get_data_type.
  rt_data_type = m_data_type.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DATA" CMPNAME="GET_DATA_VALUE" VERSION="1" LANGU="E" DESCRIPT="Getter for value" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="GET_DATA_VALUE" SCONAME="RT_DATA_VALUE" VERSION="1" LANGU="E" DESCRIPT="Initial value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SEOVALUE"/>
   <source>method GET_DATA_VALUE.
  rt_data_value = m_data_value.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value.
  FIELD-SYMBOLS &lt;value&gt; TYPE any.

  DATA: l_ref_data TYPE REF TO data,
        l_abap_type_descr TYPE REF TO cl_abap_typedescr.

  CREATE DATA l_ref_data TYPE (m_data_type).
  ASSIGN l_ref_data-&gt;* TO &lt;value&gt;.

  &lt;value&gt; = m_data_value.
  e_value = &lt;value&gt;.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="GET_VALUE_REF" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD get_value_ref.
  FIELD-SYMBOLS &lt;value&gt; TYPE any.

  DATA: l_type_name TYPE rs38l_typ,
        l_ref_data TYPE REF TO data,
        l_abap_type_descr TYPE REF TO cl_abap_typedescr.

  IF i_type_name IS INITIAL.
    l_type_name = m_data_type.
  ELSE.
    l_type_name = i_type_name.
  ENDIF.

  CREATE DATA l_ref_data TYPE (l_type_name).
  ASSIGN l_ref_data-&gt;* TO &lt;value&gt;.

  &lt;value&gt; = m_data_value.

  rt_value_ref = l_ref_data.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_VALUE" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method INIT.
  super-&gt;init( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_DATA" CMPNAME="SET_DATA_TYPE" VERSION="1" LANGU="E" DESCRIPT="Setter for Data Type" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="SET_DATA_TYPE" SCONAME="IM_DATA_TYPE" VERSION="1" LANGU="E" DESCRIPT="Associated Type of an Interface Parameter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L_TYP"/>
   <source>METHOD set_data_type.
  m_data_type = im_data_type.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DATA" CMPNAME="SET_DATA_VALUE" VERSION="1" LANGU="E" DESCRIPT="Setter for value" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="SET_DATA_VALUE" SCONAME="IM_DATA_VALUE" VERSION="1" LANGU="E" DESCRIPT="Initial value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOVALUE"/>
   <source>METHOD set_data_value.
  m_data_value = im_data_value.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DATA" CMPNAME="SET_DATA_VALUE_REF" VERSION="1" LANGU="E" DESCRIPT="Setter for data value" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DATA" CMPNAME="SET_DATA_VALUE_REF" SCONAME="I_VALUE_REF" VERSION="1" LANGU="E" DESCRIPT="Value ref" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD set_data_value_ref.
  FIELD-SYMBOLS &lt;value&gt; TYPE any.

  ASSIGN i_value_ref-&gt;* TO &lt;value&gt;.

  IF &lt;value&gt; IS ASSIGNED.
    m_data_value = &lt;value&gt;.
  ENDIF.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_DYNPRO_BASE" VERSION="1" LANGU="E" DESCRIPT="IC dynpro base" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="DYNPRO_NR" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SYDYNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="PROGRAM_NAME" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SYST-CPROG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="SCREEN_NR" VERSION="1" LANGU="E" DESCRIPT="SCREEN_NR" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="CLOSE" VERSION="1" LANGU="E" DESCRIPT="Close dynpro" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD close.

  zcl_ic_dynpro_manager=&gt;instance( )-&gt;close_dynpro( me ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYDYNNR"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM_NAME" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG"/>
   <source>METHOD constructor.

  dynpro_nr = im_dynpro_nr.
  program_name = im_program_name.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="GET_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="GET_DYNPRO_NR" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="GET_DYNPRO_NR" SCONAME="RT_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="RT_DYNPRO_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYDYNNR"/>
   <source>METHOD get_dynpro_nr.

  rt_dynpro_nr = dynpro_nr.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="GET_PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="GET_PROGRAM_NAME" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="GET_PROGRAM_NAME" SCONAME="RT_PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="RT_PROGRAM_NAME" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYST-CPROG"/>
   <source>METHOD get_program_name.

  rt_program_name = program_name.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="GET_SCREEN_NR" VERSION="1" LANGU="E" DESCRIPT="GET_SCREEN_NR" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="GET_SCREEN_NR" SCONAME="RT_SCREEN_NR" VERSION="1" LANGU="E" DESCRIPT="RT_SCREEN_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <source>METHOD get_screen_nr.

  rt_screen_nr = screen_nr.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="HANDLE_PAI" VERSION="1" LANGU="E" DESCRIPT="HANDLE_PAI" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="HANDLE_PAI" SCONAME="IM_ACTION" VERSION="1" LANGU="E" DESCRIPT="IM_ACTION" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-UCOMM"/>
   <source>METHOD handle_pai.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_BASE" CMPNAME="HANDLE_PBO" VERSION="1" LANGU="E" DESCRIPT="HANDLE_PBO" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method HANDLE_PBO.



endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_DYNPRO_MANAGER" VERSION="1" LANGU="E" DESCRIPT="IC dynpro manager" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="CURRENT_DYNPROS" VERSION="1" LANGU="E" DESCRIPT="CURRENT_DYNPROS" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZCL_IC_SUB_DYNPRO_BASE=&gt;T_SUB_DYNPRO_AREAS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="C_EMPTY_SCREEN_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="C_EMPTY_SCREEN_DYNPRO_NR" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;0999&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SYDYNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DYNPROS" VERSION="1" LANGU="E" DESCRIPT="DYNPROS" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZCL_IC_SUB_DYNPRO_BASE=&gt;T_SUB_DYNPROS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="MAIN_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="MAIN_DYNPRO" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_MAIN_DYNPRO_BASE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="MANAGER" VERSION="1" LANGU="E" DESCRIPT="MANAGER" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_DYNPRO_MANAGER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="VALIDATION_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Validating dynpro" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZIF_IC_VALIDATING_DYNPRO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="ADD_MAIN_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="ADD_MAIN_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="ADD_MAIN_DYNPRO" SCONAME="IM_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_MAIN_DYNPRO_BASE"/>
   <source>METHOD add_main_dynpro.

  main_dynpro = im_dynpro.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="ADD_SUB_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="ADD_SUB_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="ADD_SUB_DYNPRO" SCONAME="IM_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_SUB_DYNPRO_BASE"/>
   <source>METHOD add_sub_dynpro.
  DATA: lwa_dynpro TYPE zcl_ic_sub_dynpro_base=&gt;t_sub_dynpro.

  lwa_dynpro-nr = im_dynpro-&gt;get_screen_nr( ).
  lwa_dynpro-dynpro_nr = im_dynpro-&gt;get_dynpro_nr( ).
  lwa_dynpro-program = im_dynpro-&gt;get_program_name( ).
  lwa_dynpro-dynpro_class = im_dynpro.

  APPEND lwa_dynpro TO dynpros.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="CALCULATE_LAST_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="CALCULATE_LAST_DYNPRO_NR" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="CALCULATE_LAST_DYNPRO_NR" SCONAME="RT_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="RT_DYNPRO_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYDYNNR"/>
   <source>METHOD calculate_last_dynpro_nr.

  DESCRIBE TABLE dynpros LINES rt_dynpro_nr.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="CLEAR_CURRENT_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="Clear current dynpro" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="CLEAR_CURRENT_DYNPRO_NR" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="Name of a Screen Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME"/>
   <source>METHOD clear_current_dynpro_nr.

  READ TABLE current_dynpros WITH TABLE KEY sub_scrn_area = im_sub_scrn_area
                     TRANSPORTING NO FIELDS.

  IF sy-subrc = 0.
    DELETE current_dynpros INDEX sy-tabix.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="CLOSE_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="ADD_SUB_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="CLOSE_DYNPRO" SCONAME="IM_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="IC dynpro base" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_DYNPRO_BASE"/>
   <source>METHOD CLOSE_DYNPRO.

  READ TABLE dynpros WITH KEY nr  = im_dynpro-&gt;get_screen_nr( )
                              dynpro_nr = im_dynpro-&gt;get_dynpro_nr( )
                              program = im_dynpro-&gt;get_program_name( )
                    TRANSPORTING NO FIELDS.

  IF sy-subrc = 0.
    DELETE dynpros INDEX sy-tabix.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_PAI" VERSION="1" LANGU="E" DESCRIPT="DO_PAI" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_PAI" SCONAME="IM_ACTION" VERSION="1" LANGU="E" DESCRIPT="IM_ACTION" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-UCOMM"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_PAI" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SUB_SCRN_AREA" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_PAI" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-DYNNR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_PAI" SCONAME="IM_PROGRAM" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG" PAROPTIONL="X"/>
   <source>METHOD do_pai.
  DATA: l_dynpro TYPE syst-dynnr,
        l_program TYPE syst-cprog,
        lo_screen TYPE REF TO zcl_ic_dynpro_base.

  IF im_dynpro_nr IS INITIAL.
    l_dynpro = sy-dynnr.
  ELSE.
    l_dynpro = im_dynpro_nr.
  ENDIF.

  IF im_program IS INITIAL.
    l_program = sy-cprog.
  ELSE.
    l_program = im_program.
  ENDIF.

  IF l_dynpro = manager-&gt;get_main_dynpro( )-&gt;get_dynpro_nr( )
    AND l_program = manager-&gt;get_main_dynpro( )-&gt;get_program_name( ).

    manager-&gt;get_main_dynpro( )-&gt;handle_pai( im_action ).
    RETURN.
  ENDIF.

*   delegate to specific dynpro
  IF im_sub_scrn_area IS NOT INITIAL.
    lo_screen = instance( )-&gt;get_current_dynpro( im_sub_scrn_area ).
  ELSE.
    lo_screen = instance( )-&gt;get_sub_dynpro( im_dynpro_nr = l_dynpro
                                             im_program = l_program ).
  ENDIF.

  IF lo_screen IS BOUND.
    lo_screen-&gt;handle_pai( im_action = im_action ).
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_PBO" VERSION="1" LANGU="E" DESCRIPT="DO_PBO" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_PBO" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SUB_SCRN_AREA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_PBO" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-DYNNR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_PBO" SCONAME="IM_PROGRAM" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG" PAROPTIONL="X"/>
   <source>METHOD do_pbo.
  DATA: l_dynpro TYPE syst-dynnr,
        l_program TYPE syst-cprog,
        lo_screen TYPE REF TO zcl_ic_dynpro_base.

  IF im_dynpro_nr IS INITIAL.
    l_dynpro = sy-dynnr.
  ELSE.
    l_dynpro = im_dynpro_nr.
  ENDIF.

  IF im_program IS INITIAL.
    l_program = sy-cprog.
  ELSE.
    l_program = im_program.
  ENDIF.

  IF l_dynpro = manager-&gt;get_main_dynpro( )-&gt;get_dynpro_nr( )
    AND l_program = manager-&gt;get_main_dynpro( )-&gt;get_program_name( ).

    manager-&gt;get_main_dynpro( )-&gt;handle_pbo( ).
    RETURN.
  ENDIF.

*   delegate to specific dynpro
  IF im_sub_scrn_area IS NOT INITIAL.
    lo_screen = instance( )-&gt;get_current_dynpro( im_sub_scrn_area ).
  ELSE.
    lo_screen = instance( )-&gt;get_sub_dynpro( im_dynpro_nr = l_dynpro
                                             im_program = l_program ).
  ENDIF.

  IF lo_screen IS BOUND.
    lo_screen-&gt;handle_pbo( ).
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_SCREEN_EDIT" VERSION="1" LANGU="E" DESCRIPT="DO_SCREEN_EDIT" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_SCREEN_EDIT" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SUB_SCRN_AREA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_SCREEN_EDIT" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-DYNNR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_SCREEN_EDIT" SCONAME="IM_PROGRAM" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="DO_SCREEN_EDIT" SCONAME="CH_SCREEN" VERSION="1" LANGU="E" DESCRIPT="CH_SCREEN" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SCREEN"/>
   <source>METHOD do_screen_edit.
  DATA: l_dynpro TYPE syst-dynnr,
        l_program TYPE syst-cprog,
        lo_screen TYPE REF TO zcl_ic_sub_dynpro_base.
*Todo first part maybe abstract method
  IF im_dynpro_nr IS INITIAL.
    l_dynpro = sy-dynnr.
  ELSE.
    l_dynpro = im_dynpro_nr.
  ENDIF.

  IF im_program IS INITIAL.
    l_program = sy-cprog.
  ELSE.
    l_program = im_program.
  ENDIF.

*   delegate to specific dynpro
  IF im_sub_scrn_area IS NOT INITIAL.
    lo_screen = instance( )-&gt;get_current_dynpro( im_sub_scrn_area ).
  ELSE.
    lo_screen = instance( )-&gt;get_current_dynpro_by_name( im_dynpro_nr = l_dynpro
                                                         im_program = l_program ).
  ENDIF.

  IF lo_screen IS BOUND
    AND lo_screen-&gt;is_screen_edit( ) = abap_true.

    DATA lo_edit_screen TYPE REF TO zcl_ic_sub_edit_dyn_base.

    lo_edit_screen ?= lo_screen.
    lo_edit_screen-&gt;adapt_screen( CHANGING ch_screen = ch_screen ).
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="GET_CURRENT_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SUB_SCRN_AREA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO" SCONAME="RT_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="RT_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_SUB_DYNPRO_BASE"/>
   <source>METHOD get_current_dynpro.
  DATA: lwa_current_dynpro TYPE zcl_ic_sub_dynpro_base=&gt;t_sub_dynpro_area,
        lwa_dynpro TYPE zcl_ic_sub_dynpro_base=&gt;t_sub_dynpro.

  READ TABLE current_dynpros WITH TABLE KEY sub_scrn_area = im_sub_scrn_area
                             INTO lwa_current_dynpro.

  IF sy-subrc = 0.

    rt_dynpro = get_sub_dynpro( im_nr = lwa_current_dynpro-nr
                              im_dynpro_nr = lwa_current_dynpro-dynpro_nr
                              im_program = lwa_current_dynpro-program ).

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="GET_CURRENT_DYNPRO_BY_NAME" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO_BY_NAME" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-DYNNR"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO_BY_NAME" SCONAME="IM_PROGRAM" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO_BY_NAME" SCONAME="RT_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="RT_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_SUB_DYNPRO_BASE"/>
   <source>METHOD get_current_dynpro_by_name.
  DATA lwa_dynpro TYPE zcl_ic_sub_dynpro_base=&gt;t_sub_dynpro_area.

  LOOP AT current_dynpros INTO lwa_dynpro
                          WHERE dynpro_nr = im_dynpro_nr
                                AND program = im_program.

    rt_dynpro = get_sub_dynpro( im_nr = lwa_dynpro-nr
                                im_dynpro_nr = lwa_dynpro-dynpro_nr
                                im_program = lwa_dynpro-program ).

    EXIT.
  ENDLOOP.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="GET_CURRENT_DYNPRO_NR" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO_NR" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SUB_SCRN_AREA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_CURRENT_DYNPRO_NR" SCONAME="RT_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="RT_DYNPRO_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYDYNNR"/>
   <source>METHOD get_current_dynpro_nr.
  DATA: l_dynpro TYPE REF TO zcl_ic_sub_dynpro_base.

  l_dynpro = get_current_dynpro( im_sub_scrn_area = im_sub_scrn_area ).

  IF l_dynpro IS NOT INITIAL.
    rt_dynpro_nr = l_dynpro-&gt;get_dynpro_nr( ).
  ELSE.
    rt_dynpro_nr = c_empty_screen_dynpro_nr.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_MAIN_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="GET_MAIN_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_MAIN_DYNPRO" SCONAME="RT_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="RT_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_MAIN_DYNPRO_BASE"/>
   <source>METHOD get_main_dynpro.

  rt_dynpro = main_dynpro.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_SUB_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="GET_SUB_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_SUB_DYNPRO" SCONAME="IM_NR" VERSION="1" LANGU="E" DESCRIPT="IM_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="1"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_SUB_DYNPRO" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-DYNNR"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_SUB_DYNPRO" SCONAME="IM_PROGRAM" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_SUB_DYNPRO" SCONAME="RT_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="RT_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_SUB_DYNPRO_BASE"/>
   <source>METHOD get_sub_dynpro.
*TODO misschien moet dit met twee parameters minder of im_nr_type moet aangepast worden in method calculate_last_dynpro_nr
  DATA: lwa_dynpro TYPE zcl_ic_sub_dynpro_base=&gt;t_sub_dynpro,
        l_prog TYPE sycprog.

  l_prog = im_program.

  IF l_prog IS INITIAL.
    l_prog = syst-cprog.
  ENDIF.

  READ TABLE dynpros WITH TABLE KEY nr = im_nr
                                    dynpro_nr = im_dynpro_nr
                                    program = l_prog
                     INTO lwa_dynpro.

  IF sy-subrc = 0.
    rt_dynpro = lwa_dynpro-dynpro_class.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_SUB_DYNPRO_BY_OBJ" VERSION="1" LANGU="E" DESCRIPT="GET_SUB_DYNPRO_BY_OBJ" EXPOSURE="2" STATE="1" EDITORDER="19 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_SUB_DYNPRO_BY_OBJ" SCONAME="IM_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_SUB_DYNPRO_BASE"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_SUB_DYNPRO_BY_OBJ" SCONAME="RT_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="RT_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_SUB_DYNPRO_BASE"/>
   <source>METHOD get_sub_dynpro_by_obj.

  IF im_dynpro IS BOUND.
    rt_dynpro = get_sub_dynpro( im_nr = im_dynpro-&gt;get_screen_nr( )
                                im_dynpro_nr =  im_dynpro-&gt;get_dynpro_nr( )
                                im_program = im_dynpro-&gt;get_program_name( ) ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_VALIDATION_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Getter for validation object" EXPOSURE="2" STATE="1" EDITORDER="20 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="GET_VALIDATION_DYNPRO" SCONAME="RT_VALIDATION" VERSION="1" LANGU="E" DESCRIPT="Validating dynpro" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_VALIDATING_DYNPRO"/>
   <source>METHOD get_validation_dynpro.
  rt_validation = validation_dynpro.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="INSTANCE" VERSION="1" LANGU="E" DESCRIPT="INSTANCE" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="INSTANCE" SCONAME="RT_MANAGER" VERSION="1" LANGU="E" DESCRIPT="RT_MANAGER" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_DYNPRO_MANAGER"/>
   <source>METHOD instance.

  IF manager IS NOT BOUND.
    CREATE OBJECT manager.
  ENDIF.

  rt_manager = manager.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="IS_SCREEN_EDIT" VERSION="1" LANGU="E" DESCRIPT="IS_SCREEN_EDIT" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="IS_SCREEN_EDIT" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SUB_SCRN_AREA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="IS_SCREEN_EDIT" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-DYNNR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="IS_SCREEN_EDIT" SCONAME="IM_PROGRAM" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="IS_SCREEN_EDIT" SCONAME="RT_IS_SCR_ADAPT" VERSION="1" LANGU="E" DESCRIPT="RT_IS_SCR_ADAPT" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
   <source>METHOD is_screen_edit.
  DATA: l_dynpro TYPE syst-dynnr,
    l_program TYPE syst-cprog,
    lo_screen TYPE REF TO zcl_ic_sub_dynpro_base.

  IF im_dynpro_nr IS INITIAL.
    l_dynpro = sy-dynnr.
  ELSE.
    l_dynpro = im_dynpro_nr.
  ENDIF.

  IF im_program IS INITIAL.
    l_program = sy-cprog.
  ELSE.
    l_program = im_program.
  ENDIF.

  rt_is_scr_adapt = abap_false.

  IF im_sub_scrn_area IS NOT INITIAL.
    lo_screen = instance( )-&gt;get_current_dynpro( im_sub_scrn_area ).
  ELSE.
    lo_screen = instance( )-&gt;get_current_dynpro_by_name( im_dynpro_nr = l_dynpro
                                                         im_program = l_program ).
  ENDIF.

  IF lo_screen IS BOUND
    AND lo_screen-&gt;is_screen_edit( ) = abap_true.

    rt_is_scr_adapt =  lo_screen-&gt;is_screen_edit( ).
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="REFRESH_MAIN_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="REFRESH_MAIN_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD refresh_main_dynpro.

  main_dynpro-&gt;refresh_dynpro( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="SET_CURRENT_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="SET_CURRENT_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="SET_CURRENT_DYNPRO" SCONAME="IM_SUB_SCRN_AREA" VERSION="1" LANGU="E" DESCRIPT="IM_SUB_SCRN_AREA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCRFNAME"/>
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="SET_CURRENT_DYNPRO" SCONAME="IM_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_SUB_DYNPRO_BASE"/>
   <source>METHOD set_current_dynpro.
  DATA: lwa_sub_scr_area TYPE zcl_ic_sub_dynpro_base=&gt;t_sub_dynpro_area.

  IF im_sub_scrn_area IS INITIAL OR im_dynpro IS NOT BOUND.
    RETURN.
  ENDIF.

  im_dynpro-&gt;set_scrn_area( im_sub_scrn_area ).

  lwa_sub_scr_area-sub_scrn_area = im_sub_scrn_area.
  lwa_sub_scr_area-nr = im_dynpro-&gt;get_screen_nr( ).
  lwa_sub_scr_area-dynpro_nr = im_dynpro-&gt;get_dynpro_nr( ).
  lwa_sub_scr_area-program = im_dynpro-&gt;get_program_name( ).

  READ TABLE current_dynpros WITH TABLE KEY sub_scrn_area = im_sub_scrn_area
                     TRANSPORTING NO FIELDS.

  IF sy-subrc = 0.
    MODIFY current_dynpros FROM lwa_sub_scr_area INDEX sy-tabix.
  ELSE.
    INSERT lwa_sub_scr_area INTO TABLE current_dynpros.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="SET_MAIN_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="SET_MAIN_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="SET_MAIN_DYNPRO" SCONAME="IM_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_MAIN_DYNPRO_BASE"/>
   <source>METHOD set_main_dynpro.

  main_dynpro = im_dynpro.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="SET_VALIDATION_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Setter for validation object" EXPOSURE="2" STATE="1" EDITORDER="21 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="SET_VALIDATION_DYNPRO" SCONAME="IM_VALIDATION_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Validating dynpro" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_VALIDATING_DYNPRO"/>
   <source>METHOD set_validation_dynpro.
  validation_dynpro = im_validation_dynpro.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="SHOW_VALIDATION" VERSION="1" LANGU="E" DESCRIPT="Show validation in dynpro" EXPOSURE="2" STATE="1" EDITORDER="22 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_DYNPRO_MANAGER" CMPNAME="SHOW_VALIDATION" SCONAME="IM_VALIDATION_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Validation IC object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_VALIDATE"/>
   <source>METHOD show_validation.

  IF validation_dynpro IS BOUND.
    validation_dynpro-&gt;clear( ).
    validation_dynpro-&gt;set_validate_object( im_validation_object ).
    validation_dynpro-&gt;display( ).
  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_GETTER_METHOD" VERSION="1" LANGU="E" DESCRIPT="IC Getter method" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_METHOD">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="M_CLASS_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_GETTER_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_GETTER_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" MTDNAME="BUILD_PARAM_BINDINGS" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCL_IC_GETTER_METHOD" REFCLSNAME="ZCL_IC_METHOD" VERSION="1" MTDNAME="EXECUTE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="BUILD_PARAM_BINDINGS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD BUILD_PARAM_BINDINGS.
  DATA: lwa_meth_descr TYPE abap_methdescr,
        lit_params TYPE abap_parmdescr_tab,
        lwa_param TYPE abap_parmdescr,
        lwa_param_bind TYPE abap_parmbind,
        lo_data_descr TYPE REF TO cl_abap_datadescr,
        lo_obj_descr TYPE REF TO cl_abap_objectdescr.

  super-&gt;build_param_bindings( ).

  lwa_meth_descr = get_method_descr( ).

  IF lwa_meth_descr IS INITIAL.
    &quot;todo throw error
  ENDIF.

  lit_params = lwa_meth_descr-parameters.

  LOOP AT lit_params INTO lwa_param WHERE ( parm_kind = cl_abap_objectdescr=&gt;receiving
                                      OR parm_kind = cl_abap_objectdescr=&gt;changing
                                      or parm_kind = cl_abap_objectdescr=&gt;exporting ).

    lo_data_descr = get_class( )-&gt;get_class_descr( )-&gt;get_method_parameter_type(
                           p_method_name = m_name
                           p_parameter_name = lwa_param-name ).


*TODO weg   IF lo_data_descr-&gt;applies_to_data_ref( m_class_attrib-&gt;get_ic_value( )-&gt;get_value_ref( ) ) = abap_true.
    IF zcl_ic_utils=&gt;match_ref_to_datadescr( im_data_ref =  m_class_attrib-&gt;get_ic_value( )-&gt;get_value_ref( )
                                             im_data_descr = lo_data_descr  ) = abap_true.

      DATA: lo_param TYPE REF TO zcl_ic_method_param,
            l_obj_nr      TYPE zic_object_nr.

      lo_param ?= zcl_ic_object=&gt;instance( i_obj_type = zcl_ic_object=&gt;c_method_param_type
                                           i_parent = me ).
      &quot;     TODO 9000 =&gt; temp created id
      l_obj_nr =  91000 + sy-tabix.
      lo_param-&gt;zif_ic_component~set_object_nr( l_obj_nr ).
      lo_param-&gt;set_ic_value( m_class_attrib-&gt;get_ic_value( ) ).
      lo_param-&gt;zif_ic_component~set_name( lwa_param-name ).

*     get parameter binding and add to table
      CLEAR lwa_param_bind.
      lwa_param_bind = lo_param-&gt;calc_param_binding( ).

      INSERT lwa_param_bind INTO TABLE m_param_bindings.
      RETURN.

    ENDIF.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_METHOD_NR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_METHOD_NR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_METHOD_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="CONSTRUCTOR" SCONAME="I_CLASS_ATTRIB" VERSION="1" LANGU="E" DESCRIPT="IC class attribute" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CLASS_ATTRIB" PAROPTIONL="X"/>
   <source>METHOD CONSTRUCTOR.

  super-&gt;constructor(
   EXPORTING
     i_class         = i_class
     i_method_nr     = i_method_nr
     i_method_name   = i_method_name
     i_description   = i_description
     i_rank          = i_rank
     i_declare_level = c_declare_instance
     ).

  m_method_type = c_getter_method.
  m_active = c_is_passive.
  m_class_attrib = i_class_attrib.

  init( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_METHOD" CMPNAME="EXECUTE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD EXECUTE.
  DATA lo_object TYPE REF TO object.

  lo_object = get_class( )-&gt;get_object( ).

  CALL METHOD lo_object-&gt;(m_name) PARAMETER-TABLE m_param_bindings.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="GET_PARAM_BINDING_REF" VERSION="1" LANGU="E" DESCRIPT="Get param_binding Ref for getter method" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_GETTER_METHOD" CMPNAME="GET_PARAM_BINDING_REF" SCONAME="RT_PARAM_BINDING_REF" VERSION="1" LANGU="E" DESCRIPT="Param binding ref from Getter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD get_param_binding_ref.
  DATA lwa_param_bind TYPE abap_parmbind.

  LOOP AT m_param_bindings INTO lwa_param_bind.
    rt_param_binding_ref = lwa_param_bind-value.
    EXIT.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" LANGU="E" DESCRIPT="IC Implementation Component" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="ZCL_IC_IMPL_COMP" REFCLSNAME="ZIF_IC_WIRABLE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="C_IMPL_CLASS" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container implementation type" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;CL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_IMPL_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="C_INJ_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container implementation type" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;IO&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_IMPL_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="M_IMPL_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container implementation type" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTVALUE="&apos;CL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_IMPL_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_IMPL_COMP" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_IMPL_COMP" REFCLSNAME="ZCL_IC_PARENT_OBJECT" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
  </inheritance>
  <method CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CONSTRUCTOR" SCONAME="I_IMPL_COMP_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container implementation context number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_IMPL_COMP_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CONSTRUCTOR" SCONAME="I_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container implementation type" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_IMPL_TYPE" PARVALUE="&apos;CL&apos;"/>
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CONSTRUCTOR" SCONAME="I_PARENT" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTEXT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <source>METHOD constructor.

  super-&gt;constructor(
    i_object_nr   = i_impl_comp_nr
    i_name        = i_name
    i_description =  i_description
    i_rank        = i_rank
   ).

  m_impl_type = i_type.

  IF i_parent IS NOT INITIAL.
    m_parent = i_parent.
  ENDIF.

  init( ).
  add_to_parent( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create an object of abstract type ZCL_IC_IMPL_COMP" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CREATE" SCONAME="I_IMPL_CTX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_IMPL_CONTEXT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CREATE" SCONAME="I_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Implementation Component number" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_IMPL_COMP_NR"/>
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CREATE" SCONAME="I_IMPL_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container implementation type" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_IMPL_TYPE" PARVALUE="&apos;CL&apos;"/>
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="CREATE" SCONAME="RT_IMPL_COMP" VERSION="1" LANGU="E" DESCRIPT="IC Implementation Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_IMPL_COMP"/>
   <source>METHOD create.

  CASE i_impl_type.
    WHEN c_impl_class.

      CREATE OBJECT rt_impl_comp TYPE zcl_ic_class
        EXPORTING
          i_class_nr = i_object_nr
          i_parent = i_impl_ctx.

  ENDCASE.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="GET_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="Get implementation context" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="GET_IMPL_CTX" SCONAME="RT_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_IMPL_CONTEXT"/>
   <source>method GET_IMPL_CTX.
  rt_impl_ctx ?= m_parent.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="GET_IMPL_TYPE" VERSION="1" LANGU="E" DESCRIPT="Get implementation type" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="GET_IMPL_TYPE" SCONAME="RT_IMPL_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container implementation type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_IMPL_TYPE"/>
   <source>METHOD get_impl_type.
  rt_impl_type = m_impl_type.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_PARENT_OBJECT" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init.

  super-&gt;init( ).

  CASE m_impl_type.
    WHEN c_impl_class.
      m_type = c_class_type.
    WHEN c_inj_object.
      m_type = c_inj_obj_type.
  ENDCASE.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="SET_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="Set implementation context" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="SET_IMPL_CTX" SCONAME="I_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_IMPL_CONTEXT"/>
   <source>method SET_IMPL_CTX.
  m_parent = i_impl_ctx.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_IMPL_CONTEXT" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_CONTEXT">
  <types CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="TY_IMPL_COMP" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_IC_IMPL_COMP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="TY_IMPL_COMPS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="4 " SRCROW2="17 " SRCCOLUMN2="43 " TYPESRC_LENG="42 " TYPESRC="ty_impl_comps TYPE TABLE OF ty_impl_comp
"/>
  <types CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="1" TYPE="ZIC_IMPL_CONTEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="20 " SRCCOLUMN1="4 " SRCROW2="24 " SRCCOLUMN2="36 " TYPESRC_LENG="251 " TYPESRC="BEGIN OF ty_object_key ,
                    cont_nr TYPE zic_impl_context-cont_nr,
                    ctx_nr TYPE zic_impl_context-ctx_nr,
                    impl_ctx_nr TYPE zic_impl_context-impl_ctx_nr,
                END  OF ty_object_key
"/>
  <implementing CLSNAME="ZCL_IC_IMPL_CONTEXT" REFCLSNAME="ZIF_IC_WIRABLE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeClasDef CLSNAME="ZCL_IC_IMPL_CONTEXT" TYPEGROUP="ZCL_IC_CLASS" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <typeClasDef CLSNAME="ZCL_IC_IMPL_CONTEXT" TYPEGROUP="ZCL_IC_INJ_OBJECT" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="M_IMPL_COMPS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TY_IMPL_COMPS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="M_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_PATH" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_IMPL_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_IMPL_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_IMPL_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_IMPL_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_IMPL_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_RELATIONS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_IMPL_CONTEXT" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_IMPL_CONTEXT" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.
  FIELD-SYMBOLS: &lt;lwa_ic_ctx&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_ctx&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_ctx&gt; TO  l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-cont_nr IS INITIAL
      AND get_container( ) IS NOT BOUND.

      CREATE OBJECT m_container
        EXPORTING
          i_object_nr = l_struct-cont_nr.
    ENDIF.

    IF NOT l_struct-impl_ctx_nr IS INITIAL.
      m_object_number = l_struct-impl_ctx_nr .
    ENDIF.

    IF NOT l_struct-ctx_name IS INITIAL.
      m_name = l_struct-ctx_name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-rank IS INITIAL.
      m_rank = l_struct-rank.
    ENDIF.

    IF NOT l_struct-path IS INITIAL.
      m_path = l_struct-path.
    ENDIF.

  ENDIF.

  init( ).
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_IMPL_CONTEXT" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>method ZIF_IC_META_INFO~GET_KEY_STRUCT.

 FIELD-SYMBOLS &lt;lwa_ic_cont_key&gt; TYPE ty_object_key.
  DATA lwa_ic_cont_key TYPE ty_object_key.

* fill key data
  lwa_ic_cont_key-cont_nr = get_container( )-&gt;get_object_nr( ).
  lwa_ic_cont_key-ctx_nr = M_PARENT-&gt;get_object_nr( ).
  lwa_ic_cont_key-impl_ctx_nr = get_object_nr( ).

  CREATE DATA rt_comp_key_struct TYPE ty_object_key.
  ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_cont_key&gt;.

  &lt;lwa_ic_cont_key&gt; = lwa_ic_cont_key.

endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_IMPL_CONTEXT" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.

  FIELD-SYMBOLS &lt;lwa_ic_ctx&gt; TYPE ty_object.
  DATA: lwa_ic_ctx TYPE ty_object,
        l_path_begin TYPE c.

* fill fields
  lwa_ic_ctx-cont_nr = get_container( )-&gt;get_object_nr( ).
  lwa_ic_ctx-ctx_nr = m_parent-&gt;get_object_nr( ).
  lwa_ic_ctx-impl_ctx_nr = zif_ic_component~get_object_nr( ).
  lwa_ic_ctx-ctx_name = zif_ic_component~get_name( ).
  lwa_ic_ctx-ctx_type = get_context_type( ).
  lwa_ic_ctx-description = get_description( ).
  lwa_ic_ctx-rank = get_rank( ).

* save new path only when there is a root, else take the old one
  MOVE get_path( ) TO l_path_begin.

  IF l_path_begin = zif_ic_composite=&gt;c_path_token.
    lwa_ic_ctx-path = get_path( ).
  ELSE.
    lwa_ic_ctx-path = m_path.
  ENDIF.

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_ctx&gt;.

  &lt;lwa_ic_ctx&gt; = lwa_ic_ctx.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_IMPL_CONTEXT" CPDNAME="ZIF_IC_META_INFO~GET_RELATIONS">
   <source>method ZIF_IC_META_INFO~GET_RELATIONS.
  DATA: lwa_rel TYPE zif_ic_meta_info~ty_relation,
        l_inner_parent TYPE zcl_ic_cont_context=&gt;ty_object-parent_ctx.

  super-&gt;zif_ic_meta_info~get_relations( IMPORTING ex_relations = ex_relations ).

* Add relation 1
  clear lwa_rel.

  lwa_rel-rel_type = &apos;LR&apos;.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_class_type.

  APPEND lwa_rel TO ex_relations.

* Add relation 2
  clear lwa_rel.

  lwa_rel-rel_type = &apos;LR&apos;.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_inj_obj_type.

  APPEND lwa_rel TO ex_relations.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_IMPL_CONTEXT" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD zif_ic_meta_info~get_table_name.
  rt_table_name = c_impl_context_table.
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_IMPL_CONTEXT" CPDNAME="ZIF_IC_WIRABLE~WIRE">
   <source>METHOD zif_ic_wirable~wire.
  DATA: lo_impl TYPE REF TO zif_ic_wirable.

  fill_impl_comps( ).

  LOOP AT m_impl_comps INTO lo_impl.
    lo_impl-&gt;wire( ).
  ENDLOOP.

ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_CONT" VERSION="1" LANGU="E" DESCRIPT="IC object number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_CTX_NR" VERSION="1" LANGU="E" DESCRIPT="IC context number" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CTX_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="IC Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="IC description" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_PARENT_CTX" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <source>METHOD constructor.

  CALL METHOD super-&gt;constructor
    EXPORTING
      i_cont        = i_cont
      i_ctx_nr      = i_ctx_nr
      i_name        = i_name
      i_description = i_description
      i_ctx_type    = c_impl_ctx
      i_parent_ctx  = i_parent_ctx
      i_rank        = i_rank.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="FILL_IMPL_COMPS" VERSION="1" LANGU="E" DESCRIPT="Fill private member with implementation components" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD fill_impl_comps.
  DATA: lo_child TYPE zif_ic_component~ty_comp_tab_entry,
        lo_impl TYPE ty_impl_comp,
        lit_childs TYPE zif_ic_composite=&gt;ty_comp_tab_entries.

  REFRESH m_impl_comps.

  lit_childs = m_childs.

  LOOP AT lit_childs INTO lo_child WHERE comp_type = zcl_ic_object=&gt;c_inj_obj_type.
    DATA lo_inj_obj TYPE REF TO zcl_ic_inj_object.

    lo_inj_obj ?= lo_child-comp.
    load_inj_objects( lo_inj_obj ).
  ENDLOOP.

  REFRESH lit_childs.

  LOOP AT m_childs INTO lo_child.
    CLEAR lo_impl.

    lo_impl ?= lo_child-comp.
    APPEND lo_impl TO m_impl_comps.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_CLASS" VERSION="1" LANGU="E" DESCRIPT="Return a class by nr" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_CLASS" SCONAME="I_CLASS_NR" VERSION="1" LANGU="E" DESCRIPT="IC class number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLASS_NR"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_CLASS" SCONAME="RT_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>method GET_CLASS.

 rt_ic_class ?=  me-&gt;zif_ic_composite~get_child(
                          i_comp_type  = zcl_ic_object=&gt;c_class_type
                          i_object_nr  = i_class_nr  ).


endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_CLASSES" VERSION="1" LANGU="E" DESCRIPT="Return all classes" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_CLASSES" SCONAME="E_CLASSES" VERSION="1" LANGU="E" DESCRIPT="All classes in the impl. context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCL_IC_CLASS=&gt;TY_CLASSES"/>
   <source>METHOD get_classes.
  DATA l_child TYPE zif_ic_component~ty_comp_tab_entry.

  REFRESH m_impl_comps.

  LOOP AT m_childs INTO l_child WHERE comp_type = zcl_ic_class=&gt;c_class_type.
    DATA lo_class TYPE ZCL_IC_CLASS=&gt;TY_CLASS.

    lo_class ?= l_child-comp.
    APPEND lo_class TO e_classes.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_CLASS_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Return a class by name" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_CLASS_BY_NAME" SCONAME="IM_CLASS_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLASS_NAME"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_CLASS_BY_NAME" SCONAME="RT_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>method GET_CLASS_BY_NAME.

 rt_ic_class ?=  me-&gt;zif_ic_composite~get_child_by_name(
                          i_path_name  = im_class_name  ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_INJ_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Return an injection object by nr" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_INJ_OBJECT" SCONAME="IM_INJ_OBJ_NR" VERSION="1" LANGU="E" DESCRIPT="IC injection object number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_INJ_OBJ_NR"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_INJ_OBJECT" SCONAME="RT_INJ_OBJ" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_INJ_OBJECT"/>
   <source>method GET_INJ_OBJECT.

 rt_inj_obj ?=  me-&gt;zif_ic_composite~get_child(
                          i_comp_type  = zcl_ic_object=&gt;c_inj_obj_type
                          i_object_nr  = im_inj_obj_nr ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_INJ_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="Return all injection objects" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_INJ_OBJECTS" SCONAME="EX_INJ_OBJECTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCL_IC_INJ_OBJECT=&gt;TY_INJ_OBJECTS"/>
   <source>METHOD GET_INJ_OBJECTS.
  DATA l_child TYPE zif_ic_component~ty_comp_tab_entry.

  LOOP AT m_childs INTO l_child WHERE comp_type = zcl_ic_object=&gt;c_inj_obj_type.
    DATA lo_inj_obj TYPE zcl_ic_inj_object=&gt;ty_inj_object.

    lo_inj_obj ?= l_child-comp.
    APPEND lo_inj_obj TO ex_inj_objects.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_INJ_OBJ_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Return an injection object by name" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_INJ_OBJ_BY_NAME" SCONAME="IM_INJ_OBJ_NAME" VERSION="1" LANGU="E" DESCRIPT="IC injection object name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_INJ_OBJ_NAME"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="GET_INJ_OBJ_BY_NAME" SCONAME="RT_IC_INJ_OBJ" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_INJ_OBJECT"/>
   <source>METHOD get_inj_obj_by_name.

  rt_ic_inj_obj ?=  me-&gt;zif_ic_composite~get_child_by_name(
                               i_path_name  = im_inj_obj_name ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="LOAD_INJ_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="Load injection objects into context" EXPOSURE="1" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="LOAD_INJ_OBJECTS" SCONAME="IM_INJ_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_INJ_OBJECT"/>
   <source>METHOD load_inj_objects.
  DATA: lit_comp TYPE zif_ic_composite=&gt;ty_comp_tab_entries,
        lwa_comp TYPE  zif_ic_composite=&gt;ty_comp_tab_entry.

  im_inj_object-&gt;load_ctx( ).
  lit_comp = im_inj_object-&gt;get_inj_type( )-&gt;zif_ic_composite~get_children( ).

  LOOP AT lit_comp INTO lwa_comp.

    IF lwa_comp-comp_type = zcl_ic_object=&gt;c_inj_obj_type.
      DATA lo_inj_obj TYPE REF TO zcl_ic_inj_object.

      lo_inj_obj ?= lwa_comp-comp.
      load_inj_objects( lo_inj_obj ).
    ELSE.
      zif_ic_composite~add( lwa_comp-comp ).
    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="SEARCH_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="Search for the impl ctx from a component" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="SEARCH_IMPL_CTX" SCONAME="IM_IMPL_COMP" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <parameter CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="SEARCH_IMPL_CTX" SCONAME="RT_IMPL_CTX" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_IMPL_CONTEXT"/>
   <source>METHOD search_impl_ctx.
  DATA lo_impl_obj TYPE REF TO zif_ic_component.

  lo_impl_obj = im_impl_comp.

  WHILE lo_impl_obj IS BOUND
    AND lo_impl_obj-&gt;get_type( ) &lt;&gt; zcl_ic_object=&gt;c_impl_context_type.

    lo_impl_obj = lo_impl_obj-&gt;get_parent( ).

    IF lo_impl_obj-&gt;get_type( ) = zcl_ic_object=&gt;c_impl_context_type.
      rt_impl_ctx ?= lo_impl_obj.
    ENDIF.

  ENDWHILE.

ENDMETHOD.</source>
  </method>
  <aliasMethod CLSNAME="ZCL_IC_IMPL_CONTEXT" CMPNAME="WIRE" VERSION="1" EXPOSURE="0" CMPTYPE="0" REFCLSNAME="ZIF_IC_WIRABLE" REFCMPNAME="WIRE"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_INJ_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_IMPL_COMP">
  <types CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC injection type object implementation component" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="ZIC_INJ_OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="17 " SRCCOLUMN2="38 " TYPESRC_LENG="133 " TYPESRC="BEGIN OF ty_object_key ,
                      inj_obj_nr TYPE zic_inj_object-inj_obj_nr,
                  END  OF ty_object_key
"/>
  <types CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="TY_INJ_OBJECT" VERSION="1" LANGU="E" DESCRIPT="IC Injection Object" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZCL_IC_INJ_OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="TY_INJ_OBJECTS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="20 " SRCCOLUMN1="4 " SRCROW2="20 " SRCCOLUMN2="45 " TYPESRC_LENG="44 " TYPESRC="ty_inj_objects TYPE TABLE OF ty_inj_object
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_IC_INJ_OBJECT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <typeClasDef CLSNAME="ZCL_IC_INJ_OBJECT" TYPEGROUP="ZCL_IC_CLASS_ATTRIB" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <typeClasDef CLSNAME="ZCL_IC_INJ_OBJECT" TYPEGROUP="ZCL_IC_METHOD" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="C_INJ_OBJ_TABLE" VERSION="1" LANGU="E" DESCRIPT="Table Name" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;ZIC_INJ_OBJECT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TABNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="M_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_IC_INJ_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_INJ_OBJECT" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_INJ_OBJECT" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="INIT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJECT" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJECT" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJECT" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJECT" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_OBJECT" REFCLSNAME="ZCL_IC_IMPL_COMP" VERSION="1" MTDNAME="ZIF_IC_WIRABLE~WIRE" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJECT" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.

    FIELD-SYMBOLS: &lt;lwa_ic_inj_obj&gt; TYPE any.
    DATA l_struct TYPE ty_object.

    ASSIGN i_structure-&gt;* TO &lt;lwa_ic_inj_obj&gt;.

    MOVE-CORRESPONDING &lt;lwa_ic_inj_obj&gt; TO  l_struct.

*   move data
    IF NOT l_struct IS INITIAL.

      m_object_number = l_struct-inj_obj_nr.
      m_name = l_struct-impl_name.
      m_description = l_struct-description.
      m_rank = l_struct-rank.
    ENDIF.

    init( ).

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~FILL_BY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJECT" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>METHOD zif_ic_meta_info~get_key_struct.

    FIELD-SYMBOLS &lt;lwa_ic_inj_obj_key&gt; TYPE ty_object_key.
    DATA lwa_ic_inj_obj_key TYPE ty_object_key.

*   fill key data
    lwa_ic_inj_obj_key-inj_obj_nr = get_object_nr( ).


    CREATE DATA rt_comp_key_struct TYPE ty_object_key.
    ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_inj_obj_key&gt;.

    &lt;lwa_ic_inj_obj_key&gt; = lwa_ic_inj_obj_key.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_KEY_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJECT" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.

    FIELD-SYMBOLS &lt;lwa_ic_inj_obj&gt; TYPE ty_object.
    DATA: lwa_ic_inj_obj TYPE ty_object.

* fill fields
    lwa_ic_inj_obj-inj_obj_nr = zif_ic_component~get_object_nr( ).
    lwa_ic_inj_obj-impl_name = m_name.
    lwa_ic_inj_obj-description = m_description.
    lwa_ic_inj_obj-rank = m_rank.
    lwa_ic_inj_obj-path = get_path( ).

*   foreign key for Injection type
    IF m_inj_type IS BOUND.
      DATA l_inj_type_ref TYPE REF TO data.
      FIELD-SYMBOLS: &lt;lwa_inj_type_key&gt; TYPE zcl_ic_inj_type=&gt;ty_object_key.

      l_inj_type_ref = m_inj_type-&gt;zif_ic_component~get_key_struct( ).
      ASSIGN l_inj_type_ref-&gt;* TO &lt;lwa_inj_type_key&gt;.

      IF &lt;lwa_inj_type_key&gt; IS ASSIGNED.
        lwa_ic_inj_obj-inj_type_cont = &lt;lwa_inj_type_key&gt;-cont_nr.
        lwa_ic_inj_obj-inj_type_ctx = &lt;lwa_inj_type_key&gt;-ctx_nr.
        lwa_ic_inj_obj-inj_type_ictx = &lt;lwa_inj_type_key&gt;-impl_ctx_nr.
      ENDIF.
    ENDIF.

    CREATE DATA rt_obj_struct TYPE ty_object.
    ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_inj_obj&gt;.

    &lt;lwa_ic_inj_obj&gt; = lwa_ic_inj_obj.

  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_OBJ_STRUCT</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJECT" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD ZIF_IC_META_INFO~GET_TABLE_NAME.
    rt_table_name = c_inj_obj_table.
  ENDMETHOD.                    &quot;ZIF_IC_META_INFO~GET_TABLE_NAME</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_OBJECT" CPDNAME="ZIF_IC_WIRABLE~WIRE">
   <source>method ZIF_IC_WIRABLE~WIRE.
**TRY.
*CALL METHOD SUPER-&gt;ZIF_IC_WIRABLE~WIRE
    .
** CATCH zcx_ic_error .
**ENDTRY.
endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_INJ_OBJ_NR" VERSION="1" LANGU="E" DESCRIPT="Class number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_IMPL_COMP_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_PARENT" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTEXT" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <source>METHOD CONSTRUCTOR.

    super-&gt;constructor(
      EXPORTING
        i_impl_comp_nr = i_inj_obj_nr
        i_name = i_name
        i_description = i_description
        i_type = zcl_ic_impl_comp=&gt;c_inj_object
        i_parent = i_parent
        i_rank = i_rank
      ).

    init( ).
  ENDMETHOD.                    &quot;CONSTRUCTOR</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="GET_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Getter for Injection type" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="GET_INJ_TYPE" SCONAME="RT_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_INJ_TYPE"/>
   <source>METHOD get_inj_type.
  rt_inj_type = m_inj_type.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_IMPL_COMP" CMPNAME="INIT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD INIT.
  super-&gt;init( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="LOAD_CTX" VERSION="1" LANGU="E" DESCRIPT="Load injection type context" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method LOAD_CTX.
  zcl_ic_inj_type=&gt;load_ctx( CHANGING ch_inj_type = m_inj_type ).
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="SEARCH_VALUE" VERSION="1" LANGU="E" DESCRIPT="Search value by number" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="SEARCH_VALUE" SCONAME="IM_VALUE_NR" VERSION="1" LANGU="E" DESCRIPT="IC value number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_VALUE_NR"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="SEARCH_VALUE" SCONAME="IM_PARENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="SEARCH_VALUE" SCONAME="RT_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_VALUE"/>
   <source>METHOD search_value.

  rt_value = get_impl_ctx( )-&gt;search_value( im_value_nr = im_value_nr ).

  IF rt_value IS NOT BOUND.
    rt_value = get_inj_type( )-&gt;search_value( im_value_nr = im_value_nr ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="SET_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Setter for Injection type" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_OBJECT" CMPNAME="SET_INJ_TYPE" SCONAME="IM_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_INJ_TYPE"/>
   <source>METHOD SET_INJ_TYPE.
  m_inj_type = im_inj_type.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC injection type" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_CONTEXT">
  <types CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="TY_IMPL_COMP" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_IC_IMPL_COMP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="TY_IMPL_COMPS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="12 " SRCCOLUMN1="4 " SRCROW2="12 " SRCCOLUMN2="43 " TYPESRC_LENG="42 " TYPESRC="ty_impl_comps TYPE TABLE OF ty_impl_comp
"/>
  <types CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="TY_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="1" TYPE="ZIC_IMPL_CONTEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="TY_OBJECT_KEY" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="19 " SRCCOLUMN2="36 " TYPESRC_LENG="251 " TYPESRC="BEGIN OF ty_object_key ,
                    cont_nr TYPE zic_impl_context-cont_nr,
                    ctx_nr TYPE zic_impl_context-ctx_nr,
                    impl_ctx_nr TYPE zic_impl_context-impl_ctx_nr,
                END  OF ty_object_key
"/>
  <implementing CLSNAME="ZCL_IC_INJ_TYPE" REFCLSNAME="ZIF_IC_WIRABLE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeClasDef CLSNAME="ZCL_IC_INJ_TYPE" TYPEGROUP="ZCL_IC_CLASS" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <typeClasDef CLSNAME="ZCL_IC_INJ_TYPE" TYPEGROUP="ZCL_IC_INJ_OBJECT" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="M_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIC_PATH" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_IC_INJ_TYPE" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_IC_INJ_TYPE" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_TYPE" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_TYPE" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_TYPE" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_RELATIONS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZCL_IC_INJ_TYPE" REFCLSNAME="ZCL_IC_CONTEXT" VERSION="1" MTDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME" EXPOSURE="2"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_TYPE" CPDNAME="ZIF_IC_META_INFO~FILL_BY_STRUCT">
   <source>METHOD zif_ic_meta_info~fill_by_struct.
  FIELD-SYMBOLS: &lt;lwa_ic_ctx&gt; TYPE any.
  DATA l_struct TYPE ty_object.

  ASSIGN i_structure-&gt;* TO &lt;lwa_ic_ctx&gt;.

  MOVE-CORRESPONDING &lt;lwa_ic_ctx&gt; TO  l_struct.

* move data
  IF NOT l_struct IS INITIAL.

    IF NOT l_struct-cont_nr IS INITIAL
      AND get_container( ) IS NOT BOUND.

      CREATE OBJECT m_container
        EXPORTING
          i_object_nr = l_struct-cont_nr.
    ENDIF.

    IF m_parent IS NOT BOUND.
      DATA lo_i_ctx TYPE REF TO zcl_ic_cont_context.

      CREATE OBJECT lo_i_ctx
        EXPORTING
          i_cont   = m_container
          i_ctx_nr = l_struct-ctx_nr.

      m_parent = lo_i_ctx.
    ENDIF.

    IF NOT l_struct-impl_ctx_nr IS INITIAL.
      m_object_number = l_struct-impl_ctx_nr .
    ENDIF.

    IF NOT l_struct-ctx_name IS INITIAL.
      m_name = l_struct-ctx_name.
    ENDIF.

    IF NOT l_struct-description IS INITIAL.
      m_description = l_struct-description.
    ENDIF.

    IF NOT l_struct-rank IS INITIAL.
      m_rank = l_struct-rank.
    ENDIF.

    IF NOT l_struct-path IS INITIAL.
      m_path = l_struct-path.
    ENDIF.

  ENDIF.

  init( ).
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_TYPE" CPDNAME="ZIF_IC_META_INFO~GET_KEY_STRUCT">
   <source>METHOD zif_ic_meta_info~get_key_struct.

  FIELD-SYMBOLS &lt;lwa_ic_cont_key&gt; TYPE ty_object_key.
  DATA lwa_ic_cont_key TYPE ty_object_key.

* fill key data
  IF get_container( ) IS BOUND.
    lwa_ic_cont_key-cont_nr = get_container( )-&gt;get_object_nr( ).
  ENDIF.

  IF m_parent IS BOUND.
    lwa_ic_cont_key-ctx_nr = m_parent-&gt;get_object_nr( ).
  ENDIF.

  lwa_ic_cont_key-impl_ctx_nr = get_object_nr( ).

  CREATE DATA rt_comp_key_struct TYPE ty_object_key.
  ASSIGN rt_comp_key_struct-&gt;* TO &lt;lwa_ic_cont_key&gt;.

  &lt;lwa_ic_cont_key&gt; = lwa_ic_cont_key.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_TYPE" CPDNAME="ZIF_IC_META_INFO~GET_OBJ_STRUCT">
   <source>METHOD zif_ic_meta_info~get_obj_struct.

  FIELD-SYMBOLS &lt;lwa_ic_ctx&gt; TYPE ty_object.
  DATA: lwa_ic_ctx TYPE ty_object,
        l_path_begin TYPE c.

* fill fields
  IF get_container( ) IS BOUND.
    lwa_ic_ctx-cont_nr = get_container( )-&gt;get_object_nr( ).
  ENDIF.
  IF m_parent IS BOUND.
    lwa_ic_ctx-ctx_nr = m_parent-&gt;get_object_nr( ).
  ENDIF.
  lwa_ic_ctx-impl_ctx_nr = zif_ic_component~get_object_nr( ).
  lwa_ic_ctx-ctx_name = zif_ic_component~get_name( ).
  lwa_ic_ctx-ctx_type = get_context_type( ).
  lwa_ic_ctx-description = get_description( ).
  lwa_ic_ctx-rank = get_rank( ).

* save new path only when there is a root, else take the old one
  MOVE get_path( ) TO l_path_begin.

  IF l_path_begin = zif_ic_composite=&gt;c_path_token.
    lwa_ic_ctx-path = get_path( ).
  ELSE.
    lwa_ic_ctx-path = m_path.
  ENDIF.

  CREATE DATA rt_obj_struct TYPE ty_object.
  ASSIGN rt_obj_struct-&gt;* TO &lt;lwa_ic_ctx&gt;.

  &lt;lwa_ic_ctx&gt; = lwa_ic_ctx.

ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_TYPE" CPDNAME="ZIF_IC_META_INFO~GET_RELATIONS">
   <source>method ZIF_IC_META_INFO~GET_RELATIONS.
  DATA: lwa_rel TYPE zif_ic_meta_info~ty_relation,
        l_inner_parent TYPE zcl_ic_cont_context=&gt;ty_object-parent_ctx.

  super-&gt;zif_ic_meta_info~get_relations( IMPORTING ex_relations = ex_relations ).

* Add relation 1
  clear lwa_rel.

  lwa_rel-rel_type = &apos;LR&apos;.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_class_type.

  APPEND lwa_rel TO ex_relations.

* Add relation 2
  clear lwa_rel.

  lwa_rel-rel_type = &apos;LR&apos;.
  lwa_rel-parent = get_type( ).
  lwa_rel-child = c_inj_obj_type.

  APPEND lwa_rel TO ex_relations.
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_TYPE" CPDNAME="ZIF_IC_META_INFO~GET_TABLE_NAME">
   <source>METHOD ZIF_IC_META_INFO~GET_TABLE_NAME.
  rt_table_name = c_inj_context_table.
ENDMETHOD.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_IC_INJ_TYPE" CPDNAME="ZIF_IC_WIRABLE~WIRE">
   <source>METHOD ZIF_IC_WIRABLE~WIRE.
ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="CONSTRUCTOR" SCONAME="I_CONT" VERSION="1" LANGU="E" DESCRIPT="IC object number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_CONTAINER" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="CONSTRUCTOR" SCONAME="I_CTX_NR" VERSION="1" LANGU="E" DESCRIPT="IC context number" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CTX_NR" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="IC Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="CONSTRUCTOR" SCONAME="I_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="IC description" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="CONSTRUCTOR" SCONAME="I_PARENT_CTX" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Context" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="CONSTRUCTOR" SCONAME="I_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK" PARVALUE="0"/>
   <source>METHOD CONSTRUCTOR.

  CALL METHOD super-&gt;constructor
    EXPORTING
      i_cont        = i_cont
      i_ctx_nr      = i_ctx_nr
      i_name        = i_name
      i_description = i_description
      i_ctx_type    = c_inj_sub_type
      i_parent_ctx  = i_parent_ctx
      i_rank        = i_rank.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_CLASS" VERSION="1" LANGU="E" DESCRIPT="Return a class by nr" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_CLASS" SCONAME="I_CLASS_NR" VERSION="1" LANGU="E" DESCRIPT="IC class number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLASS_NR"/>
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_CLASS" SCONAME="RT_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>method GET_CLASS.

 rt_ic_class ?=  me-&gt;zif_ic_composite~get_child(
                          i_comp_type  = zcl_ic_object=&gt;c_class_type
                          i_object_nr  = i_class_nr  ).


endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_CLASSES" VERSION="1" LANGU="E" DESCRIPT="Return all classes" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_CLASSES" SCONAME="E_CLASSES" VERSION="1" LANGU="E" DESCRIPT="All classes in the impl. context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ZCL_IC_CLASS=&gt;TY_CLASSES"/>
   <source>METHOD GET_CLASSES.
  DATA l_child TYPE zif_ic_component~ty_comp_tab_entry.

  LOOP AT m_childs INTO l_child WHERE comp_type = zcl_ic_class=&gt;c_class_type.
    DATA lo_class TYPE ZCL_IC_CLASS=&gt;TY_CLASS.

    lo_class ?= l_child-comp.
    APPEND lo_class TO e_classes.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_CLASS_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Return a class by nr" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_CLASS_BY_NAME" SCONAME="IM_CLASS_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_CLASS_NAME"/>
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_CLASS_BY_NAME" SCONAME="RT_IC_CLASS" VERSION="1" LANGU="E" DESCRIPT="IC Container Context" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_CLASS"/>
   <source>method GET_CLASS_BY_NAME.

 rt_ic_class ?=  me-&gt;zif_ic_composite~get_child_by_name(
                          i_path_name  = im_class_name  ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_INJ_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="Return all injection objects" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="GET_INJ_OBJECTS" SCONAME="EX_INJ_OBJECTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_IC_INJ_OBJECT=&gt;TY_INJ_OBJECTS"/>
   <source>METHOD get_inj_objects.
  DATA l_child TYPE zif_ic_component~ty_comp_tab_entry.


  LOOP AT m_childs INTO l_child WHERE comp_type = zcl_ic_object=&gt;c_inj_obj_type.
    DATA lo_inj_obj TYPE zcl_ic_inj_object=&gt;ty_inj_object.

    lo_inj_obj ?= l_child-comp.
    APPEND lo_inj_obj TO ex_inj_objects.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="LOAD_CTX" VERSION="1" LANGU="E" DESCRIPT="Load context for injection type" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="LOAD_CTX" SCONAME="CH_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC implementation container context" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_INJ_TYPE"/>
   <source>METHOD load_ctx.
  DATA lo_comps TYPE REF TO zif_ic_composite.

  lo_comps = ch_inj_type.

  zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_comps ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="SEARCH_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Search for the impl ctx from a component" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="SEARCH_INJ_TYPE" SCONAME="IM_IMPL_COMP" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
   <parameter CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="SEARCH_INJ_TYPE" SCONAME="RT_INJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="IC injection type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_INJ_TYPE"/>
   <source>METHOD search_inj_type.
  DATA lo_impl_obj TYPE REF TO zif_ic_component.

  lo_impl_obj = im_impl_comp.

  WHILE lo_impl_obj IS BOUND
    AND lo_impl_obj-&gt;get_type( ) &lt;&gt; zcl_ic_object=&gt;c_inj_type.

    lo_impl_obj = lo_impl_obj-&gt;get_parent( ).

    IF lo_impl_obj-&gt;get_type( ) = zcl_ic_object=&gt;c_inj_type.
      rt_inj_type ?= lo_impl_obj.
    ENDIF.

  ENDWHILE.

ENDMETHOD.</source>
  </method>
  <aliasMethod CLSNAME="ZCL_IC_INJ_TYPE" CMPNAME="WIRE" VERSION="1" EXPOSURE="0" CMPTYPE="0" REFCLSNAME="ZIF_IC_WIRABLE" REFCMPNAME="WIRE"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_IC_MAIN_DYNPRO_BASE" VERSION="1" LANGU="E" DESCRIPT="IC main dynpro base" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_IC_DYNPRO_BASE">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZCL_IC_MAIN_DYNPRO_BASE" REFCLSNAME="ZCL_IC_DYNPRO_BASE" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCL_IC_MAIN_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_IC_MAIN_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_DYNPRO_NR" VERSION="1" LANGU="E" DESCRIPT="IM_DYNPRO_NR" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYDYNNR"/>
   <parameter CLSNAME="ZCL_IC_MAIN_DYNPRO_BASE" CMPNAME="CONSTRUCTOR" SCONAME="IM_PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="IM_PROGRAM_NAME" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYST-CPROG"/>
   <source>METHOD constructor.

  super-&gt;constructor( im_dynpro_nr = im_dynpro_nr
                      im_program_name = im_program_name ).

  zcl_ic_dynpro_manager=&gt;instance( )-&gt;add_main_dynpro( me ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_IC_MAIN_DYNPRO_BASE" CMPNAME="REFRESH_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="REFRESH_DYNPRO" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD refresh_dynpro.

  DATA l_dynnr  TYPE sydynnr.

  l_dynnr = get_dynpro_nr( ).

  IF l_dynnr IS NOT INITIAL.
    LEAVE TO SCREEN l_dynnr.
  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <DOMA DOMNAME="ZIC_METHOD_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASKLEN="0000" DDTEXT="IC method name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_METHOD_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD" MASKLEN="0000" DDTEXT="IC method number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_METHOD_TYPE" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="IC method type" AUTHCLASS="00" OUTPUTSTYLE="00">
  <dd07v DOMNAME="ZIC_METHOD_TYPE" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="1" DDTEXT="Normal Method"/>
  <dd07v DOMNAME="ZIC_METHOD_TYPE" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="2" DDTEXT="Constructor Method"/>
  <dd07v DOMNAME="ZIC_METHOD_TYPE" VALPOS="0003" DDLANGUAGE="E" DOMVALUE_L="3" DDTEXT="Setter Method"/>
  <dd07v DOMNAME="ZIC_METHOD_TYPE" VALPOS="0004" DDLANGUAGE="E" DOMVALUE_L="4" DDTEXT="Getter Method"/>
 </DOMA>
 <DOMA DOMNAME="ZIC_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASKLEN="0000" DDTEXT="Intelligent Container name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_OBJECT_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" MASKLEN="0000" DDTEXT="Intelligent Container Object Number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_OBJ_TYPE" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="Intelligent Container Object Type" AUTHCLASS="00" OUTPUTSTYLE="00">
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="IC" DDTEXT="Intelligent container"/>
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="CX" DDTEXT="Container context"/>
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0003" DDLANGUAGE="E" DOMVALUE_L="IX" DDTEXT="Implementation context"/>
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0004" DDLANGUAGE="E" DOMVALUE_L="CL" DDTEXT="Class"/>
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0005" DDLANGUAGE="E" DOMVALUE_L="ME" DDTEXT="Method"/>
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0006" DDLANGUAGE="E" DOMVALUE_L="AT" DDTEXT="Class attribute"/>
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0007" DDLANGUAGE="E" DOMVALUE_L="PA" DDTEXT="Method parameter"/>
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0008" DDLANGUAGE="E" DOMVALUE_L="VA" DDTEXT="Value"/>
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0009" DDLANGUAGE="E" DOMVALUE_L="IT" DDTEXT="Injection Type"/>
  <dd07v DOMNAME="ZIC_OBJ_TYPE" VALPOS="0010" DDLANGUAGE="E" DOMVALUE_L="IO" DDTEXT="Injection Object"/>
 </DOMA>
 <DOMA DOMNAME="ZIC_OR_CTX_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" ENTITYTAB="ZIC_OR_CONTEXT" MASKLEN="0000" DDTEXT="IC Object relational context" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_OR_KEY_MAP_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000025" OUTPUTLEN="000025" DECIMALS="000000" ENTITYTAB="ZIC_OR_FK_MAP" MASKLEN="0000" DDTEXT="IC object relational key name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_OR_REL_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_OR_MAPPING" MASKLEN="0000" DDTEXT="IC Object relational number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_OR_TYPE" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" ENTITYTAB="ZIC_OR_TYPES" MASKLEN="0000" DDTEXT="IC object relational type" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_PARAM_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD_PARAM" MASKLEN="0000" DDTEXT="IC  method parameter number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_PATH" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASKLEN="0000" DDTEXT="Intelligent Container Path" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_RANK" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASKLEN="0000" DDTEXT="Intelligent Container rank" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_REL_TYPE" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="Relation Type" AUTHCLASS="00" OUTPUTSTYLE="00">
  <dd07v DOMNAME="ZIC_REL_TYPE" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="CR" DDTEXT="Composed key relation"/>
  <dd07v DOMNAME="ZIC_REL_TYPE" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="FR" DDTEXT="Foreign key relation"/>
  <dd07v DOMNAME="ZIC_REL_TYPE" VALPOS="0003" DDLANGUAGE="E" DOMVALUE_L="IR" DDTEXT="Inner Relation"/>
  <dd07v DOMNAME="ZIC_REL_TYPE" VALPOS="0004" DDLANGUAGE="E" DOMVALUE_L="LR" DDTEXT="Link Relation"/>
 </DOMA>
 <DOMA DOMNAME="ZIC_SQL_RESULT_TYPE" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="IC SQL result type" AUTHCLASS="00" OUTPUTSTYLE="00">
  <dd07v DOMNAME="ZIC_SQL_RESULT_TYPE" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="DAT" DDTEXT="Data value result"/>
  <dd07v DOMNAME="ZIC_SQL_RESULT_TYPE" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="WA" DDTEXT="Workarea  result"/>
  <dd07v DOMNAME="ZIC_SQL_RESULT_TYPE" VALPOS="0003" DDLANGUAGE="E" DOMVALUE_L="IT" DDTEXT="Internal table result"/>
 </DOMA>
 <DOMA DOMNAME="ZIC_VALUE_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASKLEN="0000" DDTEXT="IC class name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_VALUE_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_VALUE" MASKLEN="0000" DDTEXT="IC value number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_VALUE_TYPE" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="IC Value Type" AUTHCLASS="00" OUTPUTSTYLE="00">
  <dd07v DOMNAME="ZIC_VALUE_TYPE" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="DAT" DDTEXT="Data type"/>
  <dd07v DOMNAME="ZIC_VALUE_TYPE" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="TAB" DDTEXT="Table type"/>
  <dd07v DOMNAME="ZIC_VALUE_TYPE" VALPOS="0003" DDLANGUAGE="E" DOMVALUE_L="ATT" DDTEXT="Attribute type"/>
  <dd07v DOMNAME="ZIC_VALUE_TYPE" VALPOS="0004" DDLANGUAGE="E" DOMVALUE_L="OBJ" DDTEXT="Object type"/>
  <dd07v DOMNAME="ZIC_VALUE_TYPE" VALPOS="0005" DDLANGUAGE="E" DOMVALUE_L="PAR" DDTEXT="Param type"/>
  <dd07v DOMNAME="ZIC_VALUE_TYPE" VALPOS="0006" DDLANGUAGE="E" DOMVALUE_L="SQL" DDTEXT="SQL clause"/>
  <dd07v DOMNAME="ZIC_VALUE_TYPE" VALPOS="0007" DDLANGUAGE="E" DOMVALUE_L="TYP" DDTEXT="Injection type"/>
 </DOMA>
 <DOMA DOMNAME="ZIC_ATTRIB_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS_ATTRIB" MASKLEN="0000" DDTEXT="IC class attribute number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_CLASS_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASKLEN="0000" DDTEXT="IC class name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_CLASS_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASKLEN="0000" DDTEXT="IC Class number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_CLSNAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASKLEN="0000" DDTEXT="Class name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_CONT_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASKLEN="0000" DDTEXT="Intelligent Container name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_CONT_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONTAINER" MASKLEN="0000" DDTEXT="Intelligent Container number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_CONT_TYPE" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="Intelligent Container Type" AUTHCLASS="00" OUTPUTSTYLE="00">
  <dd07v DOMNAME="ZIC_CONT_TYPE" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="C" DDTEXT="Customizing container"/>
  <dd07v DOMNAME="ZIC_CONT_TYPE" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="T" DDTEXT="Type container"/>
 </DOMA>
 <DOMA DOMNAME="ZIC_CTX_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASKLEN="0000" DDTEXT="Intelligent Container context name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_CTX_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONT_CONTEXT" MASKLEN="0000" DDTEXT="Intelligent Container context number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_CTX_TYPE" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="Intelligent Container context type" AUTHCLASS="00" OUTPUTSTYLE="00">
  <dd07v DOMNAME="ZIC_CTX_TYPE" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="C" DDTEXT="Container context"/>
  <dd07v DOMNAME="ZIC_CTX_TYPE" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="I" DDTEXT="Implementation context"/>
  <dd07v DOMNAME="ZIC_CTX_TYPE" VALPOS="0003" DDLANGUAGE="E" DOMVALUE_L="T" DDTEXT="Implementation type"/>
 </DOMA>
 <DOMA DOMNAME="ZIC_DESCRIPTION" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASKLEN="0000" DDTEXT="Intelligent Container description" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_IMPL_COMP_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_IMPL_COMP" MASKLEN="0000" DDTEXT="Intelligent Container Implementation Component number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_IMPL_CTX_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_IMPL_CONTEXT" MASKLEN="0000" DDTEXT="Intelligent Container implementation context number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_IMPL_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASKLEN="0000" DDTEXT="Intelligent Container Implementation Name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_IMPL_TYPE" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="Intelligent Container implementation type" AUTHCLASS="00" OUTPUTSTYLE="00">
  <dd07v DOMNAME="ZIC_IMPL_TYPE" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="CL" DDTEXT="Class"/>
  <dd07v DOMNAME="ZIC_IMPL_TYPE" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="IO" DDTEXT="Injection Object"/>
  <dd07v DOMNAME="ZIC_IMPL_TYPE" VALPOS="0003" DDLANGUAGE="E" DOMVALUE_L="LI" DDTEXT="Link"/>
  <dd07v DOMNAME="ZIC_IMPL_TYPE" VALPOS="0004" DDLANGUAGE="E" DOMVALUE_L="FI" DDTEXT="Filter"/>
  <dd07v DOMNAME="ZIC_IMPL_TYPE" VALPOS="0005" DDLANGUAGE="E" DOMVALUE_L="SE" DDTEXT="Security Object"/>
 </DOMA>
 <DOMA DOMNAME="ZIC_INJ_OBJ_NAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASKLEN="0000" DDTEXT="IC injection object name" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZIC_INJ_OBJ_NR" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_INJ_OBJECT" MASKLEN="0000" DDTEXT="Ic injection object number" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DTEL ROLLNAME="ZIC_OR_PARENT_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_OR_TYPE" ROUTPUTLEN="000000" HEADLEN="11" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="IC object relational subtype" REPTEXT="Parent type" SCRTEXT_S="Parenttype" SCRTEXT_M="Parent type" SCRTEXT_L="Parent type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005" ENTITYTAB="ZIC_OR_TYPES" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_PARENT" DDLANGUAGE="E" DOMNAME="ZIC_OR_TYPE" ROUTPUTLEN="000000" HEADLEN="11" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="OR parent type" REPTEXT="Parent type" SCRTEXT_S="Parent" SCRTEXT_M="Parent type" SCRTEXT_L="Parent type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005" ENTITYTAB="ZIC_OR_TYPES" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_LINK_TYPE_FIELD" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="IC object relational link type Field" REPTEXT="Link type field" SCRTEXT_S="LinkTypeF" SCRTEXT_M="Link type field" SCRTEXT_L="Link type field" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_LINK_TABLE" DDLANGUAGE="E" DOMNAME="AS4TAB" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="07" SCRLEN2="10" SCRLEN3="10" DDTEXT="IC object relational link table" REPTEXT="Link table" SCRTEXT_S="Linktab" SCRTEXT_M="Link table" SCRTEXT_L="Link table" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD02L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_LINK_KEY_FIELD" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="IC object relational link key field" REPTEXT="Link key field" SCRTEXT_S="Link field" SCRTEXT_M="Link key field" SCRTEXT_L="Link key field" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_LINK_KEYMAP_FIELD" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DDTEXT="IC object relational link keymap field" REPTEXT="Link keymap field" SCRTEXT_S="LinkKeymap" SCRTEXT_M="Link keymap field" SCRTEXT_L="Link keymap field" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_KEY_PARENT" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="10" SCRLEN3="10" DDTEXT="Object relational key parent" REPTEXT="Key parent" SCRTEXT_S="Key parent" SCRTEXT_M="Key parent" SCRTEXT_L="Key parent" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_KEY_NR" DDLANGUAGE="E" DOMNAME="NUMC2" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="06" SCRLEN2="10" SCRLEN3="10" DDTEXT="Object Relational key number" REPTEXT="Key number" SCRTEXT_S="Key nr" SCRTEXT_M="Key number" SCRTEXT_L="Key number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000002" DECIMALS="000000" OUTPUTLEN="000002" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_KEY_MAP_NAME" DDLANGUAGE="E" DOMNAME="ZIC_OR_KEY_MAP_NAME" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="IC object relational key name" REPTEXT="Key mapping" SCRTEXT_S="Key map" SCRTEXT_M="Key mapping" SCRTEXT_L="Key mapping" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000025" DECIMALS="000000" OUTPUTLEN="000025" ENTITYTAB="ZIC_OR_FK_MAP" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_KEY_CHILD" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="09" SCRLEN1="09" SCRLEN2="09" SCRLEN3="09" DDTEXT="Object relational key child" REPTEXT="Key child" SCRTEXT_S="Key child" SCRTEXT_M="Key child" SCRTEXT_L="Key child" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_INNER_TYPE_FIELD" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="16" SCRLEN3="16" DDTEXT="IC object relational inner type field" REPTEXT="Inner type field" SCRTEXT_S="InnTField" SCRTEXT_M="Inner type field" SCRTEXT_L="Inner type field" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_IDENTITY" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="IC object relational identity field" REPTEXT="Identity" SCRTEXT_S="Id" SCRTEXT_M="Identity" SCRTEXT_L="Identity" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_FOREIGN_KEY" DDLANGUAGE="E" DOMNAME="CHAR61" ROUTPUTLEN="000000" HEADLEN="11" SCRLEN1="10" SCRLEN2="11" SCRLEN3="11" DDTEXT="IC object relational foreign key" REPTEXT="Foreign key" SCRTEXT_S="ForeignKey" SCRTEXT_M="Foreign key" SCRTEXT_L="Foreign key" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000061" DECIMALS="000000" OUTPUTLEN="000061" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_DESCRIPTION" DDLANGUAGE="E" DOMNAME="TEXT50" ROUTPUTLEN="000000" HEADLEN="32" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DDTEXT="IC context object relational descrition" REPTEXT="Description" SCRTEXT_S="Descr" SCRTEXT_M="Description" SCRTEXT_L="Description" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000050" DECIMALS="000000" OUTPUTLEN="000050" LOWERCASE="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_PASS_SELECT" DDLANGUAGE="E" DOMNAME="YESNO" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DDTEXT="IC object relational is passive select" REPTEXT="Is passive select" SCRTEXT_S="PassSelect" SCRTEXT_M="Is passive select" SCRTEXT_L="Is passive select" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_REL_NR" DDLANGUAGE="E" DOMNAME="ZIC_OR_REL_NR" ROUTPUTLEN="000000" HEADLEN="27" SCRLEN1="09" SCRLEN2="09" SCRLEN3="09" DDTEXT="IC Object relational number" REPTEXT="IC object relational number" SCRTEXT_S="OR-number" SCRTEXT_M="OR-number" SCRTEXT_L="OR-number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_OR_MAPPING" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_SUB_TYPE_FIELD" DDLANGUAGE="E" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="IC object relational subtype field" REPTEXT="Subtype field" SCRTEXT_S="SubTField" SCRTEXT_M="Subtype field" SCRTEXT_L="Subtype field" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" ENTITYTAB="DD03L" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_OR_TYPE" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" DDTEXT="IC object relational type" REPTEXT="Type" SCRTEXT_S="Type" SCRTEXT_M="Type" SCRTEXT_L="Type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005" ENTITYTAB="ZIC_OR_TYPES" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_TYPE_NAME" DDLANGUAGE="E" DOMNAME="CHAR30" ROUTPUTLEN="000000" HEADLEN="09" SCRLEN1="09" SCRLEN2="09" SCRLEN3="09" DDTEXT="OR Type name" REPTEXT="Type name" SCRTEXT_S="Type name" SCRTEXT_M="Type name" SCRTEXT_L="Type name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_PARAM_NR" DDLANGUAGE="E" DOMNAME="ZIC_PARAM_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="09" SCRLEN2="13" SCRLEN3="16" DDTEXT="IC method parameter number" REPTEXT="Parameter number" SCRTEXT_S="Param nr." SCRTEXT_M="Parameter nr." SCRTEXT_L="Parameter number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_METHOD_PARAM" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_PATH" DDLANGUAGE="E" DOMNAME="ZIC_PATH" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" DDTEXT="Intelligent Container Path" REPTEXT="Path" SCRTEXT_S="Path" SCRTEXT_M="Path" SCRTEXT_L="Path" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000120" DECIMALS="000000" OUTPUTLEN="000120" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_RANK" DDLANGUAGE="E" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_REL_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_REL_TYPE" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="08" SCRLEN2="13" SCRLEN3="13" DDTEXT="IC  Relation Type" REPTEXT="Relation Type" SCRTEXT_S="Rel Type" SCRTEXT_M="Relation Type" SCRTEXT_L="Relation Type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000002" DECIMALS="000000" OUTPUTLEN="000002" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_SETTER_INJ" DDLANGUAGE="E" DOMNAME="FLAG" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="16" DDTEXT="IC Setter Injection" REPTEXT="Setter Injection" SCRTEXT_S="Setter inj" SCRTEXT_M="Setter Injection" SCRTEXT_L="Setter Injection" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_SQL_RESULT_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_SQL_RESULT_TYPE" ROUTPUTLEN="000000" HEADLEN="18" SCRLEN1="10" SCRLEN2="18" SCRLEN3="20" DDTEXT="IC SQL result type" REPTEXT="IC SQL result type" SCRTEXT_S="Sql Result" SCRTEXT_M="IC SQL result type" SCRTEXT_L="IC SQL result type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000003" DECIMALS="000000" OUTPUTLEN="000003" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_VALUE_NAME" DDLANGUAGE="E" DOMNAME="ZIC_VALUE_NAME" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="08" SCRLEN2="13" SCRLEN3="13" DDTEXT="IC value name" REPTEXT="IC value name" SCRTEXT_S="IC value" SCRTEXT_M="IC value name" SCRTEXT_L="IC value name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_VALUE_NR" DDLANGUAGE="E" DOMNAME="ZIC_VALUE_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DDTEXT="IC value number" REPTEXT="IC value number" SCRTEXT_S="IC valuenr" SCRTEXT_M="IC value number" SCRTEXT_L="IC value number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_VALUE" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_VALUE_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_VALUE_TYPE" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="10" SCRLEN3="10" DDTEXT="IC Value Type" REPTEXT="Value Type" SCRTEXT_S="Value Type" SCRTEXT_M="Value Type" SCRTEXT_L="Value Type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000003" DECIMALS="000000" OUTPUTLEN="000003" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_CTX_NAME" DDLANGUAGE="E" DOMNAME="ZIC_OR_CTX_NAME" ROUTPUTLEN="000000" HEADLEN="28" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="IC Object relational context" REPTEXT="IC object relational context" SCRTEXT_S="OR-context" SCRTEXT_M="OR-context" SCRTEXT_L="OR-context" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000020" DECIMALS="000000" OUTPUTLEN="000020" ENTITYTAB="ZIC_OR_CONTEXT" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_ATTRIB_NR" DDLANGUAGE="E" DOMNAME="ZIC_ATTRIB_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DDTEXT="IC class attribute number" REPTEXT="Attribute number" SCRTEXT_S="Attrib nr." SCRTEXT_M="Attribute number" SCRTEXT_L="Attribute number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_CLASS_ATTRIB" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CLASS_DEFCONSTR" DDLANGUAGE="E" DOMNAME="YESNO" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="10" SCRLEN2="19" SCRLEN3="19" DDTEXT="IC Default Constructor" REPTEXT="Default constructor" SCRTEXT_S="Def contsr" SCRTEXT_M="Default constructor" SCRTEXT_L="Default constructor" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CLASS_NAME" DDLANGUAGE="E" DOMNAME="ZIC_CLASS_NAME" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="08" SCRLEN2="13" SCRLEN3="13" DDTEXT="IC class name" REPTEXT="IC Class Name" SCRTEXT_S="IC Class" SCRTEXT_M="IC Class Name" SCRTEXT_L="IC Class Name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CLASS_NR" DDLANGUAGE="E" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_CLASS" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CLSNAME" DDLANGUAGE="E" DOMNAME="ZIC_CLSNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="Class name" REPTEXT="Class name" SCRTEXT_S="Class name" SCRTEXT_M="Class name" SCRTEXT_L="Class name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000120" DECIMALS="000000" OUTPUTLEN="000120" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CONT_NAME" DDLANGUAGE="E" DOMNAME="ZIC_CONT_NAME" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DDTEXT="Intelligent Container Name" REPTEXT="Container name" SCRTEXT_S="Cont. name" SCRTEXT_M="Container name" SCRTEXT_L="Container name" AUTHCLASS="00" DTELMASTER="E" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="NAME" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CONT_NR" DDLANGUAGE="E" DOMNAME="ZIC_CONT_NR" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="09" SCRLEN2="17" SCRLEN3="17" DDTEXT="Intelligent Container number" REPTEXT="iContainer number" SCRTEXT_S="iC number" SCRTEXT_M="iContainer number" SCRTEXT_L="iContainer number" AUTHCLASS="00" DTELMASTER="E" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="CONT_NR" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_CONTAINER" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CONT_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_CONT_TYPE" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="09" SCRLEN2="14" SCRLEN3="14" DDTEXT="Intelligent Container type" REPTEXT="Container type" SCRTEXT_S="Cont type" SCRTEXT_M="Container type" SCRTEXT_L="Container type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CTX_NAME" DDLANGUAGE="E" DOMNAME="ZIC_CTX_NAME" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="08" SCRLEN2="12" SCRLEN3="12" DDTEXT="Intelligent Container context name" REPTEXT="Context name" SCRTEXT_S="Ctx name" SCRTEXT_M="Context name" SCRTEXT_L="Context name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CTX_NR" DDLANGUAGE="E" DOMNAME="ZIC_CTX_NR" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DDTEXT="Intelligent Container context number" REPTEXT="Context number" SCRTEXT_S="Ctx number" SCRTEXT_M="Context number" SCRTEXT_L="Context number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_CONT_CONTEXT" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_CTX_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_CTX_TYPE" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="08" SCRLEN2="12" SCRLEN3="12" DDTEXT="Intelligent Container Context Type" REPTEXT="Context type" SCRTEXT_S="Ctx type" SCRTEXT_M="Context type" SCRTEXT_L="Context type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_DESCRIPTION" DDLANGUAGE="E" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" DECIMALS="000000" OUTPUTLEN="000060" LOWERCASE="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_IMPL_COMP_NR" DDLANGUAGE="E" DOMNAME="ZIC_IMPL_COMP_NR" ROUTPUTLEN="000000" HEADLEN="31" SCRLEN1="10" SCRLEN2="17" SCRLEN3="31" DDTEXT="Intelligent Container Implementation Component number" REPTEXT="Implementation Component number" SCRTEXT_S="ImpComp nr" SCRTEXT_M="Impl component nr" SCRTEXT_L="Implementation Component number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_IMPL_COMP" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_IMPL_CTX_NR" DDLANGUAGE="E" DOMNAME="ZIC_IMPL_CTX_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="Intelligent Container implementation context number" REPTEXT="impl ctx number" SCRTEXT_S="impl ctxnr" SCRTEXT_M="impl ctx number" SCRTEXT_L="impl ctx number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_IMPL_CONTEXT" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_CLASS_NAME" DDLANGUAGE="E" DOMNAME="SEOCLSNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="IC object relational class name" REPTEXT="Class name" SCRTEXT_S="Class" SCRTEXT_M="Class name" SCRTEXT_L="Class name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OR_CHILD" DDLANGUAGE="E" DOMNAME="ZIC_OR_TYPE" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="OR child type" REPTEXT="Child type" SCRTEXT_S="Child type" SCRTEXT_M="Child type" SCRTEXT_L="Child type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005" ENTITYTAB="ZIC_OR_TYPES" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OBJ_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_OBJ_TYPE" ROUTPUTLEN="000000" HEADLEN="11" SCRLEN1="08" SCRLEN2="11" SCRLEN3="11" DDTEXT="Intelligent Container Object Type" REPTEXT="Object type" SCRTEXT_S="Obj type" SCRTEXT_M="Object type" SCRTEXT_L="Object type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000002" DECIMALS="000000" OUTPUTLEN="000002" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_OBJECT_NR" DDLANGUAGE="E" DOMNAME="ZIC_OBJECT_NR" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="06" SCRLEN2="06" SCRLEN3="06" DDTEXT="Intelligent Container Object Number" REPTEXT="Number" SCRTEXT_S="Number" SCRTEXT_M="Number" SCRTEXT_L="Number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_NAME" DDLANGUAGE="E" DOMNAME="ZIC_NAME" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" DDTEXT="Intelligent Container Name" REPTEXT="Name" SCRTEXT_S="Name" SCRTEXT_M="Name" SCRTEXT_L="Name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_METHOD_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_METHOD_TYPE" ROUTPUTLEN="000000" HEADLEN="11" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="IC method type" REPTEXT="Method Type" SCRTEXT_S="MethodType" SCRTEXT_M="Method Type" SCRTEXT_L="Method Type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_METHOD_NR" DDLANGUAGE="E" DOMNAME="ZIC_METHOD_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DDTEXT="IC method number" REPTEXT="IC method number" SCRTEXT_S="IC meth nr" SCRTEXT_M="IC method number" SCRTEXT_L="IC method number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_METHOD" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_METHOD_NAME" DDLANGUAGE="E" DOMNAME="ZIC_METHOD_NAME" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="09" SCRLEN2="14" SCRLEN3="14" DDTEXT="IC Method name" REPTEXT="IC Method Name" SCRTEXT_S="IC Methnm" SCRTEXT_M="IC Method Name" SCRTEXT_L="IC Method Name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_METHOD_ACTIVE" DDLANGUAGE="E" DOMNAME="YESNO" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="06" SCRLEN2="16" SCRLEN3="16" DDTEXT="IC Method is active or passive" REPTEXT="Method is active" SCRTEXT_S="Active" SCRTEXT_M="Method is active" SCRTEXT_L="Method is active" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_INJ_OBJ_NR" DDLANGUAGE="E" DOMNAME="ZIC_INJ_OBJ_NR" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DDTEXT="IC injection object number" REPTEXT="Inj object number" SCRTEXT_S="I.Obj. nr." SCRTEXT_M="Inj object number" SCRTEXT_L="Inj object number" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" DECIMALS="000000" OUTPUTLEN="000008" ENTITYTAB="ZIC_INJ_OBJECT" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_INJ_OBJ_NAME" DDLANGUAGE="E" DOMNAME="ZIC_INJ_OBJ_NAME" ROUTPUTLEN="000000" HEADLEN="26" SCRLEN1="10" SCRLEN2="20" SCRLEN3="26" DDTEXT="IC injection object name" REPTEXT="Injection object name" SCRTEXT_S="InjObjName" SCRTEXT_M="Inj object name" SCRTEXT_L="Injection object name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_IMPL_TYPE" DDLANGUAGE="E" DOMNAME="ZIC_IMPL_TYPE" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="09" SCRLEN2="19" SCRLEN3="19" DDTEXT="Intelligent Container implementation type" REPTEXT="Implementation type" SCRTEXT_S="Impl type" SCRTEXT_M="Implementation type" SCRTEXT_L="Implementation type" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000002" DECIMALS="000000" OUTPUTLEN="000002" VALEXI="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZIC_IMPL_NAME" DDLANGUAGE="E" DOMNAME="ZIC_IMPL_NAME" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="09" SCRLEN2="19" SCRLEN3="19" DDTEXT="Intelligent Container implementation name" REPTEXT="Implementation name" SCRTEXT_S="Impl name" SCRTEXT_M="Implementation name" SCRTEXT_L="Implementation name" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <FUGR AREA="ZIC_OR_CONTEXT" SPRAS="E" AREAT="Extended Table Maintenance (Generated)">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZIC_OR_CONTEXT" SQLX="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="001" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <dynpros>
    <dynpro PROG="SAPLZIC_OR_CONTEXT" DNUM="0001" FNUM="0001" BZMX="61 " BZBR="78 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="61 " NOCO="83 " VALP="0 " CUAN="G" SPRA="E" DTEXT="View maint: Overview screen ZIC_OR_CONTEXT">
     <dynprofield FNAM="TCTRL_ZIC_OR_CONTEXT" DIDX="003B" FLG1="F8" FLG2="FC" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="4E" LINE="01" COLN="02" LTYP="E" LANF="65" LBLK="01" LREP="01" AUTH="101" AGLT="00" ADEZ="00"/>
     <dynprofield FNAM="VIM_FRAME_FIELD" DIDX="003C" FLG1="80" FLG2="02" FLG3="88" FMB1="30" FMB2="40" LENG="3C" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
     <dynprofield FNAM="*ZIC_OR_CONTEXT-CONTEXT" DIDX="0014" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="OR-context" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_CONTEXT-DESCRIPTION" DIDX="0032" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Description" RES1="                                       00"/>
     <dynprofield FNAM="VIM_MARKED" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="_"/>
     <dynprofield FNAM="ZIC_OR_CONTEXT-CONTEXT" DIDX="0014" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="14" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="28" ADEZ="00" STXT="____________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_CONTEXT-DESCRIPTION" DIDX="0032" FLG1="B0" FLG2="02" FLG3="80" FMB1="00" FMB2="00" LENG="32" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="64" ADEZ="00" STXT="__________________________________________________" RES1="                                       00"/>
     <dynprofield FNAM="VIM_POSI_PUSH" DIDX="0014" FLG1="80" FLG2="00" FLG3="88" FILL="P" FMB1="30" FMB2="00" LENG="14" LINE="3D" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="____________________" RES1="                                                                                                                                                                        POSI"/>
     <dynprofield FNAM="VIM_POSITION_INFO" DIDX="001E" FLG1="80" FLG2="02" FLG3="88" FMB1="33" FMB2="00" LENG="1E" LINE="3D" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="______________________________"/>
     <dynprofield FNAM="OK_CODE" DIDX="0014" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE LISTE_INITIALISIEREN.
 LOOP AT EXTRACT WITH CONTROL
  TCTRL_ZIC_OR_CONTEXT CURSOR NEXTLINE.
   MODULE LISTE_SHOW_LISTE.
 ENDLOOP.
*
PROCESS AFTER INPUT.
 MODULE LISTE_EXIT_COMMAND AT EXIT-COMMAND.
 MODULE LISTE_BEFORE_LOOP.
 LOOP AT EXTRACT.
   MODULE LISTE_INIT_WORKAREA.
   CHAIN.
    FIELD ZIC_OR_CONTEXT-CONTEXT .
    FIELD ZIC_OR_CONTEXT-DESCRIPTION .
    MODULE SET_UPDATE_FLAG ON CHAIN-REQUEST.
   ENDCHAIN.
   FIELD VIM_MARKED MODULE LISTE_MARK_CHECKBOX.
   CHAIN.
    FIELD ZIC_OR_CONTEXT-CONTEXT .
    MODULE LISTE_UPDATE_LISTE.
   ENDCHAIN.
 ENDLOOP.
 MODULE LISTE_AFTER_LOOP.</dynproflowsource>
    </dynpro>
   </dynpros>
   <source>* regenerated at 03.11.2015 20:17:11 by  BCUSER
*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZIC_OR_CONTEXTTOP.                &quot; Global Data
  INCLUDE LZIC_OR_CONTEXTUXX.                &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZIC_OR_CONTEXTF...                &quot; Subroutines
* INCLUDE LZIC_OR_CONTEXTO...                &quot; PBO-Modules
* INCLUDE LZIC_OR_CONTEXTI...                &quot; PAI-Modules
* INCLUDE LZIC_OR_CONTEXTE...                &quot; Events
* INCLUDE LZIC_OR_CONTEXTP...                &quot; Local class implement.
  INCLUDE LZIC_OR_CONTEXTF00                      . &quot; subprograms
  INCLUDE LZIC_OR_CONTEXTI00                      . &quot; PAI modules
  INCLUDE LSVIMFXX                                . &quot; subprograms
  INCLUDE LSVIMOXX                                . &quot; PBO modules
  INCLUDE LSVIMIXX                                . &quot; PAI modules</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZIC_OR_CONTEXTF00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 03.11.2015 at 20:17:11 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .</include_source>
   </include>
   <include NAME="LZIC_OR_CONTEXTI00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related PAI modules
*   generation date: 03.11.2015 at 20:17:11 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

INCLUDE LSVIMITX . &quot;base table related PAI modules</include_source>
   </include>
   <include NAME="LZIC_OR_CONTEXTTOP" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="001" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>* regenerated at 03.11.2015 20:17:11 by  BCUSER
FUNCTION-POOL ZIC_OR_CONTEXT             MESSAGE-ID SV.

* INCLUDE LZIC_OR_CONTEXTD...                &quot; Local class definition
  INCLUDE LSVIMDAT                                . &quot;general data decl.
  INCLUDE LZIC_OR_CONTEXTT00                      . &quot;view rel. data dcl.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="TABLEFRAME_ZIC_OR_CONTEXT" STEXT="Extended Table Maintenance: Upper Level">
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 002"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 003"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 004"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 005"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tabelle mit dynam. zu deaktivierenden CUA-Funkt." INDEX=" 006"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 007"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 008"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 009"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEFRAME_ZIC_OR_CONTEXT
*   generation date: 03.11.2015 at 20:17:10 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEFRAME TABLES X_HEADER X_NAMTAB DBA_SELLIST DPL_SELLIST
                            EXCL_CUA_FUNCT
                     USING  CORR_NUMBER VIEW_ACTION VIEW_NAME.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="TABLEPROC_ZIC_OR_CONTEXT" GLOBAL="X" STEXT="Lower-level extended table maintenance">
    <importing PARAMETER="FCODE" DEFAULT="&apos;RDED&apos;"/>
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <exporting PARAMETER="LAST_ACT_ENTRY"/>
    <exporting PARAMETER="UCOMM"/>
    <exporting PARAMETER="UPDATE_REQUIRED"/>
    <tables PARAMETER="CORR_KEYTAB" DBSTRUCT="E071K"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="EXTRACT"/>
    <tables PARAMETER="TOTAL"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <exceptions EXCEPTION="SAVING_CORRECTION_FAILED"/>
    <documentation PARAMETER="FCODE" KIND="P" STEXT="gewünschte Funktion des Bausteins" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 002"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 003"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 004"/>
    <documentation PARAMETER="LAST_ACT_ENTRY" KIND="P" STEXT="Index der Cursorposition in der Anzeigetabelle" INDEX=" 005"/>
    <documentation PARAMETER="UCOMM" KIND="P" STEXT="letztes User-command innerhalb der Viewpflege" INDEX=" 006"/>
    <documentation PARAMETER="UPDATE_REQUIRED" KIND="P" STEXT="Flag: Einträge verändert, Sichern erforderlich" INDEX=" 007"/>
    <documentation PARAMETER="CORR_KEYTAB" KIND="P" STEXT="Tabelle mit den Keys der zu transport. Einträge" INDEX=" 008"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 009"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 010"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tab. der nicht zu aktivierenden CUA-Funktionen" INDEX=" 011"/>
    <documentation PARAMETER="EXTRACT" KIND="P" STEXT="Tab. der gerade sichtbaren Daten (Anzeigetabelle" INDEX=" 012"/>
    <documentation PARAMETER="TOTAL" KIND="P" STEXT="Tabelle, mit allen von der DB gelesenen Daten" INDEX=" 013"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 014"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 015"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 016"/>
    <documentation PARAMETER="SAVING_CORRECTION_FAILED" KIND="X" STEXT="Fehler beim Sichern der Korrektureinträge" INDEX=" 017"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEPROC_ZIC_OR_CONTEXT
*   generation date: 03.11.2015 at 20:17:10 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEPROC.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <FUGR AREA="ZIC_OR_FK_MAP" SPRAS="E" AREAT="Extended Table Maintenance (Generated)">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZIC_OR_FK_MAP" SQLX="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="001" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <dynpros>
    <dynpro PROG="SAPLZIC_OR_FK_MAP" DNUM="0001" FNUM="0001" BZMX="61 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="61 " NOCO="83 " VALP="0 " CUAN="G" SPRA="E" DTEXT="View maint: Overview screen ZIC_OR_FK_MAP">
     <dynprofield FNAM="TCTRL_ZIC_OR_FK_MAP" DIDX="003B" FLG1="F8" FLG2="FC" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="53" LINE="01" COLN="02" LTYP="E" LANF="65" LBLK="01" LREP="01" AUTH="101" AGLT="00" ADEZ="00"/>
     <dynprofield FNAM="VIM_FRAME_FIELD" DIDX="003C" FLG1="80" FLG2="02" FLG3="88" FMB1="30" FMB2="40" LENG="3C" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
     <dynprofield FNAM="*ZIC_OR_FK_MAP-CONTEXT" DIDX="0014" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="OR-context" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_FK_MAP-KEY_NAME" DIDX="0019" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Key mapping" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_FK_MAP-KEY_NUMBER" DIDX="0006" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="Key nr" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_FK_MAP-KEY_PARENT" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Key parent" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_FK_MAP-KEY_CHILD" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Key child" RES1="                                       00"/>
     <dynprofield FNAM="VIM_MARKED" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="_"/>
     <dynprofield FNAM="ZIC_OR_FK_MAP-CONTEXT" DIDX="0014" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="14" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="28" ADEZ="00" STXT="____________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_FK_MAP-KEY_NAME" DIDX="000C" FLG1="B1" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="19" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="32" ADEZ="00" STXT="_________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_FK_MAP-KEY_NUMBER" DIDX="0006" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="02" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" GRP1="KEY" ITYP="N" AGLT="04" ADEZ="00" STXT="__" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_FK_MAP-KEY_PARENT" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_FK_MAP-KEY_CHILD" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="VIM_POSI_PUSH" DIDX="0014" FLG1="80" FLG2="00" FLG3="88" FILL="P" FMB1="30" FMB2="00" LENG="14" LINE="3D" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="____________________" RES1="                                                                                                                                                                        POSI"/>
     <dynprofield FNAM="VIM_POSITION_INFO" DIDX="001E" FLG1="80" FLG2="02" FLG3="88" FMB1="33" FMB2="00" LENG="1E" LINE="3D" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="______________________________"/>
     <dynprofield FNAM="OK_CODE" DIDX="0014" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE LISTE_INITIALISIEREN.
 LOOP AT EXTRACT WITH CONTROL
  TCTRL_ZIC_OR_FK_MAP CURSOR NEXTLINE.
   MODULE LISTE_SHOW_LISTE.
 ENDLOOP.
*
PROCESS AFTER INPUT.
 MODULE LISTE_EXIT_COMMAND AT EXIT-COMMAND.
 MODULE LISTE_BEFORE_LOOP.
 LOOP AT EXTRACT.
   MODULE LISTE_INIT_WORKAREA.
   CHAIN.
    FIELD ZIC_OR_FK_MAP-CONTEXT .
    FIELD ZIC_OR_FK_MAP-KEY_NAME .
    FIELD ZIC_OR_FK_MAP-KEY_NUMBER .
    FIELD ZIC_OR_FK_MAP-KEY_PARENT .
    FIELD ZIC_OR_FK_MAP-KEY_CHILD .
    MODULE SET_UPDATE_FLAG ON CHAIN-REQUEST.
   ENDCHAIN.
   FIELD VIM_MARKED MODULE LISTE_MARK_CHECKBOX.
   CHAIN.
    FIELD ZIC_OR_FK_MAP-CONTEXT .
    FIELD ZIC_OR_FK_MAP-KEY_NAME .
    FIELD ZIC_OR_FK_MAP-KEY_NUMBER .
    MODULE LISTE_UPDATE_LISTE.
   ENDCHAIN.
 ENDLOOP.
 MODULE LISTE_AFTER_LOOP.</dynproflowsource>
    </dynpro>
   </dynpros>
   <source>* regenerated at 19.11.2015 21:24:50 by  BCUSER
*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZIC_OR_FK_MAPTOP.                 &quot; Global Data
  INCLUDE LZIC_OR_FK_MAPUXX.                 &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZIC_OR_FK_MAPF...                 &quot; Subroutines
* INCLUDE LZIC_OR_FK_MAPO...                 &quot; PBO-Modules
* INCLUDE LZIC_OR_FK_MAPI...                 &quot; PAI-Modules
* INCLUDE LZIC_OR_FK_MAPE...                 &quot; Events
* INCLUDE LZIC_OR_FK_MAPP...                 &quot; Local class implement.
  INCLUDE LZIC_OR_FK_MAPF00                       . &quot; subprograms
  INCLUDE LZIC_OR_FK_MAPI00                       . &quot; PAI modules
  INCLUDE LSVIMFXX                                . &quot; subprograms
  INCLUDE LSVIMOXX                                . &quot; PBO modules
  INCLUDE LSVIMIXX                                . &quot; PAI modules</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZIC_OR_FK_MAPF00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 19.11.2015 at 21:24:50 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .</include_source>
   </include>
   <include NAME="LZIC_OR_FK_MAPI00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related PAI modules
*   generation date: 19.11.2015 at 21:24:50 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

INCLUDE LSVIMITX . &quot;base table related PAI modules</include_source>
   </include>
   <include NAME="LZIC_OR_FK_MAPTOP" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="001" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>* regenerated at 19.11.2015 21:24:50 by  BCUSER
FUNCTION-POOL ZIC_OR_FK_MAP              MESSAGE-ID SV.

* INCLUDE LZIC_OR_FK_MAPD...                 &quot; Local class definition
  INCLUDE LSVIMDAT                                . &quot;general data decl.
  INCLUDE LZIC_OR_FK_MAPT00                       . &quot;view rel. data dcl.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="TABLEFRAME_ZIC_OR_FK_MAP" STEXT="Extended Table Maintenance: Upper Level">
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 002"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 003"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 004"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 005"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tabelle mit dynam. zu deaktivierenden CUA-Funkt." INDEX=" 006"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 007"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 008"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 009"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEFRAME_ZIC_OR_FK_MAP
*   generation date: 19.11.2015 at 21:24:48 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEFRAME TABLES X_HEADER X_NAMTAB DBA_SELLIST DPL_SELLIST
                            EXCL_CUA_FUNCT
                     USING  CORR_NUMBER VIEW_ACTION VIEW_NAME.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="TABLEPROC_ZIC_OR_FK_MAP" GLOBAL="X" STEXT="Lower-level extended table maintenance">
    <importing PARAMETER="FCODE" DEFAULT="&apos;RDED&apos;"/>
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <exporting PARAMETER="LAST_ACT_ENTRY"/>
    <exporting PARAMETER="UCOMM"/>
    <exporting PARAMETER="UPDATE_REQUIRED"/>
    <tables PARAMETER="CORR_KEYTAB" DBSTRUCT="E071K"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="EXTRACT"/>
    <tables PARAMETER="TOTAL"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <exceptions EXCEPTION="SAVING_CORRECTION_FAILED"/>
    <documentation PARAMETER="FCODE" KIND="P" STEXT="gewünschte Funktion des Bausteins" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 002"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 003"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 004"/>
    <documentation PARAMETER="LAST_ACT_ENTRY" KIND="P" STEXT="Index der Cursorposition in der Anzeigetabelle" INDEX=" 005"/>
    <documentation PARAMETER="UCOMM" KIND="P" STEXT="letztes User-command innerhalb der Viewpflege" INDEX=" 006"/>
    <documentation PARAMETER="UPDATE_REQUIRED" KIND="P" STEXT="Flag: Einträge verändert, Sichern erforderlich" INDEX=" 007"/>
    <documentation PARAMETER="CORR_KEYTAB" KIND="P" STEXT="Tabelle mit den Keys der zu transport. Einträge" INDEX=" 008"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 009"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 010"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tab. der nicht zu aktivierenden CUA-Funktionen" INDEX=" 011"/>
    <documentation PARAMETER="EXTRACT" KIND="P" STEXT="Tab. der gerade sichtbaren Daten (Anzeigetabelle" INDEX=" 012"/>
    <documentation PARAMETER="TOTAL" KIND="P" STEXT="Tabelle, mit allen von der DB gelesenen Daten" INDEX=" 013"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 014"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 015"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 016"/>
    <documentation PARAMETER="SAVING_CORRECTION_FAILED" KIND="X" STEXT="Fehler beim Sichern der Korrektureinträge" INDEX=" 017"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEPROC_ZIC_OR_FK_MAP
*   generation date: 19.11.2015 at 21:24:49 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEPROC.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <FUGR AREA="ZIC_OR_MAPPING" SPRAS="E" AREAT="Extended Table Maintenance (Generated)">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZIC_OR_MAPPING" SQLX="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="001" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <dynpros>
    <dynpro PROG="SAPLZIC_OR_MAPPING" DNUM="0004" FNUM="0004" BZMX="61 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="61 " NOCO="83 " VALP="0 " CUAN="G" SPRA="E" DTEXT="View maint: Overview screen ZIC_OR_MAPPING">
     <dynprofield FNAM="TCTRL_ZIC_OR_MAPPING" DIDX="003B" FLG1="F8" FLG2="FC" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="53" LINE="01" COLN="02" LTYP="E" LANF="65" LBLK="01" LREP="01" AUTH="101" AGLT="00" ADEZ="00"/>
     <dynprofield FNAM="VIM_FRAME_FIELD" DIDX="003C" FLG1="80" FLG2="02" FLG3="88" FMB1="30" FMB2="40" LENG="3C" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-CONTEXT" DIDX="0014" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A8" LENG="28" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="OR-context" RES1="X                                      00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-PARENT" DIDX="000A" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A8" LENG="28" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="Parent" RES1="X                                      00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-CHILD" DIDX="000F" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A8" LENG="28" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Child type" RES1="X                                      00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-REL_NUMBER" DIDX="0009" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="OR-number" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-REL_TYPE" DIDX="001E" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="88" LENG="28" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="Rel Type" RES1="X                                      00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-INNER_KEY" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Inner type field" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-LINK_TABLE" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Link table" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-LINK_KEY_FIELD" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Link key field" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-LINK_TYPE_FIELD" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="09" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Link type field" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-LINK_KEYMAP_FIELD" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="0A" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Link keymap field" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-FOREIGN_KEY" DIDX="003D" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="0B" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Foreign key" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-FK_MAPPING" DIDX="0019" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="88" LENG="28" LINE="01" COLN="0C" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Key mapping" RES1="X                                      00"/>
     <dynprofield FNAM="*ZIC_OR_MAPPING-IS_PASSIVE_SELECT" DIDX="000A" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="88" LENG="28" LINE="01" COLN="0D" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="PassSelect" RES1="X                                      00"/>
     <dynprofield FNAM="VIM_MARKED" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="_"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-CONTEXT" DIDX="000A" FLG1="B1" FLG2="00" FLG3="84" FMB1="30" FMB2="28" LENG="14" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="28" ADEZ="00" STXT="____________________" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-PARENT" DIDX="000A" FLG1="B0" FLG2="00" FLG3="84" FMB1="30" FMB2="28" LENG="05" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="0A" ADEZ="00" STXT="_____" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-CHILD" DIDX="000F" FLG1="B0" FLG2="00" FLG3="84" FMB1="30" FMB2="28" LENG="05" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="0A" ADEZ="00" STXT="_____" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-REL_NUMBER" DIDX="0009" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="08" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" GRP1="KEY" ITYP="N" AGLT="10" ADEZ="00" STXT="________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-REL_TYPE" DIDX="001E" FLG1="B0" FLG2="00" FLG3="81" FMB1="00" FMB2="08" LENG="02" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="04" ADEZ="00" STXT="__" RES1="XDL                                    00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-INNER_KEY" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_TABLE" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_KEY_FIELD" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_TYPE_FIELD" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="09" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_KEYMAP_FIELD" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="0A" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-FOREIGN_KEY" DIDX="003D" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="3D" LINE="01" COLN="0B" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="7A" ADEZ="00" STXT="_____________________________________________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-FK_MAPPING" DIDX="0019" FLG1="B0" FLG2="00" FLG3="84" FMB1="00" FMB2="08" LENG="19" LINE="01" COLN="0C" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="32" ADEZ="00" STXT="_________________________" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-IS_PASSIVE_SELECT" DIDX="000A" FLG1="B0" FLG2="00" FLG3="81" FILL="C" FMB1="00" FMB2="08" LENG="01" LINE="01" COLN="0D" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="103" ITYP="C" AGLT="02" ADEZ="00" STXT="_" RES1="X                                      00"/>
     <dynprofield FNAM="VIM_POSI_PUSH" DIDX="0014" FLG1="80" FLG2="00" FLG3="88" FILL="P" FMB1="30" FMB2="00" LENG="14" LINE="3D" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00" STXT="____________________" RES1="                                                                                                                                                                        POSI"/>
     <dynprofield FNAM="VIM_POSITION_INFO" DIDX="001E" FLG1="80" FLG2="02" FLG3="88" FMB1="33" FMB2="00" LENG="1E" LINE="3D" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="______________________________"/>
     <dynprofield FNAM="OK_CODE" DIDX="0014" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE LISTE_INITIALISIEREN.
 LOOP AT EXTRACT WITH CONTROL
  TCTRL_ZIC_OR_MAPPING CURSOR NEXTLINE.
   MODULE LISTE_SHOW_LISTE.
 ENDLOOP.
*
PROCESS AFTER INPUT.
 MODULE LISTE_EXIT_COMMAND AT EXIT-COMMAND.
 MODULE LISTE_BEFORE_LOOP.
 LOOP AT EXTRACT.
   MODULE LISTE_INIT_WORKAREA.
   CHAIN.
    FIELD ZIC_OR_MAPPING-CONTEXT .
    FIELD ZIC_OR_MAPPING-PARENT .
    FIELD ZIC_OR_MAPPING-CHILD .
    FIELD ZIC_OR_MAPPING-REL_NUMBER .
    FIELD ZIC_OR_MAPPING-REL_TYPE .
    FIELD ZIC_OR_MAPPING-INNER_KEY .
    FIELD ZIC_OR_MAPPING-LINK_TABLE .
    FIELD ZIC_OR_MAPPING-LINK_KEY_FIELD .
    FIELD ZIC_OR_MAPPING-LINK_TYPE_FIELD .
    FIELD ZIC_OR_MAPPING-LINK_KEYMAP_FIELD .
    FIELD ZIC_OR_MAPPING-FOREIGN_KEY .
    FIELD ZIC_OR_MAPPING-FK_MAPPING .
    FIELD ZIC_OR_MAPPING-IS_PASSIVE_SELECT .
    MODULE SET_UPDATE_FLAG ON CHAIN-REQUEST.
   ENDCHAIN.
   FIELD VIM_MARKED MODULE LISTE_MARK_CHECKBOX.
   CHAIN.
    FIELD ZIC_OR_MAPPING-CONTEXT .
    FIELD ZIC_OR_MAPPING-PARENT .
    FIELD ZIC_OR_MAPPING-CHILD .
    FIELD ZIC_OR_MAPPING-REL_NUMBER .
    MODULE LISTE_UPDATE_LISTE.
   ENDCHAIN.
 ENDLOOP.
 MODULE LISTE_AFTER_LOOP.</dynproflowsource>
    </dynpro>
    <dynpro PROG="SAPLZIC_OR_MAPPING" DNUM="0005" FNUM="0005" BZMX="16 " BZBR="81 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="61 " NOCO="83 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Maintain View: Detail Screen ZIC_OR_MAPPING">
     <dynprofield FNAM="ZIC_OR_MAPPING-CONTEXT" DIDX="000F" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="08" LENG="0F" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="OR-context" RES1="X                                      00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-CONTEXT" DIDX="0014" FLG1="A0" FLG2="00" FLG3="84" FMB1="30" FMB2="08" LENG="14" LINE="01" COLN="12" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="28" ADEZ="00" STXT="____________________" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-PARENT" DIDX="000F" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="08" LENG="0F" LINE="02" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Parent type" RES1="X                                      00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-PARENT" DIDX="0005" FLG1="A0" FLG2="00" FLG3="84" FMB1="30" FMB2="08" LENG="05" LINE="02" COLN="12" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="0A" ADEZ="00" STXT="_____" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-CHILD" DIDX="000F" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="08" LENG="0F" LINE="03" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Child type" RES1="X                                      00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-CHILD" DIDX="0005" FLG1="A0" FLG2="00" FLG3="84" FMB1="30" FMB2="08" LENG="05" LINE="03" COLN="12" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="0A" ADEZ="00" STXT="_____" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-REL_NUMBER" DIDX="0009" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="09" LINE="04" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="OR-number" RES1="                                       00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-REL_NUMBER" DIDX="0008" FLG1="A0" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="04" COLN="12" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" GRP1="KEY" ITYP="N" AGLT="10" ADEZ="00" STXT="________" RES1="                                       00"/>
     <dynprofield FNAM="VIM_FRAME_FIELD" DIDX="000B" FLG1="80" FLG2="02" FLG3="88" FILL="R" FMB1="30" FMB2="00" LENG="51" LINE="06" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="_________________________________________________________________________________"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-REL_TYPE" DIDX="000D" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="08" LENG="0D" LINE="07" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Relation Type" RES1="X                                      00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-REL_TYPE" DIDX="003C" FLG1="A0" FLG2="00" FLG3="81" FMB1="00" FMB2="08" LENG="02" LINE="07" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="04" ADEZ="00" STXT="__" RES1="XDL                                    00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-INNER_KEY" DIDX="0010" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="10" LINE="08" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Inner type field" RES1="                                       00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-INNER_KEY" DIDX="001E" FLG1="A0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="08" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_TABLE" DIDX="000A" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="09" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Link table" RES1="                                       00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_TABLE" DIDX="001E" FLG1="A0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="09" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_KEY_FIELD" DIDX="000F" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0A" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Link key field" RES1="                                       00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_KEY_FIELD" DIDX="001E" FLG1="A0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="0A" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_TYPE_FIELD" DIDX="000F" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0B" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Link type field" RES1="                                       00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_TYPE_FIELD" DIDX="001E" FLG1="A0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="0B" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_KEYMAP_FIELD" DIDX="0011" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="0C" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Link keymap field" RES1="                                       00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-LINK_KEYMAP_FIELD" DIDX="001E" FLG1="A0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="0C" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-FOREIGN_KEY" DIDX="000B" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0B" LINE="0D" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Foreign key" RES1="                                       00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-FOREIGN_KEY" DIDX="003D" FLG1="A0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="3D" LINE="0D" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="7A" ADEZ="00" STXT="_____________________________________________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-FK_MAPPING" DIDX="000F" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="08" LENG="0F" LINE="0E" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Key mapping" RES1="X                                      00                                                                                                                                                                                                               X"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-FK_MAPPING" DIDX="0019" FLG1="A0" FLG2="00" FLG3="84" FMB1="00" FMB2="08" LENG="19" LINE="0E" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="32" ADEZ="00" STXT="_________________________" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-IS_PASSIVE_SELECT" DIDX="0001" FLG1="B0" FLG2="00" FLG3="81" FILL="C" FMB1="00" FMB2="08" LENG="01" LINE="0F" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="C" AGLT="02" ADEZ="00" STXT="_" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_MAPPING-IS_PASSIVE_SELECT" DIDX="0011" FLG1="30" FLG2="00" FLG3="00" FILL="C" FMB1="30" FMB2="08" LENG="11" LINE="0F" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="2" AGLT="00" ADEZ="00" STXT="Is passive select" RES1="X                                      00"/>
     <dynprofield FNAM="OK_CODE" DIDX="0014" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE detail_init.
*
PROCESS AFTER INPUT.
 MODULE DETAIL_EXIT_COMMAND AT EXIT-COMMAND.
 MODULE DETAIL_SET_PFSTATUS.
 CHAIN.
    FIELD ZIC_OR_MAPPING-CONTEXT .
    FIELD ZIC_OR_MAPPING-PARENT .
    FIELD ZIC_OR_MAPPING-CHILD .
    FIELD ZIC_OR_MAPPING-REL_NUMBER .
    FIELD ZIC_OR_MAPPING-REL_TYPE .
    FIELD ZIC_OR_MAPPING-INNER_KEY .
    FIELD ZIC_OR_MAPPING-LINK_TABLE .
    FIELD ZIC_OR_MAPPING-LINK_KEY_FIELD .
    FIELD ZIC_OR_MAPPING-LINK_TYPE_FIELD .
    FIELD ZIC_OR_MAPPING-LINK_KEYMAP_FIELD .
    FIELD ZIC_OR_MAPPING-FOREIGN_KEY .
    FIELD ZIC_OR_MAPPING-FK_MAPPING .
    FIELD ZIC_OR_MAPPING-IS_PASSIVE_SELECT .
  MODULE SET_UPDATE_FLAG ON CHAIN-REQUEST.
 endchain.
 chain.
    FIELD ZIC_OR_MAPPING-CONTEXT .
    FIELD ZIC_OR_MAPPING-PARENT .
    FIELD ZIC_OR_MAPPING-CHILD .
    FIELD ZIC_OR_MAPPING-REL_NUMBER .
  module detail_pai.
 endchain.</dynproflowsource>
    </dynpro>
   </dynpros>
   <source>* regenerated at 31.12.2015 15:32:43 by  BCUSER
*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZIC_OR_MAPPINGTOP.                &quot; Global Data
  INCLUDE LZIC_OR_MAPPINGUXX.                &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZIC_OR_MAPPINGF...                &quot; Subroutines
* INCLUDE LZIC_OR_MAPPINGO...                &quot; PBO-Modules
* INCLUDE LZIC_OR_MAPPINGI...                &quot; PAI-Modules
* INCLUDE LZIC_OR_MAPPINGE...                &quot; Events
* INCLUDE LZIC_OR_MAPPINGP...                &quot; Local class implement.
  INCLUDE LZIC_OR_MAPPINGF00                      . &quot; subprograms
  INCLUDE LZIC_OR_MAPPINGI00                      . &quot; PAI modules
  INCLUDE LSVIMFXX                                . &quot; subprograms
  INCLUDE LSVIMOXX                                . &quot; PBO modules
  INCLUDE LSVIMIXX                                . &quot; PAI modules</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZIC_OR_MAPPINGF00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 31.12.2015 at 15:32:43 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .</include_source>
   </include>
   <include NAME="LZIC_OR_MAPPINGI00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related PAI modules
*   generation date: 31.12.2015 at 15:32:43 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

INCLUDE LSVIMITX . &quot;base table related PAI modules</include_source>
   </include>
   <include NAME="LZIC_OR_MAPPINGTOP" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="001" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>* regenerated at 31.12.2015 15:32:43 by  BCUSER
FUNCTION-POOL ZIC_OR_MAPPING             MESSAGE-ID SV.

* INCLUDE LZIC_OR_MAPPINGD...                &quot; Local class definition
  INCLUDE LSVIMDAT                                . &quot;general data decl.
  INCLUDE LZIC_OR_MAPPINGT00                      . &quot;view rel. data dcl.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="TABLEFRAME_ZIC_OR_MAPPING" STEXT="Extended Table Maintenance: Upper Level">
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 002"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 003"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 004"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 005"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tabelle mit dynam. zu deaktivierenden CUA-Funkt." INDEX=" 006"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 007"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 008"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 009"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEFRAME_ZIC_OR_MAPPING
*   generation date: 31.12.2015 at 15:32:42 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEFRAME TABLES X_HEADER X_NAMTAB DBA_SELLIST DPL_SELLIST
                            EXCL_CUA_FUNCT
                     USING  CORR_NUMBER VIEW_ACTION VIEW_NAME.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="TABLEPROC_ZIC_OR_MAPPING" GLOBAL="X" STEXT="Lower-level extended table maintenance">
    <importing PARAMETER="FCODE" DEFAULT="&apos;RDED&apos;"/>
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <exporting PARAMETER="LAST_ACT_ENTRY"/>
    <exporting PARAMETER="UCOMM"/>
    <exporting PARAMETER="UPDATE_REQUIRED"/>
    <tables PARAMETER="CORR_KEYTAB" DBSTRUCT="E071K"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="EXTRACT"/>
    <tables PARAMETER="TOTAL"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <exceptions EXCEPTION="SAVING_CORRECTION_FAILED"/>
    <documentation PARAMETER="FCODE" KIND="P" STEXT="gewünschte Funktion des Bausteins" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 002"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 003"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 004"/>
    <documentation PARAMETER="LAST_ACT_ENTRY" KIND="P" STEXT="Index der Cursorposition in der Anzeigetabelle" INDEX=" 005"/>
    <documentation PARAMETER="UCOMM" KIND="P" STEXT="letztes User-command innerhalb der Viewpflege" INDEX=" 006"/>
    <documentation PARAMETER="UPDATE_REQUIRED" KIND="P" STEXT="Flag: Einträge verändert, Sichern erforderlich" INDEX=" 007"/>
    <documentation PARAMETER="CORR_KEYTAB" KIND="P" STEXT="Tabelle mit den Keys der zu transport. Einträge" INDEX=" 008"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 009"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 010"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tab. der nicht zu aktivierenden CUA-Funktionen" INDEX=" 011"/>
    <documentation PARAMETER="EXTRACT" KIND="P" STEXT="Tab. der gerade sichtbaren Daten (Anzeigetabelle" INDEX=" 012"/>
    <documentation PARAMETER="TOTAL" KIND="P" STEXT="Tabelle, mit allen von der DB gelesenen Daten" INDEX=" 013"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 014"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 015"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 016"/>
    <documentation PARAMETER="SAVING_CORRECTION_FAILED" KIND="X" STEXT="Fehler beim Sichern der Korrektureinträge" INDEX=" 017"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEPROC_ZIC_OR_MAPPING
*   generation date: 31.12.2015 at 15:32:42 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEPROC.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <FUGR AREA="ZIC_OR_TYPES" SPRAS="E" AREAT="Extended Table Maintenance (Generated)">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZIC_OR_TYPES" SQLX="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="001" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <dynpros>
    <dynpro PROG="SAPLZIC_OR_TYPES" DNUM="0001" FNUM="0001" BZMX="61 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="61 " NOCO="83 " VALP="0 " CUAN="G" SPRA="E" DTEXT="View maint: Overview screen ZIC_OR_TYPES">
     <dynprofield FNAM="TCTRL_ZIC_OR_TYPES" DIDX="003B" FLG1="F8" FLG2="FC" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="53" LINE="01" COLN="02" LTYP="E" LANF="65" LBLK="01" LREP="01" AUTH="101" AGLT="00" ADEZ="00"/>
     <dynprofield FNAM="VIM_FRAME_FIELD" DIDX="003C" FLG1="80" FLG2="02" FLG3="88" FMB1="30" FMB2="40" LENG="3C" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
     <dynprofield FNAM="*ZIC_OR_TYPES-CONTEXT" DIDX="0014" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A8" LENG="28" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="OR-context" RES1="X                                      00"/>
     <dynprofield FNAM="*ZIC_OR_TYPES-TYPE" DIDX="0005" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Type" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_TYPES-NAME" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Type name" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_TYPES-DESCRIPTION" DIDX="0032" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Description" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_TYPES-SUB_TYPE_FIELD" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Subtype field" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_TYPES-CLASS_NAME" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Class name" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_TYPES-TABLE_NAME" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Table Name" RES1="                                       00"/>
     <dynprofield FNAM="*ZIC_OR_TYPES-OR_IDENTITY" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Identity" RES1="                                       00"/>
     <dynprofield FNAM="VIM_MARKED" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="_"/>
     <dynprofield FNAM="ZIC_OR_TYPES-CONTEXT" DIDX="0014" FLG1="B0" FLG2="00" FLG3="84" FMB1="30" FMB2="28" LENG="14" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="28" ADEZ="00" STXT="____________________" RES1="X                                      00"/>
     <dynprofield FNAM="ZIC_OR_TYPES-TYPE" DIDX="0005" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="05" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="0A" ADEZ="00" STXT="_____" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_TYPES-NAME" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_TYPES-DESCRIPTION" DIDX="0032" FLG1="B0" FLG2="02" FLG3="80" FMB1="00" FMB2="00" LENG="32" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="64" ADEZ="00" STXT="__________________________________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_TYPES-SUB_TYPE_FIELD" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_TYPES-CLASS_NAME" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_TYPES-TABLE_NAME" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" PAID="DTB" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZIC_OR_TYPES-OR_IDENTITY" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="3C" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
     <dynprofield FNAM="VIM_POSI_PUSH" DIDX="0014" FLG1="80" FLG2="00" FLG3="88" FILL="P" FMB1="30" FMB2="00" LENG="14" LINE="3D" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="____________________" RES1="                                                                                                                                                                        POSI"/>
     <dynprofield FNAM="VIM_POSITION_INFO" DIDX="001E" FLG1="80" FLG2="02" FLG3="88" FMB1="33" FMB2="00" LENG="1E" LINE="3D" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="______________________________"/>
     <dynprofield FNAM="OK_CODE" DIDX="0014" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE LISTE_INITIALISIEREN.
 LOOP AT EXTRACT WITH CONTROL
  TCTRL_ZIC_OR_TYPES CURSOR NEXTLINE.
   MODULE LISTE_SHOW_LISTE.
 ENDLOOP.
*
PROCESS AFTER INPUT.
 MODULE LISTE_EXIT_COMMAND AT EXIT-COMMAND.
 MODULE LISTE_BEFORE_LOOP.
 LOOP AT EXTRACT.
   MODULE LISTE_INIT_WORKAREA.
   CHAIN.
    FIELD ZIC_OR_TYPES-CONTEXT .
    FIELD ZIC_OR_TYPES-TYPE .
    FIELD ZIC_OR_TYPES-NAME .
    FIELD ZIC_OR_TYPES-DESCRIPTION .
    FIELD ZIC_OR_TYPES-SUB_TYPE_FIELD .
    FIELD ZIC_OR_TYPES-CLASS_NAME .
    FIELD ZIC_OR_TYPES-TABLE_NAME .
    FIELD ZIC_OR_TYPES-OR_IDENTITY .
    MODULE SET_UPDATE_FLAG ON CHAIN-REQUEST.
   ENDCHAIN.
   FIELD VIM_MARKED MODULE LISTE_MARK_CHECKBOX.
   CHAIN.
    FIELD ZIC_OR_TYPES-CONTEXT .
    FIELD ZIC_OR_TYPES-TYPE .
    MODULE LISTE_UPDATE_LISTE.
   ENDCHAIN.
 ENDLOOP.
 MODULE LISTE_AFTER_LOOP.</dynproflowsource>
    </dynpro>
   </dynpros>
   <source>* regenerated at 01.12.2015 21:31:24 by  BCUSER
*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZIC_OR_TYPESTOP.                  &quot; Global Data
  INCLUDE LZIC_OR_TYPESUXX.                  &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZIC_OR_TYPESF...                  &quot; Subroutines
* INCLUDE LZIC_OR_TYPESO...                  &quot; PBO-Modules
* INCLUDE LZIC_OR_TYPESI...                  &quot; PAI-Modules
* INCLUDE LZIC_OR_TYPESE...                  &quot; Events
* INCLUDE LZIC_OR_TYPESP...                  &quot; Local class implement.
  INCLUDE LZIC_OR_TYPESF00                        . &quot; subprograms
  INCLUDE LZIC_OR_TYPESI00                        . &quot; PAI modules
  INCLUDE LSVIMFXX                                . &quot; subprograms
  INCLUDE LSVIMOXX                                . &quot; PBO modules
  INCLUDE LSVIMIXX                                . &quot; PAI modules</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZIC_OR_TYPESF00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 01.12.2015 at 21:31:24 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .</include_source>
   </include>
   <include NAME="LZIC_OR_TYPESI00" SQLX="X" EDTX="X" SUBC="I" LEVL="731" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related PAI modules
*   generation date: 01.12.2015 at 21:31:24 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

INCLUDE LSVIMITX . &quot;base table related PAI modules</include_source>
   </include>
   <include NAME="LZIC_OR_TYPESTOP" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="001" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>* regenerated at 01.12.2015 21:31:24 by  BCUSER
FUNCTION-POOL ZIC_OR_TYPES               MESSAGE-ID SV.

* INCLUDE LZIC_OR_TYPESD...                  &quot; Local class definition
  INCLUDE LSVIMDAT                                . &quot;general data decl.
  INCLUDE LZIC_OR_TYPEST00                        . &quot;view rel. data dcl.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="TABLEFRAME_ZIC_OR_TYPES" STEXT="Extended Table Maintenance: Upper Level">
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 002"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 003"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 004"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 005"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tabelle mit dynam. zu deaktivierenden CUA-Funkt." INDEX=" 006"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 007"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 008"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 009"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEFRAME_ZIC_OR_TYPES
*   generation date: 01.12.2015 at 21:31:23 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEFRAME TABLES X_HEADER X_NAMTAB DBA_SELLIST DPL_SELLIST
                            EXCL_CUA_FUNCT
                     USING  CORR_NUMBER VIEW_ACTION VIEW_NAME.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="TABLEPROC_ZIC_OR_TYPES" GLOBAL="X" STEXT="Lower-level extended table maintenance">
    <importing PARAMETER="FCODE" DEFAULT="&apos;RDED&apos;"/>
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <exporting PARAMETER="LAST_ACT_ENTRY"/>
    <exporting PARAMETER="UCOMM"/>
    <exporting PARAMETER="UPDATE_REQUIRED"/>
    <tables PARAMETER="CORR_KEYTAB" DBSTRUCT="E071K"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="EXTRACT"/>
    <tables PARAMETER="TOTAL"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <exceptions EXCEPTION="SAVING_CORRECTION_FAILED"/>
    <documentation PARAMETER="FCODE" KIND="P" STEXT="gewünschte Funktion des Bausteins" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 002"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 003"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 004"/>
    <documentation PARAMETER="LAST_ACT_ENTRY" KIND="P" STEXT="Index der Cursorposition in der Anzeigetabelle" INDEX=" 005"/>
    <documentation PARAMETER="UCOMM" KIND="P" STEXT="letztes User-command innerhalb der Viewpflege" INDEX=" 006"/>
    <documentation PARAMETER="UPDATE_REQUIRED" KIND="P" STEXT="Flag: Einträge verändert, Sichern erforderlich" INDEX=" 007"/>
    <documentation PARAMETER="CORR_KEYTAB" KIND="P" STEXT="Tabelle mit den Keys der zu transport. Einträge" INDEX=" 008"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 009"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 010"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tab. der nicht zu aktivierenden CUA-Funktionen" INDEX=" 011"/>
    <documentation PARAMETER="EXTRACT" KIND="P" STEXT="Tab. der gerade sichtbaren Daten (Anzeigetabelle" INDEX=" 012"/>
    <documentation PARAMETER="TOTAL" KIND="P" STEXT="Tabelle, mit allen von der DB gelesenen Daten" INDEX=" 013"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 014"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 015"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 016"/>
    <documentation PARAMETER="SAVING_CORRECTION_FAILED" KIND="X" STEXT="Fehler beim Sichern der Korrektureinträge" INDEX=" 017"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEPROC_ZIC_OR_TYPES
*   generation date: 01.12.2015 at 21:31:23 by user BCUSER
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEPROC.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <INTF CLSNAME="ZIWCI_IC_CONTAINER_WD" VERSION="1" LANGU="E" DESCRIPT="WebDynpro Interface COMPONENTCONTROLLER" CATEGORY="80" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <method CLSNAME="ZIWCI_IC_CONTAINER_WD" CMPNAME="WD_GET_API" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIWCI_IC_CONTAINER_WD" CMPNAME="WD_GET_API" SCONAME="RESULT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WD_CONTROLLER"/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_IC_WIRABLE" VERSION="1" LANGU="E" DESCRIPT="Wirable component" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <typeUsage CLSNAME="ZIF_IC_WIRABLE" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <attribute CLSNAME="ZIF_IC_WIRABLE" CMPNAME="M_IS_WIRED" VERSION="1" LANGU="E" DESCRIPT="Is already wired" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZIF_IC_WIRABLE" CMPNAME="WIRE" VERSION="1" LANGU="E" DESCRIPT="Wire component" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZIF_IC_WIRABLE" CMPNAME="WIRE" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_IC_VALUEHOLDER" VERSION="1" LANGU="E" DESCRIPT="IC value holder" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <include CLSNAME="ZIF_IC_VALUEHOLDER" REFCLSNAME="ZIF_IC_COMPONENT" VERSION="1" STATE="1"/>
  <include CLSNAME="ZIF_IC_VALUEHOLDER" REFCLSNAME="ZIF_IC_META_INFO" VERSION="1" STATE="1"/>
  <types CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="TY_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENT" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="TY_COMPONENTS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENTS" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="TY_COMP_TAB_ENTRIES" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMP_TAB_ENTRIES" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="TY_COMP_TAB_ENTRY" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMP_TAB_ENTRY" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="TY_RELATION" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_RELATION" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="TY_RELATIONS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_RELATIONS" TYPESRC_LENG="0 "/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="CREATE_CHILD" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="CREATE_CHILD" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="CREATE_CHILDS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="CREATE_CHILDS" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="FILL_BY_STRUCT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="FILL_BY_STRUCT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_DESCRIPTION" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_DESCRIPTION" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="Getter for the value object" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_IC_VALUE" SCONAME="RT_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_IC_VALUE"/>
  </method>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_KEY_STRUCT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_KEY_STRUCT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_NAME" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_NAME" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_OBJECT_NR" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_OBJECT_NR" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_OBJ_STRUCT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_OBJ_STRUCT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_PARENT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_PARENT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_PATH" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_PATH" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_RANK" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_RANK" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_RELATIONS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_RELATIONS" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_TABLE_NAME" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_TABLE_NAME" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="GET_TYPE" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_TYPE" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="IS_PARENT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="IS_PARENT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="SET_DESCRIPTION" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="SET_DESCRIPTION" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="SET_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="Setter for the value object" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="SET_IC_VALUE" SCONAME="I_IC_VALUE" VERSION="1" LANGU="E" DESCRIPT="IC Value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_IC_VALUE"/>
  </method>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="SET_NAME" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="SET_NAME" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="SET_OBJECT_NR" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="SET_OBJECT_NR" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="SET_PARENT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="SET_PARENT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="SET_RANK" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="SET_RANK" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALUEHOLDER" CMPNAME="TAB_ENTRY" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TAB_ENTRY" BCMTDCAT="00" BCMTDSYN="0"/>
 </INTF>
 <INTF CLSNAME="ZIF_IC_VALIDATING_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Validating dynpro" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <method CLSNAME="ZIF_IC_VALIDATING_DYNPRO" CMPNAME="CLEAR" VERSION="1" LANGU="E" DESCRIPT="Clear validation info" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALIDATING_DYNPRO" CMPNAME="DISPLAY" VERSION="1" LANGU="E" DESCRIPT="Display validating messages" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALIDATING_DYNPRO" CMPNAME="GET_VALIDATE_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Getter forvalidation object" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_VALIDATING_DYNPRO" CMPNAME="GET_VALIDATE_OBJECT" SCONAME="RT_VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validation IC object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_VALIDATE"/>
  </method>
  <method CLSNAME="ZIF_IC_VALIDATING_DYNPRO" CMPNAME="SET_VALIDATE_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Setter for validation object" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_VALIDATING_DYNPRO" CMPNAME="SET_VALIDATE_OBJECT" SCONAME="IM_VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validation IC object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_VALIDATE"/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_IC_VALIDATING" VERSION="1" LANGU="E" DESCRIPT="Validating IC object" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <typeUsage CLSNAME="ZIF_IC_VALIDATING" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <method CLSNAME="ZIF_IC_VALIDATING" CMPNAME="VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validate object" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_VALIDATING" CMPNAME="VALIDATE" SCONAME="CH_VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validation IC object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_VALIDATE"/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_IC_VALIDATE" VERSION="1" LANGU="E" DESCRIPT="Validation IC object" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <types CLSNAME="ZIF_IC_VALIDATE" CMPNAME="TY_MESSAGE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="24 " TYPESRC_LENG="147 " TYPESRC="BEGIN OF ty_message,
          path TYPE zic_path,
          type TYPE bapi_mtype,
          msg  TYPE scx_t100key,
        END OF ty_message
"/>
  <types CLSNAME="ZIF_IC_VALIDATE" CMPNAME="TY_MESSAGE_TAB" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="4 " SRCROW2="17 " SRCCOLUMN2="42 " TYPESRC_LENG="41 " TYPESRC="ty_message_tab TYPE TABLE OF ty_message
"/>
  <typeUsage CLSNAME="ZIF_IC_VALIDATE" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <attribute CLSNAME="ZIF_IC_VALIDATE" CMPNAME="C_ERROR" VERSION="1" LANGU="E" DESCRIPT="Message type: S Success, E Error, W Warning, I Info, A Abort" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;E&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BAPI_MTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_IC_VALIDATE" CMPNAME="C_INFO" VERSION="1" LANGU="E" DESCRIPT="Message type: S Success, E Error, W Warning, I Info, A Abort" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;I&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BAPI_MTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_IC_VALIDATE" CMPNAME="C_WARNING" VERSION="1" LANGU="E" DESCRIPT="Message type: S Success, E Error, W Warning, I Info, A Abort" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;W&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BAPI_MTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_IC_VALIDATE" CMPNAME="MESSAGE_TAB" VERSION="1" LANGU="E" DESCRIPT="Message table" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TY_MESSAGE_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZIF_IC_VALIDATE" CMPNAME="ADD_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="Add an error" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_VALIDATE" CMPNAME="ADD_IC_ERROR" SCONAME="IM_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_PATH"/>
   <parameter CLSNAME="ZIF_IC_VALIDATE" CMPNAME="ADD_IC_ERROR" SCONAME="IM_MESSAGE" VERSION="1" LANGU="E" DESCRIPT="T100 Key with Parameters Mapped to Attribute Names" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCX_T100KEY"/>
  </method>
  <method CLSNAME="ZIF_IC_VALIDATE" CMPNAME="ADD_IC_WARNING" VERSION="1" LANGU="E" DESCRIPT="Add a warning" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_VALIDATE" CMPNAME="ADD_IC_WARNING" SCONAME="IM_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_PATH"/>
   <parameter CLSNAME="ZIF_IC_VALIDATE" CMPNAME="ADD_IC_WARNING" SCONAME="IM_MESSAGE" VERSION="1" LANGU="E" DESCRIPT="T100 Key with Parameters Mapped to Attribute Names" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SCX_T100KEY"/>
  </method>
  <method CLSNAME="ZIF_IC_VALIDATE" CMPNAME="CLEAR" VERSION="1" LANGU="E" DESCRIPT="Clear table" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_VALIDATE" CMPNAME="HAS_ERRORS" VERSION="1" LANGU="E" DESCRIPT="Has errors" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_VALIDATE" CMPNAME="HAS_ERRORS" SCONAME="RT_HAS_ERRORS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_IC_SERVICE" VERSION="1" LANGU="E" DESCRIPT="IC Wiring and Injecting Service" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <include CLSNAME="ZIF_IC_SERVICE" REFCLSNAME="ZIF_IC_WIRABLE" VERSION="1" STATE="1"/>
  <types CLSNAME="ZIF_IC_SERVICE" CMPNAME="T_OBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="13 " SRCCOLUMN1="4 " SRCROW2="17 " SRCCOLUMN2="23 " TYPESRC_LENG="147 " TYPESRC="BEGIN OF  t_object,
          name TYPE zic_name,
          path type zic_path,
          object TYPE ref to object,
         END OF t_object
"/>
  <types CLSNAME="ZIF_IC_SERVICE" CMPNAME="T_OBJECT_TABLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="19 " SRCCOLUMN1="4 " SRCROW2="19 " SRCCOLUMN2="49 " TYPESRC_LENG="48 " TYPESRC="t_object_table TYPE STANDARD TABLE OF t_object
"/>
  <method CLSNAME="ZIF_IC_SERVICE" CMPNAME="INJECT" VERSION="1" LANGU="E" DESCRIPT="Inject classes after creation" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_SERVICE" CMPNAME="INJECT" SCONAME="I_CONTEXT_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_PATH"/>
   <parameter CLSNAME="ZIF_IC_SERVICE" CMPNAME="INJECT" SCONAME="I_PROGRAM_NAME" VERSION="1" LANGU="E" DESCRIPT="ABAP Program Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PROGRAMM" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_IC_SERVICE" CMPNAME="INJECT" SCONAME="CH_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object to inject" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="OBJECT" PAROPTIONL="X"/>
   <exception CLSNAME="ZIF_IC_SERVICE" CMPNAME="INJECT" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
  </method>
  <method CLSNAME="ZIF_IC_SERVICE" CMPNAME="INJECT_TO_TABLE" VERSION="1" LANGU="E" DESCRIPT="Inject classes into table" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_SERVICE" CMPNAME="INJECT_TO_TABLE" SCONAME="I_CONTEXT_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_PATH"/>
   <parameter CLSNAME="ZIF_IC_SERVICE" CMPNAME="INJECT_TO_TABLE" SCONAME="CH_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="Table with injected objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIF_IC_SERVICE=&gt;T_OBJECT_TABLE"/>
   <exception CLSNAME="ZIF_IC_SERVICE" CMPNAME="INJECT_TO_TABLE" SCONAME="ZCX_IC_ERROR" VERSION="1" LANGU="E" DESCRIPT="IC error" MTDTYPE="0" EDITORDER="1 "/>
  </method>
  <method CLSNAME="ZIF_IC_SERVICE" CMPNAME="SET_DEBUG_OFF" VERSION="1" LANGU="E" DESCRIPT="Set debug value off" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_SERVICE" CMPNAME="SET_DEBUG_ON" VERSION="1" LANGU="E" DESCRIPT="Set debug value on" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0"/>
 </INTF>
 <INTF CLSNAME="ZIF_IC_META_INFO" VERSION="1" LANGU="E" DESCRIPT="Persistent Meta Info" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <types CLSNAME="ZIF_IC_META_INFO" CMPNAME="TY_RELATION" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="24 " SRCCOLUMN2="26 " TYPESRC_LENG="536 " TYPESRC="BEGIN OF ty_relation,
          rel_type TYPE zic_rel_type,
          parent TYPE zic_obj_type,
          child TYPE zic_obj_type,
          sub_type TYPE feld_name,
          inner_key TYPE name_feld,
          link_table TYPE tabname,
          link_key_field TYPE fieldname,
          link_type_field type fieldname,
          link_keymap_field TYPE fieldname,
          foreign_key TYPE seocpdname,
          fk_mapping type zic_or_key_map_name,
          is_passive_select type abap_bool,
         END OF ty_relation
"/>
  <types CLSNAME="ZIF_IC_META_INFO" CMPNAME="TY_RELATIONS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="26 " SRCCOLUMN1="4 " SRCROW2="26 " SRCCOLUMN2="79 " TYPESRC_LENG="78 " TYPESRC="ty_relations TYPE standard TABLE OF ty_relation WITH NON-UNIQUE KEY rel_type
"/>
  <typeUsage CLSNAME="ZIF_IC_META_INFO" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <method CLSNAME="ZIF_IC_META_INFO" CMPNAME="FILL_BY_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Fill the component by the data in the object" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_META_INFO" CMPNAME="FILL_BY_STRUCT" SCONAME="I_STRUCTURE" VERSION="1" LANGU="E" DESCRIPT="Structure with data" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
  </method>
  <method CLSNAME="ZIF_IC_META_INFO" CMPNAME="GET_KEY_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Key structure" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_META_INFO" CMPNAME="GET_KEY_STRUCT" SCONAME="RT_COMP_KEY_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Component key structure" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
  </method>
  <method CLSNAME="ZIF_IC_META_INFO" CMPNAME="GET_OBJ_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Object structure" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_META_INFO" CMPNAME="GET_OBJ_STRUCT" SCONAME="RT_OBJ_STRUCT" VERSION="1" LANGU="E" DESCRIPT="Structure of the component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
  </method>
  <method CLSNAME="ZIF_IC_META_INFO" CMPNAME="GET_RELATIONS" VERSION="1" LANGU="E" DESCRIPT="Get meta mappings" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_META_INFO" CMPNAME="GET_RELATIONS" SCONAME="EX_RELATIONS" VERSION="1" LANGU="E" DESCRIPT="Meta mappings parent child" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_RELATIONS"/>
  </method>
  <method CLSNAME="ZIF_IC_META_INFO" CMPNAME="GET_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Table name" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_META_INFO" CMPNAME="GET_TABLE_NAME" SCONAME="RT_TABLE_NAME" VERSION="1" LANGU="E" DESCRIPT="Table name, 16 characters" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TABNAME16"/>
  </method>
 </INTF>
 <INTF CLSNAME="ZIF_IC_COMPOSITE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <include CLSNAME="ZIF_IC_COMPOSITE" REFCLSNAME="ZIF_IC_COMPONENT" VERSION="1" STATE="1"/>
  <types CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="TY_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENT" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="TY_COMPONENTS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMPONENTS" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="TY_COMP_TAB_ENTRIES" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMP_TAB_ENTRIES" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="TY_COMP_TAB_ENTRY" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TY_COMP_TAB_ENTRY" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="TY_RELATION" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="TY_RELATION" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="TY_RELATIONS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="TY_RELATIONS" TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="C_PATH_TOKEN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="M_CHILDS" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TY_COMP_TAB_ENTRIES" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="ADD" VERSION="1" LANGU="E" DESCRIPT="Add a component" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="ADD" SCONAME="I_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Component to add" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="COUNT" VERSION="1" LANGU="E" DESCRIPT="Count children" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="COUNT" SCONAME="RT_NUMBER" VERSION="1" LANGU="E" DESCRIPT="Number of children" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="FILL_BY_STRUCT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="FILL_BY_STRUCT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD" VERSION="1" LANGU="E" DESCRIPT="Get a child component" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD" SCONAME="I_COMP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE"/>
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD" SCONAME="I_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Search by Object Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJECT_NR"/>
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD" SCONAME="RT_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Child component" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILDREN" VERSION="1" LANGU="E" DESCRIPT="Get all child components" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILDREN" SCONAME="RT_CHILDREN" VERSION="1" LANGU="E" DESCRIPT="Child components" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TY_COMP_TAB_ENTRIES"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_KEY" VERSION="1" LANGU="E" DESCRIPT="Get a child component by key" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_KEY" SCONAME="I_COMP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE"/>
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_KEY" SCONAME="I_OBJECT_KEY" VERSION="1" LANGU="E" DESCRIPT="Search by Object Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_KEY" SCONAME="RT_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Child component" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_NAME" VERSION="1" LANGU="E" DESCRIPT="Get a child component by name" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_NAME" SCONAME="I_PATH_NAME" VERSION="1" LANGU="E" DESCRIPT="Path name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR30"/>
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_NAME" SCONAME="RT_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_PATH" VERSION="1" LANGU="E" DESCRIPT="Get a child component by searching the path" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_PATH" SCONAME="I_PATH" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_PATH"/>
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_CHILD_BY_PATH" SCONAME="RT_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_DESCRIPTION" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_DESCRIPTION" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_KEY_STRUCT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_KEY_STRUCT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_NAME" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_NAME" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_OBJECT_NR" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_OBJECT_NR" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_OBJ_STRUCT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_OBJ_STRUCT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_PARENT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_PARENT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_PATH" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_PATH" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_RANK" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_RANK" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_RELATIONS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_RELATIONS" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_TABLE_NAME" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_TABLE_NAME" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="GET_TYPE" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="GET_TYPE" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="REMOVE" VERSION="1" LANGU="E" DESCRIPT="Remove a component" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="REMOVE" SCONAME="I_COMP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="REMOVE" SCONAME="I_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJECT_NR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="REMOVE" SCONAME="I_COMP" VERSION="1" LANGU="E" DESCRIPT="Remove IC Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPONENT" PAROPTIONL="X"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPOSITE" CMPNAME="TAB_ENTRY" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_COMPONENT" REFCMPNAME="TAB_ENTRY" BCMTDCAT="00" BCMTDSYN="0"/>
 </INTF>
 <INTF CLSNAME="ZIF_IC_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <include CLSNAME="ZIF_IC_COMPONENT" REFCLSNAME="ZIF_IC_META_INFO" VERSION="1" STATE="1"/>
  <include CLSNAME="ZIF_IC_COMPONENT" REFCLSNAME="ZIF_IC_VALIDATING" VERSION="1" STATE="1"/>
  <types CLSNAME="ZIF_IC_COMPONENT" CMPNAME="TY_RELATION" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="TY_RELATION" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_COMPONENT" CMPNAME="TY_RELATIONS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " TYPTYPE="0" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="TY_RELATIONS" TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_COMPONENT" CMPNAME="TY_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZIF_IC_COMPONENT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZIF_IC_COMPONENT" CMPNAME="TY_COMPONENTS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="32 " SRCCOLUMN1="4 " SRCROW2="32 " SRCCOLUMN2="52 " TYPESRC_LENG="51 " TYPESRC="ty_components TYPE STANDARD TABLE OF ty_component
"/>
  <types CLSNAME="ZIF_IC_COMPONENT" CMPNAME="TY_COMP_TAB_ENTRY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="34 " SRCCOLUMN1="4 " SRCROW2="40 " SRCCOLUMN2="32 " TYPESRC_LENG="239 " TYPESRC="BEGIN OF ty_comp_tab_entry,
          comp_type TYPE zic_obj_type,
          number TYPE zic_object_nr,
          name TYPE zic_name,
          rank TYPE zic_rank,
          comp TYPE ty_component,
         END OF ty_comp_tab_entry
"/>
  <types CLSNAME="ZIF_IC_COMPONENT" CMPNAME="TY_COMP_TAB_ENTRIES" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="42 " SRCCOLUMN1="4 " SRCROW2="42 " SRCCOLUMN2="94 " TYPESRC_LENG="93 " TYPESRC="ty_comp_tab_entries TYPE SORTED TABLE OF ty_comp_tab_entry WITH UNIQUE KEY comp_type number
"/>
  <typeUsage CLSNAME="ZIF_IC_COMPONENT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILD" VERSION="1" LANGU="E" DESCRIPT="Create a child component from a parent" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILD" SCONAME="I_PARENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE"/>
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILD" SCONAME="I_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE"/>
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILD" SCONAME="I_SUB_TYPE" VERSION="1" LANGU="E" DESCRIPT="Sub type value" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILD" SCONAME="EX_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_COMPONENT"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILDS" VERSION="1" LANGU="E" DESCRIPT="Create child components from a parent" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILDS" SCONAME="I_PARENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE"/>
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILDS" SCONAME="I_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE"/>
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILDS" SCONAME="I_SUB_TYPE" VERSION="1" LANGU="E" DESCRIPT="Sub type value" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="SPACE"/>
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="CREATE_CHILDS" SCONAME="EX_INSTANCES" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TY_COMPONENTS"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="FILL_BY_STRUCT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="FILL_BY_STRUCT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Description getter" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_DESCRIPTION" SCONAME="RT_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Component Description" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_DESCRIPTION"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_KEY_STRUCT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_KEY_STRUCT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_NAME" VERSION="1" LANGU="E" DESCRIPT="Component name" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_NAME" SCONAME="RT_NAME" VERSION="1" LANGU="E" DESCRIPT="Component Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_NAME"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Getter for IC object number" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_OBJECT_NR" SCONAME="RT_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_OBJECT_NR"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_OBJ_STRUCT" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_OBJ_STRUCT" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_PARENT" VERSION="1" LANGU="E" DESCRIPT="Parent composite" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_PARENT" SCONAME="RT_PARENT" VERSION="1" LANGU="E" DESCRIPT="Parent Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_PATH" VERSION="1" LANGU="E" DESCRIPT="Path by component" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_PATH" SCONAME="RT_PATH_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Path" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_PATH"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_RANK" VERSION="1" LANGU="E" DESCRIPT="Ranking of component" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_RANK" SCONAME="RT_RANK" VERSION="1" LANGU="E" DESCRIPT="Component Ranking" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_RANK"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_RELATIONS" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_RELATIONS" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_TABLE_NAME" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_META_INFO" REFCMPNAME="GET_TABLE_NAME" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_TYPE" VERSION="1" LANGU="E" DESCRIPT="Object type" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="GET_TYPE" SCONAME="RT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIC_OBJ_TYPE"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="IS_PARENT" VERSION="1" LANGU="E" DESCRIPT="Is component or composite." EXPOSURE="2" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="IS_PARENT" SCONAME="IS_PARENT" VERSION="1" LANGU="E" DESCRIPT="true if composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Description setten" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_DESCRIPTION" SCONAME="IM_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container description" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_DESCRIPTION"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_NAME" VERSION="1" LANGU="E" DESCRIPT="Set component name" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_NAME" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_NAME"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Setter for IC object number" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_OBJECT_NR" SCONAME="I_OBJECT_NR" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Object Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_OBJECT_NR"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_PARENT" VERSION="1" LANGU="E" DESCRIPT="Set parent composite" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_PARENT" SCONAME="I_PARENT" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container Composite" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_IC_COMPOSITE"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_RANK" VERSION="1" LANGU="E" DESCRIPT="Ranking setter" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="SET_RANK" SCONAME="IM_RANK" VERSION="1" LANGU="E" DESCRIPT="Intelligent Container rank" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIC_RANK"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="TAB_ENTRY" VERSION="1" LANGU="E" DESCRIPT="Make a tab entry from this component" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZIF_IC_COMPONENT" CMPNAME="TAB_ENTRY" SCONAME="R_TAB_ENTRY" VERSION="1" LANGU="E" DESCRIPT="Table entry for childs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TY_COMP_TAB_ENTRY"/>
  </method>
  <method CLSNAME="ZIF_IC_COMPONENT" CMPNAME="VALIDATE" VERSION="1" LANGU="E" ALIAS="X" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" REFCLSNAME="ZIF_IC_VALIDATING" REFCMPNAME="VALIDATE" BCMTDCAT="00" BCMTDSYN="0"/>
 </INTF>
 <INTF CLSNAME="ZIF_IC_COMMAND" VERSION="1" LANGU="E" DESCRIPT="Command object" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <method CLSNAME="ZIF_IC_COMMAND" CMPNAME="EXECUTE" VERSION="1" LANGU="E" DESCRIPT="Execute command" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0"/>
  <method CLSNAME="ZIF_IC_COMMAND" CMPNAME="ROLLBACK" VERSION="1" LANGU="E" DESCRIPT="Rollback command" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0"/>
 </INTF>
 <MSAG ARBGB="ZIC_ERROR_MSG" MASTERLANG="E" RESPUSER="BCUSER" STEXT="IC error messages">
  <t100 SPRSL="E" ARBGB="ZIC_ERROR_MSG" MSGNR="000" TEXT="There was an IC exception"/>
  <t100 SPRSL="E" ARBGB="ZIC_ERROR_MSG" MSGNR="001" TEXT="The field &amp;1 can not be empty"/>
  <t100 SPRSL="E" ARBGB="ZIC_ERROR_MSG" MSGNR="002" TEXT="Class &amp;1 does not exist"/>
  <t100 SPRSL="E" ARBGB="ZIC_ERROR_MSG" MSGNR="003" TEXT="The method with name &amp;1 doesn&apos;t exist for class &amp;2"/>
  <t100 SPRSL="E" ARBGB="ZIC_ERROR_MSG" MSGNR="004" TEXT="The mandatory parameter &amp;1 doesn&apos;t exist for method &amp;2"/>
  <t100t SPRSL="E" ARBGB="ZIC_ERROR_MSG" STEXT="IC error messages"/>
 </MSAG>
 <MSAG ARBGB="ZIC_MESSAGES" MASTERLANG="E" RESPUSER="BCUSER" STEXT="Intelligent container messages">
  <t100 SPRSL="E" ARBGB="ZIC_MESSAGES" MSGNR="000" TEXT="Intelligent container components"/>
  <t100t SPRSL="E" ARBGB="ZIC_MESSAGES" STEXT="Intelligent container messages"/>
 </MSAG>
 <PROG NAME="ZIC_TEST_01_TOP" VARCL="X" SUBC="I" RMAND="001" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZIC_TEST_01_TOP" LENGTH="23 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZIC_TEST_01_TOP
*&amp;---------------------------------------------------------------------*

REPORT zic_test_01.

CONSTANTS gc_cont_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos;.

DATA: g_container TYPE REF TO zcl_ic_container.


*----------------------------------------------------------------------*
*       CLASS ZCL_IC_TEST_01 DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_IC_TEST_01 DEFINITION.
  PUBLIC SECTION.
    METHODS: get_result_test RETURNING value(rt_result) TYPE abap_bool.
ENDCLASS.                    &quot;ZCL_IC_TEST_01 DEFINITION

*----------------------------------------------------------------------*
*       CLASS ZCL_IC_TEST_01 IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_IC_TEST_01 IMPLEMENTATION.

  METHOD get_result_test.
    rt_result = abap_true.
  ENDMETHOD.
                 &quot;GET_RESULT_TEST
ENDCLASS.                    &quot;ZCL_IC_TEST_01 IMPLEMENTATION</source>
 </PROG>
 <PROG NAME="ZIC_TEST_01" VARCL="X" SUBC="1" RMAND="001" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Program ZIC_ALV_01" LENGTH="18 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZIC_TEST_01
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

INCLUDE zic_test_01_top                          .    &quot; global Data

* INCLUDE ZIC_ALV_01_O01                          .  &quot; PBO-Modules
* INCLUDE ZIC_ALV_01_I01                          .  &quot; PAI-Modules
* INCLUDE ZIC_ALV_01_F01                          .  &quot; FORM-Routinest

FORM test_injection changing ch_container TYPE REF TO zcl_ic_container.
  FREE ch_container.
  zcl_ic_service=&gt;inject( EXPORTING i_context_path = gc_cont_path
                                    i_program_name = syst-repid  ).

  ch_container = g_container.

ENDFORM.                    &quot;test_injection</source>
 </PROG>
 <PROG NAME="ZIC_IC_SERICE_TEST_TOP" VARCL="X" SUBC="I" RSTAT="T" RMAND="001" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZIC_IC_SERICE_TEST_TOP" LENGTH="30 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZIC_IC_SERICE_TEST_TOP                            Report zic_ic_serice_test
*&amp;
*&amp;---------------------------------------------------------------------*

 REPORT zic_ic_serice_test.

data go_alv type ref to cl_gui_alv_grid.

*----------------------------------------------------------------------*
*       CLASS Ic_Service_Test DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
 CLASS ic_service_test DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
   PUBLIC SECTION.

     METHODS: constructor,
              t01_inject_class FOR TESTING.
&quot;   To user ???????????     cl_abap_test_abap_compiler

   PRIVATE SECTION.

     METHODS: create_environment.



 ENDCLASS.                    &quot;ic_service_test DEFINITION</source>
 </PROG>
 <PROG NAME="ZIC_IC_SERICE_TEST" VARCL="X" SUBC="1" RSTAT="T" RMAND="001" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Program ZIC_IC_SERICE_TEST" LENGTH="26 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZIC_IC_SERICE_TEST
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

INCLUDE zic_ic_serice_test_top                  .    &quot; global Data

* INCLUDE ZIC_IC_SERICE_TEST_O01                  .  &quot; PBO-Modules
* INCLUDE ZIC_IC_SERICE_TEST_I01                  .  &quot; PAI-Modules
* INCLUDE ZIC_IC_SERICE_TEST_F01                  .  &quot; FORM-Routines

*----------------------------------------------------------------------*
*       CLASS Ic_Service_Test IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS ic_service_test IMPLEMENTATION.
  METHOD constructor.
     create_environment( ).
  ENDMETHOD.                    &quot;constructor

  METHOD t01_inject_class.

  ENDMETHOD.                    &quot;t01_inject_class

  METHOD create_environment.
    SUBMIT zic_container_test.
  ENDMETHOD.                    &quot;create_environment


ENDCLASS.                    &quot;ic_service_test IMPLEMENTATION</source>
 </PROG>
 <PROG NAME="ZIC_IC_ALV_01_TOP" VARCL="X" SUBC="I" RMAND="001" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZIC_IC_ALV_01_TOP" LENGTH="25 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZIC_IC_ALV_01_TOP
*&amp;---------------------------------------------------------------------*

REPORT  zic_ic_alv_01.

CONSTANTS:  gc_alv_tabname TYPE slis_tabname VALUE &apos;SFLIGHT&apos;,
            gc_flight_container TYPE scrfname VALUE &apos;FLIGHTDATA_CONTAINER&apos;.

DATA: go_grid1_inj TYPE REF TO cl_gui_alv_grid,
      go_cont  TYPE REF TO cl_gui_custom_container,
      git_sflight TYPE TABLE OF sflight,
      go_screen_100 TYPE REF TO cl_bus_abstract_main_screen.

*----------------------------------------------------------------------*
*       CLASS lcl_main_screen_0100 DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_main_screen_0100 DEFINITION
                            INHERITING FROM cl_bus_abstract_main_screen.
  PUBLIC SECTION.
    CONSTANTS:
       program_name TYPE bus_screen-program_name VALUE &apos;ZIC_IC_ALV_01&apos;,
       screen_number TYPE bus_screen-dynpro_number VALUE &apos;0100&apos;.
  PROTECTED SECTION.
    METHODS: call_screen REDEFINITION,
             call_screen_starting_at REDEFINITION.

ENDCLASS.                    &quot;lcl_main_screen_0100 DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_main_screen_0100 IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_main_screen_0100 IMPLEMENTATION.
  METHOD call_screen.
    CALL SCREEN screen_number.
  ENDMETHOD.                    &quot;call_screen
  METHOD call_screen_starting_at.
    CALL SCREEN screen_number
      STARTING AT iv_xstart iv_ystart
      ENDING AT   iv_xend iv_yend.

  ENDMETHOD.                    &quot;call_screen_starting_at
ENDCLASS.                    &quot;lcl_main_screen_0100 IMPLEMENTATION</source>
 </PROG>
 <PROG NAME="ZIC_IC_ALV_01" VARCL="X" SUBC="1" RMAND="001" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Program ZIC_IC_ALV_01" LENGTH="21 "/>
   </language>
  </textPool>
  <dynpros>
   <dynpro PROG="ZIC_IC_ALV_01" DNUM="0100" FNUM="0000" BZMX="20 " BZBR="98 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Alv screen">
    <dynprofield FNAM="FLIGHTDATA_CONTAINER" DIDX="0014" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="62" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="01" ADEZ="01"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
* MODULE STATUS_0100.
*
PROCESS AFTER INPUT.
* MODULE USER_COMMAND_0100.</dynproflowsource>
   </dynpro>
  </dynpros>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZIC_IC_ALV_01
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*



INCLUDE zic_ic_alv_01_top                  .    &quot; global Data

start-of-SELECTION.
cl_bus_abstract_screen=&gt;get_screen(
                             EXPORTING iv_program_name =  lcl_main_screen_0100=&gt;program_name
                                       iv_dynpro_number = lcl_main_screen_0100=&gt;screen_number
                             IMPORTING ev_screen = go_screen_100 ).
*get data
SELECT * FROM sflight INTO TABLE git_sflight.

* create a custom container control for our ALV Control
CREATE OBJECT go_cont
  EXPORTING
    repid                       = sy-repid
    container_name              = gc_flight_container
  EXCEPTIONS
    cntl_error                  = 1
    cntl_system_error           = 2
    create_error                = 3
    lifetime_error              = 4
    lifetime_dynpro_dynpro_link = 5.

* create an instance of alv control
CREATE OBJECT go_grid1_inj
  EXPORTING
    i_parent = go_cont.

go_grid1_inj-&gt;set_table_for_first_display(
      EXPORTING
        i_structure_name = gc_alv_tabname
*        is_print         = gs_print
*        is_layout        = gs_layout
      CHANGING
        it_outtab        = git_sflight ).

go_screen_100-&gt;show( ).


*&amp;---------------------------------------------------------------------*
*&amp;      Form  bus_screen_create
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;VALUE               text
*      --&gt;(IV_PROGRAM_NAME)   text
*      --&gt;VALUE               text
*      --&gt;(IV_DYNPRO_NUMBER)  text
*      --&gt;CR_SCREEN           text
*----------------------------------------------------------------------*
FORM bus_screen_create USING value(iv_program_name)
                             value(iv_dynpro_number)
                       CHANGING cr_screen.

  CASE iv_dynpro_number.
    WHEN lcl_main_screen_0100=&gt;screen_number.
      create object cr_screen type lcl_main_screen_0100
        EXPORTING iv_program_name = iv_program_name
                  iv_dynpro_number = iv_dynpro_number.
  ENDCASE.
ENDFORM.                    &quot;bus_screen_create</source>
 </PROG>
 <PROG NAME="ZIC_DEMO_CREATE_DATA_CREATEF01" VARCL="X" SUBC="I" RMAND="001" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZIC_DEMO_CREATE_DATA_CREATEF01" LENGTH="38 "/>
   </language>
  </textPool>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZIC_DEMO_CREATE_DATA_CREATEF01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CREATE_CTX_SCARR
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM create_ctx_scarr .
*Ctx creation
  DATA lo_scarr_ctx TYPE REF TO zcl_ic_cont_context.

  CREATE OBJECT lo_scarr_ctx
    EXPORTING
      i_cont        = go_ic_cont
      i_ctx_nr      = 5015
      i_name        = &apos;SCARR&apos;
      i_parent_ctx  = go_fl_alv_ctx
      i_description = &apos;Scarr Report&apos;
      i_rank        = 3.

  zcl_ic_persist=&gt;save( i_ic_comp = lo_scarr_ctx ).

*Create Implementation Context
  DATA lo_impl_ctx TYPE REF TO zcl_ic_impl_context.

  CREATE OBJECT lo_impl_ctx
    EXPORTING
      i_cont        = go_ic_cont
      i_ctx_nr      = &apos;5001&apos;
      i_name        = &apos;IMPL_SCARR_01&apos;
      i_description = &apos;Basic SCARR list&apos;
      i_parent_ctx  = lo_scarr_ctx
      i_rank        = 1.

  zcl_ic_persist=&gt;save( lo_impl_ctx ).

*Create IC Classes

*1. Sql Class + SQL resultset
  DATA: lo_ic_sql_class TYPE REF TO zcl_ic_class,
        lo_ic_res_class TYPE REF TO zcl_ic_class,
        lo_method_constr TYPE REF TO zcl_ic_constr_method,
        lo_method_exe TYPE REF TO zcl_ic_method,
        lo_method_param_tab TYPE REF TO zcl_ic_method,
        lo_ic_stat_param TYPE REF TO zcl_ic_method_param,
        lo_ic_rs_tab_param TYPE REF TO zcl_ic_method_param,
        lo_res_param TYPE REF TO zcl_ic_method_param,
        lo_comp TYPE REF TO zif_ic_component,
        lo_data TYPE REF TO zcl_ic_value,
        lo_table TYPE REF TO zcl_ic_table,
        lo_res_ic_obj TYPE REF TO zcl_ic_class_value.

*Create resultset IC-class
  CREATE OBJECT lo_ic_res_class
    EXPORTING
      i_class_nr    = 510
      i_name        = &apos;SQL_RESULTSET&apos;
      i_description = &apos;Scarr Sql result set&apos;
      i_parent      = lo_impl_ctx
      i_rank        = 2
      i_class_name  = &apos;CL_SQL_RESULT_SET&apos;.

  lo_ic_res_class-&gt;set_default_constructor( abap_false ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_res_class ).

*Create method for resultset EXE
  CREATE OBJECT lo_method_param_tab
    EXPORTING
      i_class       = lo_ic_res_class
      i_method_nr   = 5003
      i_method_name = &apos;SET_PARAM_TABLE&apos;
      i_description = &apos;Setter for result table&apos;
      i_rank        = 3.

  lo_method_param_tab-&gt;set_is_active( abap_true ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_method_param_tab ).

  CREATE OBJECT lo_ic_rs_tab_param
    EXPORTING
      i_method      = lo_method_param_tab
      i_param_nr    = 5006
      i_param_name  = &apos;ITAB_REF&apos;
      i_description = &apos;Table for resultset&apos;
      i_rank        = 1.

*Create value object
  lo_table = zcl_ic_table=&gt;create( i_table_name = &apos;SCARR&apos; ).

  lo_ic_rs_tab_param-&gt;set_ic_value( lo_table ).
  lo_comp = lo_table.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_rs_tab_param ).

*Create RS-&gt;next_package( 5 ) method
  DATA: lo_next_method TYPE REF TO zcl_ic_method,
        lo_upto_param TYPE REF TO zcl_ic_method_param,
        lo_upto_value TYPE REF TO zcl_ic_data.

  CREATE OBJECT lo_next_method
    EXPORTING
      i_class       = lo_ic_res_class
      i_method_nr   = 5004
      i_method_name = &apos;NEXT_PACKAGE&apos;
      i_description = &apos;Read package from resultset&apos;
      i_rank        = 4.

  lo_next_method-&gt;set_is_active( abap_true ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_next_method ).

  CREATE OBJECT lo_upto_param
    EXPORTING
      i_method      = lo_next_method
      i_param_nr    = 5007
      i_param_name  = &apos;UPTO&apos;
      i_description = &apos;Maximum Number of Data Records to Read&apos;
      i_rank        = 1.

*Create value object
  lo_upto_value = zcl_ic_data=&gt;create( i_data_type = &apos;INT2&apos;
                                       i_data_value = &apos;500&apos; ).

  lo_upto_param-&gt;set_ic_value( lo_upto_value ).
  lo_comp = lo_upto_value.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_upto_param ).

*Craete Sql class
  CREATE OBJECT lo_ic_sql_class
    EXPORTING
      i_class_nr    = 501
      i_name        = &apos;SCARR_SQL&apos;
      i_description = &apos;Scarr Sql statement class&apos;
      i_parent      = lo_impl_ctx
      i_rank        = 1
      i_class_name  = &apos;CL_SQL_PREPARED_STATEMENT&apos;.

  lo_ic_sql_class-&gt;set_default_constructor( abap_false ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_sql_class ).

*Create method constructor
  CREATE OBJECT lo_method_constr
    EXPORTING
      i_class       = lo_ic_sql_class
      i_method_nr   = 5001
      i_method_name = &apos;CONSTRUCTOR&apos;
      i_description = &apos;Constructor method&apos;
      i_rank        = 1.

  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_method_constr ).

*Create Param
  CREATE OBJECT lo_ic_stat_param
    EXPORTING
      i_method      = lo_method_constr
      i_param_nr    = 501
      i_param_name  = &apos;STATEMENT&apos;
      i_description = &apos;Sql statement parameter&apos;
      i_rank        = 1.

*Create value object
  lo_data = zcl_ic_data=&gt;create( i_data_type = &apos;STRING&apos;
                       i_data_value = &apos;SELECT * FROM SCARR&apos; ).

  lo_ic_stat_param-&gt;set_ic_value( lo_data ).

  lo_comp = lo_data.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_stat_param ).

*Create method for resultset EXE
  CREATE OBJECT lo_method_exe
    EXPORTING
      i_class       = lo_ic_sql_class
      i_method_nr   = 5002
      i_method_name = &apos;EXECUTE_QUERY&apos;
      i_description = &apos;Constructor method&apos;
      i_rank        = 2.

  lo_method_exe-&gt;set_is_active( abap_true ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_method_exe ).

*Create Result set parameter method EXE
  CREATE OBJECT lo_res_param
    EXPORTING
      i_method      = lo_method_exe
      i_param_nr    = 502
      i_param_name  = &apos;RESULT_SET&apos;
      i_description = &apos;Resultset return object&apos;
      i_rank        = 1.

*Create value objec for resultset IC class
  lo_res_ic_obj = zcl_ic_class_value=&gt;create( i_ic_class = lo_ic_res_class ).

  lo_res_param-&gt;set_ic_value( lo_res_ic_obj ).
  lo_comp ?= lo_res_ic_obj.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_res_param ).

*2. ALV Class
  DATA: lo_ic_alv_class TYPE REF TO zcl_ic_class,
        lo_meth_alv_constr TYPE REF TO zcl_ic_constr_method,
        lo_ic_tab_param TYPE REF TO zcl_ic_method_param,
        lo_rs_tab_param  TYPE REF TO zcl_ic_method_param_value.

  CREATE OBJECT lo_ic_alv_class
    EXPORTING
      i_class_nr    = 5005
      i_name        = &apos;ALV&apos;
      i_description = &apos;Scarr ALV-table&apos;
      i_parent      = lo_impl_ctx
      i_rank        = 4
      i_class_name  = &apos;CL_SALV_TABLE&apos;.

  lo_ic_alv_class-&gt;set_default_constructor( abap_false ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_alv_class ).

*Create method constructor
  CREATE OBJECT lo_meth_alv_constr
    EXPORTING
      i_class       = lo_ic_alv_class
      i_method_nr   = 5005
      i_method_name = &apos;FACTORY&apos;
      i_description = &apos;Factory ALV-method&apos;
      i_rank        = 1.

  lo_meth_alv_constr-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_meth_alv_constr ).

* Create Alv Table param 1
  CREATE OBJECT lo_ic_tab_param
    EXPORTING
      i_method      = lo_meth_alv_constr
      i_param_nr    = 5115
      i_param_name  = &apos;T_TABLE&apos;
      i_description = &apos;SCARR-table for ALV grid&apos;
      i_rank        = 1.

*Create value objec from resultset table to Alv table
  lo_rs_tab_param = zcl_ic_method_param_value=&gt;create( i_ic_param = lo_ic_rs_tab_param ).

  lo_ic_tab_param-&gt;set_ic_value( lo_rs_tab_param ).
  lo_comp ?= lo_rs_tab_param.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_tab_param ).

ENDFORM.                    &quot; CREATE_CTX_SCARR
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CREATE_CTX_SFLIGHT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM create_ctx_sflight .
*Ctx creation
  DATA lo_sflight_ctx TYPE REF TO zcl_ic_cont_context.

  CREATE OBJECT lo_sflight_ctx
    EXPORTING
      i_cont        = go_ic_cont
      i_ctx_nr      = 5110
      i_name        = &apos;SFLIGHT&apos;
      i_parent_ctx  = go_fl_alv_ctx
      i_description = &apos;SFLIGHT Report&apos;
      i_rank        = 10.

  zcl_ic_persist=&gt;save( i_ic_comp = lo_sflight_ctx ).

*Create Implementation Context
  DATA lo_impl_ctx TYPE REF TO zcl_ic_impl_context.

  CREATE OBJECT lo_impl_ctx
    EXPORTING
      i_cont        = go_ic_cont
      i_ctx_nr      = &apos;5111&apos;
      i_name        = &apos;IMPL_SFLIGHT_01&apos;
      i_description = &apos;Basic SFLIGHT list&apos;
      i_parent_ctx  = lo_sflight_ctx
      i_rank        = 11.

  zcl_ic_persist=&gt;save( lo_impl_ctx ).

*Create IC Classes

*1. Sql Class + SQL resultset
  DATA: lo_ic_sql_class TYPE REF TO zcl_ic_class,
        lo_ic_res_class TYPE REF TO zcl_ic_class,
        lo_method_constr TYPE REF TO zcl_ic_constr_method,
        lo_method_exe TYPE REF TO zcl_ic_method,
        lo_method_param_tab TYPE REF TO zcl_ic_method,
        lo_ic_stat_param TYPE REF TO zcl_ic_method_param,
        lo_ic_rs_tab_param TYPE REF TO zcl_ic_method_param,
        lo_res_param TYPE REF TO zcl_ic_method_param,
        lo_comp TYPE REF TO zif_ic_component,
        lo_data TYPE REF TO zcl_ic_value,
        lo_table TYPE REF TO zcl_ic_table,
        lo_res_ic_obj TYPE REF TO zcl_ic_class_value.

*Create resultset IC-class
  CREATE OBJECT lo_ic_res_class
    EXPORTING
      i_class_nr    = 520
      i_name        = &apos;SQL_RESULTSET&apos;
      i_description = &apos;SFLIGHT Sql result set&apos;
      i_parent      = lo_impl_ctx
      i_rank        = 12
      i_class_name  = &apos;CL_SQL_RESULT_SET&apos;.

  lo_ic_res_class-&gt;set_default_constructor( abap_false ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_res_class ).

*Create method for resultset EXE
  CREATE OBJECT lo_method_param_tab
    EXPORTING
      i_class       = lo_ic_res_class
      i_method_nr   = 5103
      i_method_name = &apos;SET_PARAM_TABLE&apos;
      i_description = &apos;Setter for result table&apos;
      i_rank        = 3.

  lo_method_param_tab-&gt;set_is_active( abap_true ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_method_param_tab ).

  CREATE OBJECT lo_ic_rs_tab_param
    EXPORTING
      i_method      = lo_method_param_tab
      i_param_nr    = 5112
      i_param_name  = &apos;ITAB_REF&apos;
      i_description = &apos;Table for resultset&apos;
      i_rank        = 1.

*Create value object
  lo_table = zcl_ic_table=&gt;create( i_table_name = &apos;SFLIGHT&apos; ).

  lo_ic_rs_tab_param-&gt;set_ic_value( lo_table ).
  lo_comp = lo_table.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_rs_tab_param ).

*Create RS-&gt;next_package( 5 ) method
  DATA: lo_next_method TYPE REF TO zcl_ic_method,
        lo_upto_param TYPE REF TO zcl_ic_method_param,
        lo_upto_value TYPE REF TO zcl_ic_data.

  CREATE OBJECT lo_next_method
    EXPORTING
      i_class       = lo_ic_res_class
      i_method_nr   = 5104
      i_method_name = &apos;NEXT_PACKAGE&apos;
      i_description = &apos;Read package from resultset&apos;
      i_rank        = 4.

  lo_next_method-&gt;set_is_active( abap_true ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_next_method ).

  CREATE OBJECT lo_upto_param
    EXPORTING
      i_method      = lo_next_method
      i_param_nr    = 5105
      i_param_name  = &apos;UPTO&apos;
      i_description = &apos;Maximum Number of Data Records to Read&apos;
      i_rank        = 1.

*Create value object
  lo_upto_value = zcl_ic_data=&gt;create( i_data_type = &apos;INT2&apos;
                                       i_data_value = &apos;500&apos; ).

  lo_upto_param-&gt;set_ic_value( lo_upto_value ).
  lo_comp = lo_upto_value.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_upto_param ).

*Craete Sql class
  CREATE OBJECT lo_ic_sql_class
    EXPORTING
      i_class_nr    = 511
      i_name        = &apos;SFLIGHT_SQL&apos;
      i_description = &apos;SFLIGHT Sql statement class&apos;
      i_parent      = lo_impl_ctx
      i_rank        = 1
      i_class_name  = &apos;CL_SQL_PREPARED_STATEMENT&apos;.

  lo_ic_sql_class-&gt;set_default_constructor( abap_false ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_sql_class ).

*Create method constructor
  CREATE OBJECT lo_method_constr
    EXPORTING
      i_class       = lo_ic_sql_class
      i_method_nr   = 5101
      i_method_name = &apos;CONSTRUCTOR&apos;
      i_description = &apos;Constructor method&apos;
      i_rank        = 1.

  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_method_constr ).

*Create Param
  CREATE OBJECT lo_ic_stat_param
    EXPORTING
      i_method      = lo_method_constr
      i_param_nr    = 511
      i_param_name  = &apos;STATEMENT&apos;
      i_description = &apos;Sql statement parameter&apos;
      i_rank        = 1.

*Create value object
  lo_data = zcl_ic_data=&gt;create( i_data_type = &apos;STRING&apos;
                                 i_data_value = &apos;SELECT * FROM SFLIGHT&apos; ).

  lo_ic_stat_param-&gt;set_ic_value( lo_data ).
  lo_comp = lo_data.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_stat_param ).

*Create method for resultset EXE
  CREATE OBJECT lo_method_exe
    EXPORTING
      i_class       = lo_ic_sql_class
      i_method_nr   = 5102
      i_method_name = &apos;EXECUTE_QUERY&apos;
      i_description = &apos;Constructor method&apos;
      i_rank        = 2.

  lo_method_exe-&gt;set_is_active( abap_true ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_method_exe ).

*Create Result set parameter method EXE
  CREATE OBJECT lo_res_param
    EXPORTING
      i_method      = lo_method_exe
      i_param_nr    = 512
      i_param_name  = &apos;RESULT_SET&apos;
      i_description = &apos;Resultset return object&apos;
      i_rank        = 1.

*Create value objec for resultset IC class
  lo_res_ic_obj = zcl_ic_class_value=&gt;create( i_ic_class = lo_ic_res_class ).

  lo_res_param-&gt;set_ic_value( lo_res_ic_obj ).
  lo_comp ?= lo_res_ic_obj.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_res_param ).

*2. ALV Class
  DATA: lo_ic_alv_class TYPE REF TO zcl_ic_class,
        lo_meth_alv_constr TYPE REF TO zcl_ic_constr_method,
        lo_ic_tab_param TYPE REF TO zcl_ic_method_param,
        lo_rs_tab_param  TYPE REF TO zcl_ic_method_param_value.

  CREATE OBJECT lo_ic_alv_class
    EXPORTING
      i_class_nr    = 5105
      i_name        = &apos;ALV&apos;
      i_description = &apos;SFLIGHT ALV-table&apos;
      i_parent      = lo_impl_ctx
      i_rank        = 4
      i_class_name  = &apos;CL_SALV_TABLE&apos;.

  lo_ic_alv_class-&gt;set_default_constructor( abap_false ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_alv_class ).

*Create method constructor
  CREATE OBJECT lo_meth_alv_constr
    EXPORTING
      i_class       = lo_ic_alv_class
      i_method_nr   = 5105
      i_method_name = &apos;FACTORY&apos;
      i_description = &apos;Factory ALV-method&apos;
      i_rank        = 1.

  lo_meth_alv_constr-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_meth_alv_constr ).

*Create Alv Table param 1
  CREATE OBJECT lo_ic_tab_param
    EXPORTING
      i_method      = lo_meth_alv_constr
      i_param_nr    = 5111
      i_param_name  = &apos;T_TABLE&apos;
      i_description = &apos;SFLIGHT-table for ALV grid&apos;
      i_rank        = 1.

*Create value objec from resultset table to Alv table
  lo_rs_tab_param = zcl_ic_method_param_value=&gt;create( i_ic_param = lo_ic_rs_tab_param ).

  lo_ic_tab_param-&gt;set_ic_value( lo_rs_tab_param ).
  lo_comp ?= lo_rs_tab_param.
  zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
  zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_tab_param ).
ENDFORM.                    &quot; CREATE_CTX_SFLIGHT</source>
 </PROG>
 <PROG NAME="ZIC_DEMO_CREATE_DATA" VARCL="X" SUBC="1" RMAND="001" RLOAD="E" FIXPT="X" UCCHECK="X">
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZIC_TEST_CREATE_DEMO_DATA
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  zic_test_create_demo_data.

DATA: go_ic_cont TYPE REF TO zcl_ic_container,
      go_flight_ctx TYPE REF TO zcl_ic_cont_context,
      go_fl_alv_ctx TYPE REF TO zcl_ic_cont_context.

INCLUDE zic_demo_create_data_createf01.

START-OF-SELECTION.

  CREATE OBJECT go_ic_cont
    EXPORTING
      i_object_nr   = 5
      i_name        = &apos;IC_DEMO&apos;
      i_description = &apos;Demo Container&apos;.

  zcl_ic_persist=&gt;save( i_ic_comp = go_ic_cont ).

*Ctx creation
  CREATE OBJECT go_flight_ctx
    EXPORTING
      i_cont        = go_ic_cont
      i_ctx_nr      = 5000
      i_name        = &apos;FLIGHT_CTX&apos;
      i_description = &apos;Demo contexts for FLIGHTS&apos;
      i_rank        = 1.

  zcl_ic_persist=&gt;save( i_ic_comp = go_flight_ctx ).

  CREATE OBJECT go_fl_alv_ctx
    EXPORTING
      i_cont        = go_ic_cont
      i_ctx_nr      = 5010
      i_name        = &apos;ALV&apos;
      i_parent_ctx  = go_flight_ctx
      i_description = &apos;Reports for Flight demo&apos;
      i_rank        = 2.

  zcl_ic_persist=&gt;save( i_ic_comp = go_fl_alv_ctx ).

  PERFORM create_ctx_scarr.
  PERFORM create_ctx_sflight.

  WRITE &apos;Testdata created into IC-Tables.&apos;.</source>
 </PROG>
 <PROG NAME="ZIC_DEMO_01" VARCL="X" SUBC="1" RSTAT="T" RMAND="001" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Program ZIC_TEST_02" LENGTH="19 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZIC_TEST_02
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT  zic_demo_01.

CONSTANTS gc_cont_path TYPE zic_path VALUE &apos;/IC_DEMO/FLIGHT_CTX/ALV/SCARR/IMPL_SCARR_01&apos;.
CONSTANTS gc_cont_path2 TYPE zic_path VALUE &apos;/IC_DEMO/FLIGHT_CTX/ALV/SFLIGHT/IMPL_SFLIGHT_01&apos;.

*DATA g_scarr_sql TYPE REF TO cl_sql_prepared_statement.
*DATA g_sql_resultset TYPE REF TO cl_sql_result_set.
DATA g_alv TYPE REF TO cl_salv_table.


START-OF-SELECTION.

  zcl_ic_service=&gt;inject( EXPORTING i_context_path = gc_cont_path
                                    i_program_name = syst-repid ).

break bcuser.
  g_alv-&gt;display( ).</source>
 </PROG>
 <PROG NAME="ZIC_CONTAINER_TEST_TOP" VARCL="X" SUBC="I" RSTAT="T" RMAND="001" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZIC_CONTAINER_TEST_TOP" LENGTH="30 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZIC_CONTAINER_TEST_TOP                            Report ZIC_CONTIANER_TEST
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT   zic_container_test.

*----------------------------------------------------------------------*
*       CLASS Container_test DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS container_test DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PUBLIC SECTION.
    CONSTANTS c_cont_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos;.

*   Persistent Container tests
    METHODS: t01_save_container FOR TESTING,
             t02_select_container FOR TESTING,
             t03_save_cont_context FOR TESTING,
             t031_add_cont_context FOR TESTING,
             t04_select_cont_context FOR TESTING,
             t05_save_impl_context FOR TESTING,
             t06_select_impl_context FOR TESTING,
             t07_save_class FOR TESTING,
             t08_select_class FOR TESTING,
             t09_save_method FOR TESTING,
             t10_select_method FOR TESTING,
             t11_save_class_attrib FOR TESTING,
             t12_select_class_attrib FOR TESTING,
             t13_save_method_param FOR TESTING,
             t14_select_method_param FOR TESTING,
             t15_save_class_attrib_value FOR TESTING,
             t16_select_class_attrib_value FOR TESTING,
             t17_save_method_param_value FOR TESTING,
             t18_select_method_param_value FOR TESTING,
             t19_save_class_attrib_value FOR TESTING,
             t20_select_class_attrib_value FOR TESTING,
             t21_save_inj_type_obj FOR TESTING,
             t22_select_inj_type_obj FOR TESTING,
*            general tests
             t30_select_full_impl_ctx FOR TESTING,
             t31_test_parent_child FOR TESTING.

*   Persistent table + tree tests
    METHODS: t50_select_table_values FOR TESTING,
             t51_select_table_wildcards FOR TESTING,
             t55_select_filled_container FOR TESTING,
             t56_select_filled_cont_dept FOR TESTING,
             t57_select_tree_by_path  FOR TESTING,
             t58_select_path FOR TESTING,
             t59_select_to_root FOR TESTING.
*   Injection Tests
    METHODS:  ti01_prg_member FOR TESTING,
              ti02_constructor_empty_global FOR TESTING RAISING zcx_ic_error,
              ti03_local_class FOR TESTING RAISING zcx_ic_error,
              ti04_factory_empty FOR TESTING RAISING zcx_ic_error,
              ti05_attribute_object FOR TESTING RAISING zcx_ic_error,
              ti06_method_active_param FOR TESTING RAISING zcx_ic_error,
              ti07_attrib_param FOR TESTING RAISING zcx_ic_error,
              ti08_method_param_param FOR TESTING RAISING zcx_ic_error,
              ti_09_attrib_attrib FOR TESTING RAISING zcx_ic_error,
              ti_10_inj_type_object for testing raising zcx_ic_error,
*             other IC values
              ti20_value_table_ref FOR TESTING RAISING zcx_ic_error.

*TODO CL_ABAP_REGEX

  PRIVATE SECTION.
    METHODS: check_tree IMPORTING i_o_impl_ctx TYPE REF TO zcl_ic_impl_context,
             get_impl_ctx1 EXPORTING e_impl_ctx TYPE REF TO zcl_ic_impl_context,
             fill_impl_ctx1 CHANGING ch_impl_ctx TYPE REF TO zcl_ic_impl_context,
             fill_impl_ctx1_for_obj_inj CHANGING ch_impl_ctx TYPE REF TO zcl_ic_impl_context.

ENDCLASS.                    &quot;Container_test DEFINITION

*----------------------------------------------------------------------*
*       CLASS Inject_Mock DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_inject_mock DEFINITION.
  PUBLIC SECTION.
*   Persistent Container tests
    METHODS: constructor IMPORTING i_path TYPE zic_path RAISING zcx_ic_error,
             get_container_inj RETURNING value(rt_container_inj) TYPE REF TO zcl_ic_container.

  PRIVATE SECTION.
    DATA m_container_inj TYPE REF TO zcl_ic_container.

ENDCLASS.                    &quot;Container_test DEFINITION</source>
 </PROG>
 <PROG NAME="ZIC_CONTAINER_TEST" VARCL="X" SUBC="1" RSTAT="T" RMAND="001" RLOAD="E" FIXPT="X" UCCHECK="X">
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZIC_CONTAINER_TEST
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

INCLUDE zic_container_test_top.    &quot; global Data

*----------------------------------------------------------------------*
*       CLASS inject_mock IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_inject_mock IMPLEMENTATION.
  METHOD constructor.
    DATA lo_error TYPE REF TO zcx_ic_error.

    TRY.
        zcl_ic_service=&gt;inject( i_path ).
      CATCH zcx_ic_error INTO lo_error.
        RAISE EXCEPTION lo_error.
    ENDTRY.
  ENDMETHOD.                  &quot;constructor

  METHOD get_container_inj.
    rt_container_inj = m_container_inj.
  ENDMETHOD.                    &quot;get_container_inj
ENDCLASS.                    &quot;lcl_inject_mock IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS container_test IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS container_test IMPLEMENTATION.
  METHOD t01_save_container.
    DATA lo_ic_cont TYPE REF TO zcl_ic_container.

    CREATE OBJECT lo_ic_cont
      EXPORTING
        i_object_nr   = 2
        i_name        = &apos;CONTAINER_2&apos;
        i_description = &apos;Test Container 2&apos;
        i_cont_type   = zcl_ic_container=&gt;c_customizing_container_type.

    zcl_ic_persist=&gt;save( i_ic_comp = lo_ic_cont ).

    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

  ENDMETHOD.                    &quot;save_container

  METHOD t02_select_container.
    DATA lo_ic_cont2 TYPE REF TO zcl_ic_container.

    lo_ic_cont2 = zcl_ic_container=&gt;create( 2 ).

    zcl_ic_persist=&gt;select( lo_ic_cont2 ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = lo_ic_cont2 ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_cont2-&gt;get_name( )
        exp = &apos;CONTAINER_2&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act = lo_ic_cont2-&gt;get_description( )
       exp = &apos;Test Container 2&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act = lo_ic_cont2-&gt;get_cont_type( )
       exp = zcl_ic_container=&gt;c_customizing_container_type ).

  ENDMETHOD.                    &quot;save_container

  METHOD t03_save_cont_context.
    DATA lo_ic_cont TYPE REF TO zcl_ic_container.
    DATA: lo_cont_ctx_1_1 TYPE REF TO zcl_ic_cont_context,
          lo_cont_ctx_1_2 TYPE REF TO zcl_ic_cont_context.
    DATA: lo_cont_ctx_2 TYPE REF TO zcl_ic_cont_context,
          lo_cont_ctx_3 TYPE REF TO zcl_ic_cont_context,
          lo_cont_ctx_4 TYPE REF TO zcl_ic_cont_context.

*   select container
    lo_ic_cont = zcl_ic_container=&gt;create( 2 ).
    zcl_ic_persist=&gt;select( lo_ic_cont ).

*   Create Container 1
    CREATE OBJECT lo_cont_ctx_1_1
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = 9000
        i_name        = &apos;SFLIGHT&apos;
        i_description = &apos;Context for SFLIGHT&apos;
        i_rank        = 1.
*  Create Container 1
    CREATE OBJECT lo_cont_ctx_1_2
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = 9100
        i_name        = &apos;SCARR&apos;
        i_description = &apos;Context for SCARR&apos;
        i_rank        = 2.

*   Create Container 2
    CREATE OBJECT lo_cont_ctx_2
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = 9001
        i_name        = &apos;UI&apos;
        i_description = &apos;UI Context for SFLIGHT&apos;
        i_parent_ctx  = lo_cont_ctx_1_1
        i_rank        = 1.
*   Create Container 3
    CREATE OBJECT lo_cont_ctx_3
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = 9101
        i_name        = &apos;UI&apos;
        i_description = &apos;UI Context for SCARR&apos;
        i_parent_ctx  = lo_cont_ctx_1_2
        i_rank        = 1.
*   Create Container 4
    CREATE OBJECT lo_cont_ctx_4
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = 9140
        i_name        = &apos;SELECT&apos;
        i_description = &apos;Select for SCARR&apos;
        i_parent_ctx  = lo_cont_ctx_1_2
        i_rank        = 2.

    zcl_ic_persist=&gt;save( lo_cont_ctx_1_1 ).
    zcl_ic_persist=&gt;save( lo_cont_ctx_1_2 ).
    zcl_ic_persist=&gt;save( lo_cont_ctx_2 ).
    zcl_ic_persist=&gt;save( lo_cont_ctx_3 ).
    zcl_ic_persist=&gt;save( lo_cont_ctx_4 ).

    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

    cl_aunit_assert=&gt;assert_not_initial( lo_cont_ctx_1_1 ).

    zcl_ic_persist=&gt;save( lo_cont_ctx_2 ).

    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

    cl_aunit_assert=&gt;assert_not_initial( lo_cont_ctx_2 ).
    cl_aunit_assert=&gt;assert_not_initial( lo_cont_ctx_3 ).
    cl_aunit_assert=&gt;assert_not_initial( lo_cont_ctx_4 ).

  ENDMETHOD.                    &quot;save_cont_context

  METHOD t031_add_cont_context.
    DATA: lo_ic_cont TYPE REF TO zcl_ic_container,
          lo_cont_ctx TYPE REF TO zcl_ic_cont_context,
          lo_comp TYPE REF TO zif_ic_component.

*   select container
    lo_ic_cont = zcl_ic_container=&gt;create( 2 ).
    zcl_ic_persist=&gt;select( lo_ic_cont ).

*   Create Container context
    CREATE OBJECT lo_cont_ctx
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = 0
        i_name        = &apos;ADDED_CTX&apos;
        i_description = &apos;Added context&apos;
        i_rank        = 11.

    lo_comp ?= lo_cont_ctx.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).

    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

    cl_aunit_assert=&gt;assert_not_initial( lo_cont_ctx ).

  ENDMETHOD.                    &quot;save_cont_context
  METHOD t04_select_cont_context.
    DATA: lo_ic_cont  TYPE REF TO zcl_ic_container,
          lo_ctx TYPE REF TO zcl_ic_cont_context,
          lo_ctx2 TYPE REF TO zcl_ic_cont_context.

*   select container
    lo_ic_cont = zcl_ic_container=&gt;create( 2 ).
    zcl_ic_persist=&gt;select( lo_ic_cont ).

*   get container context
    lo_ctx ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;9000&apos;
        i_ctx_type        = zcl_ic_context=&gt;c_cont_ctx ).

    lo_ctx2 ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;9001&apos;
        i_ctx_type        = zcl_ic_context=&gt;c_cont_ctx
        i_parent_ctx      = lo_ctx ).

    zcl_ic_persist=&gt;select( lo_ctx ).
    zcl_ic_persist=&gt;select( lo_ctx2 ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ctx-&gt;get_container( )-&gt;get_name( )
        exp = &apos;CONTAINER_2&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act = lo_ctx2-&gt;get_container( )-&gt;get_name( )
      exp = &apos;CONTAINER_2&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act =  lo_ctx-&gt;get_description( )
       exp = &apos;Context for SFLIGHT&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act =  lo_ctx2-&gt;get_description( )
       exp = &apos;UI Context for SFLIGHT&apos; ).

  ENDMETHOD.                    &quot;select_cont_context

  METHOD t05_save_impl_context.
    DATA: lo_ic_cont TYPE REF TO zcl_ic_container,
          lo_ctx TYPE REF TO zcl_ic_cont_context,
          lo_ctx2 TYPE REF TO zcl_ic_cont_context,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context.

*   get parent objects
    lo_ic_cont = zcl_ic_container=&gt;create( 2 ).
    zcl_ic_persist=&gt;select( lo_ic_cont ).

    lo_ctx ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;9000&apos;
        i_ctx_type        = zcl_ic_context=&gt;c_cont_ctx ).

    lo_ctx2 ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;9001&apos;
        i_ctx_type        = zcl_ic_context=&gt;c_cont_ctx
        i_parent_ctx      = lo_ctx ).

    zcl_ic_persist=&gt;select( lo_ctx ).
    zcl_ic_persist=&gt;select( lo_ctx2 ).

*   Create Implementation Context
    CREATE OBJECT lo_impl_ctx
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = &apos;10000001&apos;
        i_name        = &apos;IMPL 01 FOR TESTING&apos;
        i_description = &apos;Testing Application context&apos;
        i_parent_ctx  = lo_ctx2
        i_rank        = 1.

    zcl_ic_persist=&gt;save( lo_impl_ctx ).

    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

  ENDMETHOD.                    &quot;save_impl_context

  METHOD t06_select_impl_context.
    DATA lo_impl_ctx TYPE REF TO zcl_ic_impl_context.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_impl_ctx-&gt;get_container( )-&gt;get_name( )
        exp = &apos;CONTAINER_2&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act =   lo_impl_ctx-&gt;get_name( )
      exp = &apos;IMPL 01 FOR TESTING&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act =   lo_impl_ctx-&gt;get_description( )
      exp = &apos;Testing Application context&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act =   lo_impl_ctx-&gt;get_path( )
      exp = &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos; ).

  ENDMETHOD.                    &quot;select_impl_context

  METHOD t07_save_class.
    CONSTANTS lc_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos;.

    DATA: lr_comps TYPE REF TO zif_ic_composite,
          lr_cont TYPE REF TO zcl_ic_container,
          lr_ic_context TYPE REF TO zcl_ic_impl_context,
          lr_ic_class TYPE REF TO zcl_ic_class.

    DATA: lwa_test_impl_comp TYPE zic_impl_comp,
          lwa_test_class  TYPE zic_class,
          l_cont_number TYPE zic_object_nr,
          l_ctx_number TYPE zic_object_nr,
          l_ictx_number TYPE zic_object_nr,
          l_impl_comp TYPE zic_object_nr.

    lr_cont = zcl_ic_container=&gt;create( 2 ).
    lr_comps = lr_cont.

    zcl_ic_persist=&gt;select_tree(
                        EXPORTING i_until_object = zcl_ic_impl_context=&gt;c_impl_context_type
                        CHANGING  ch_ic_parent = lr_comps ).

    lr_ic_context ?= lr_comps-&gt;get_child_by_path( lc_path ).

*   Create Class Impl Object
    CREATE OBJECT lr_ic_class
      EXPORTING
        i_class_nr    = 1
        i_name        = &apos;CONTAINER&apos;
        i_description = &apos;First implementation&apos;
        i_parent      = lr_ic_context
        i_rank        = 1
        i_class_name  = &apos;ZCL_IC_CONTAINER&apos;.

    zcl_ic_persist=&gt;save_child( i_ic_child_comp = lr_ic_class ).
*   Test 1
    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

*   Test 2
    l_cont_number = lr_cont-&gt;get_object_nr( ).
    l_ctx_number = lr_ic_context-&gt;get_parent( )-&gt;get_object_nr( ).
    l_ictx_number = lr_ic_context-&gt;get_object_nr( ).
    l_impl_comp = lr_ic_class-&gt;get_object_nr( ).

    SELECT SINGLE *
      FROM zic_impl_comp
      INTO lwa_test_impl_comp
      WHERE cont_nr = l_cont_number
          AND ctx_nr = l_ctx_number
          AND impl_ctx_nr = l_ictx_number
          AND impl_comp_nr = l_impl_comp.

    cl_aunit_assert=&gt;assert_equals(
    act = sy-subrc
    exp = 0 ).

*   Test 3
    SELECT SINGLE *
      FROM zic_class
      INTO lwa_test_class
      WHERE class_nr = l_impl_comp.

    cl_aunit_assert=&gt;assert_equals(
      act = sy-subrc
      exp = 0 ).

*   Create class 2
    CREATE OBJECT lr_ic_class
      EXPORTING
        i_class_nr    = 6
        i_name        = &apos;CONTAINER_02&apos;
        i_description = &apos;Second implementation&apos;
        i_parent      = lr_ic_context
        i_rank        = 2
        i_class_name  = &apos;ZCL_IC_CONTAINER&apos;.

    zcl_ic_persist=&gt;save_child( i_ic_child_comp = lr_ic_class ).
*   Test 1
    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).
  ENDMETHOD.                    &quot;t07_save_child

  METHOD t08_select_class.
    DATA: lo_ic_comps TYPE REF TO zif_ic_composite,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_class  TYPE REF TO zcl_ic_class.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_ic_comps = lo_impl_ctx.

    zcl_ic_persist=&gt;select_childs( EXPORTING i_obj_type = zcl_ic_class=&gt;c_class_type
                                   CHANGING ch_parent_comp = lo_ic_comps ).

    lo_class ?= lo_impl_ctx-&gt;zif_ic_composite~get_child_by_name( &apos;CONTAINER&apos; ).

    cl_aunit_assert=&gt;assert_not_initial(
      act = lo_class ).

    cl_aunit_assert=&gt;assert_equals(
      act = lo_class-&gt;get_class_name( )
      exp = &apos;ZCL_IC_CONTAINER&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act = lo_class-&gt;has_default_constructor( )
      exp = abap_true ).

  ENDMETHOD.                    &quot;t08_select_class

  METHOD t09_save_method.
    CONSTANTS lc_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_method TYPE REF TO zcl_ic_constr_method.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree(
                        EXPORTING i_until_object = zcl_ic_class=&gt;c_class_type
                        CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_class ?= lo_comps-&gt;get_child_by_path( lc_path ).

*   Create Method Impl Object
    CREATE OBJECT lo_ic_method
      EXPORTING
        i_class         = lo_ic_class
        i_method_nr     = 1
        i_method_name   = &apos;CREATE&apos;
        i_description   = &apos;Static create method&apos;
        i_rank          = 1
        i_declare_level = zcl_ic_method=&gt;c_declare_static.

    lo_ic_method-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
    zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_ic_method ).
*   Test 1
    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

  ENDMETHOD.                    &quot;t09_save_select_method

  METHOD t10_select_method.
    CONSTANTS lc_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_method TYPE REF TO zcl_ic_method.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree(
                        EXPORTING i_until_object = zcl_ic_class=&gt;c_class_type
                        CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_class ?= lo_comps-&gt;get_child_by_path( lc_path ).

*   select method object + creation
    CREATE OBJECT lo_ic_method
      EXPORTING
        i_class     = lo_ic_class
        i_method_nr = 1.

    zcl_ic_persist=&gt;select( lo_ic_method ).

    cl_aunit_assert=&gt;assert_not_initial( lo_ic_method ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_method-&gt;get_name( )
        exp = &apos;CREATE&apos; ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_method-&gt;get_declare_level( )
        exp = zcl_ic_method=&gt;c_declare_static ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_method-&gt;get_path( )
        exp = &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER/CREATE&apos; ).

  ENDMETHOD.                    &quot;t10_select_method

  METHOD  t11_save_class_attrib.
    CONSTANTS lc_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_attrib TYPE REF TO zcl_ic_class_attrib.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree(
                        EXPORTING i_until_object = zcl_ic_class=&gt;c_class_type
                        CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_class ?= lo_comps-&gt;get_child_by_path( lc_path ).

*   Create Class Attribute
    CREATE OBJECT lo_ic_attrib
      EXPORTING
        i_class       = lo_ic_class
        i_attrib_nr   = 1
        i_attrib_name = &apos;NAME&apos;
        i_description = &apos;Container Name&apos;
        i_rank        = 1.

*   create value object
    DATA: lo_data TYPE REF TO zcl_ic_value,
          lo_comp TYPE REF TO zif_ic_component.

    lo_data = zcl_ic_data=&gt;create( i_data_type = &apos;ZIC_NAME&apos;
                           i_data_value = &apos;Changed_name&apos; ).

    lo_ic_attrib-&gt;set_ic_value( lo_data ).
    lo_comp ?= lo_data.

    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save( lo_ic_attrib ).
*   Test 1
    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

    cl_aunit_assert=&gt;assert_not_initial( lo_data-&gt;get_object_nr( ) ).

  ENDMETHOD.                    &quot;t11_save_class_attrib

  METHOD t12_select_class_attrib.
    CONSTANTS lc_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_attrib TYPE REF TO zcl_ic_class_attrib.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree( CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_class ?= lo_comps-&gt;get_child_by_path( lc_path ).

*   select method object + creation
    lo_ic_attrib ?= lo_ic_class-&gt;zif_ic_composite~get_child_by_name( i_path_name = &apos;NAME&apos;  ).

    cl_aunit_assert=&gt;assert_not_initial( lo_ic_attrib ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_attrib-&gt;get_name( )
        exp = &apos;NAME&apos; ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = lo_ic_attrib-&gt;get_ic_value( ) ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_attrib-&gt;get_path( )
        exp = &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER/NAME&apos; ).
*   test vaule obj member
    DATA lo_data TYPE zic_name.

    lo_ic_attrib-&gt;get_ic_value( )-&gt;get_value( IMPORTING e_value = lo_data ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_data
        exp = &apos;Changed_name&apos; ).
  ENDMETHOD.                    &quot;t12_select_class_attrib

  METHOD  t13_save_method_param.
    CONSTANTS: lc_path_class TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_method TYPE REF TO zcl_ic_method,
          lo_ic_param TYPE REF TO zcl_ic_method_param,
          lo_comp TYPE REF TO zif_ic_component,
          lo_data TYPE REF TO zcl_ic_value.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree(
                        EXPORTING i_until_object = zcl_ic_object=&gt;c_method_type
                        CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_class ?= lo_comps-&gt;get_child_by_path( lc_path_class ).
*   create param for create method
    lo_ic_method = lo_ic_class-&gt;get_method( im_method_nr = 1 ).

    CREATE OBJECT lo_ic_param
      EXPORTING
        i_method      = lo_ic_method
        i_param_nr    = 9
        i_param_name  = &apos;I_OBJECT_NR&apos;
        i_description = &apos;Create method param&apos;
        i_rank        = 1.

*   create value object
    lo_data = zcl_ic_data=&gt;create( i_data_type = &apos;ZIC_OBJECT_NR&apos;
                                   i_data_value = space ).

    lo_ic_param-&gt;set_ic_value( lo_data ).

    lo_comp ?= lo_data.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).

    zcl_ic_persist=&gt;save( lo_ic_param ).

*   create second param
    CLEAR: lo_ic_method, lo_ic_param, lo_data.

*   Create Method Impl Object
    CREATE OBJECT lo_ic_method
      EXPORTING
        i_class         = lo_ic_class
        i_method_nr     = 5
        i_method_name   = &apos;ZIF_IC_COMPONENT~SET_NAME&apos;
        i_description   = &apos;Setter for the name&apos;
        i_rank          = 1
        i_declare_level = zcl_ic_method=&gt;c_declare_instance.

    lo_ic_method-&gt;set_is_active( zcl_ic_method=&gt;c_is_passive ).
    zcl_ic_persist=&gt;save_child( lo_ic_method ).

*   Create Param
    CREATE OBJECT lo_ic_param
      EXPORTING
        i_method      = lo_ic_method
        i_param_nr    = 1
        i_param_name  = &apos;I_NAME&apos;
        i_description = &apos;Container Name param&apos;
        i_rank        = 1.

*   create value object
    lo_data = zcl_ic_data=&gt;create( i_data_type = &apos;ZIC_NAME&apos;
                         i_data_value = &apos;Changed_name_by_method&apos; ).

    lo_ic_param-&gt;set_ic_value( lo_data ).

    lo_comp ?= lo_data.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).

    zcl_ic_persist=&gt;save( lo_ic_param ).

*   Test 1
    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

    cl_aunit_assert=&gt;assert_not_initial( lo_ic_param-&gt;get_object_nr( ) ).
  ENDMETHOD.                    &quot;t13_save_method_param

  METHOD t14_select_method_param.
    CONSTANTS lc_path_method TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER/ZIF_IC_COMPONENT~SET_NAME&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_method TYPE REF TO zcl_ic_method,
          lo_ic_param TYPE REF TO zcl_ic_method_param.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree( CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_method ?= lo_comps-&gt;get_child_by_path( lc_path_method ).

*   select method param object + creation
    lo_ic_param ?= lo_ic_method-&gt;zif_ic_composite~get_child_by_name( i_path_name = &apos;I_NAME&apos; ).

    cl_aunit_assert=&gt;assert_not_initial( lo_ic_param ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_param-&gt;get_name( )
        exp = &apos;I_NAME&apos; ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = lo_ic_param-&gt;get_ic_value( ) ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_param-&gt;get_path( )
        exp = &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER/ZIF_IC_COMPONENT~SET_NAME/I_NAME&apos; ).
*   test vaule obj member
    DATA l_name TYPE zic_name.

    lo_ic_param-&gt;get_ic_value( )-&gt;get_value( IMPORTING e_value = l_name ).

    cl_aunit_assert=&gt;assert_equals(
        act = l_name
        exp = &apos;Changed_name_by_method&apos; ).
  ENDMETHOD.                    &quot;t14_select_method_param

  METHOD t15_save_class_attrib_value.
    CONSTANTS: lc_path_class TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER&apos;,
               lc_path_class2 TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER_02&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_method TYPE REF TO zcl_ic_method,
          lo_ic_param TYPE REF TO zcl_ic_method_param.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree(
                        EXPORTING i_until_object = zcl_ic_object=&gt;c_class_type
                        CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_class ?= lo_comps-&gt;get_child_by_path( lc_path_class ).

*   Create Passive Method
    CREATE OBJECT lo_ic_method
      EXPORTING
        i_class         = lo_ic_class
        i_method_nr     = 6
        i_method_name   = &apos;ZIF_IC_COMPONENT~GET_NAME&apos;
        i_description   = &apos;Getter for the name&apos;
        i_rank          = 2
        i_declare_level = zcl_ic_method=&gt;c_declare_instance.

    zcl_ic_persist=&gt;save_child( lo_ic_method ).

*   Create method RETURN parameter
    CREATE OBJECT lo_ic_param
      EXPORTING
        i_method      = lo_ic_method
        i_param_nr    = 2
        i_param_name  = &apos;RT_NAME&apos;
        i_description = &apos;Container return name param&apos;
        i_rank        = 1.

*   create value object
    DATA: lo_data TYPE REF TO zcl_ic_value,
          lo_comp TYPE REF TO zif_ic_component.

    lo_data = zcl_ic_data=&gt;create( i_data_type = &apos;ZIC_NAME&apos;
                                   i_data_value = space ).

    lo_ic_param-&gt;set_ic_value( lo_data ).

    lo_comp ?= lo_data.

    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save( i_ic_comp =  lo_ic_param ).

*   Creation of an attribute,
*   Value of attribute = result of method
    DATA: lo_ic_class2 TYPE REF TO zcl_ic_class,
          lo_ic_attrib TYPE REF TO zcl_ic_class_attrib,
          lo_value TYPE REF TO zcl_ic_method_param_value.

    lo_ic_class2 ?= lo_comps-&gt;get_child_by_path( lc_path_class2 ).

*   Add attribute description, value =  value from a method parameter
    CREATE OBJECT lo_ic_attrib
      EXPORTING
        i_class       = lo_ic_class2
        i_attrib_nr   = 3
        i_attrib_name = &apos;NAME&apos;
        i_description = &apos;Container Name from getter&apos;
        i_rank        = 1.

*   Add method parameter value to attribute
    lo_value ?= zcl_ic_method_param_value=&gt;create( lo_ic_param ).
    lo_ic_attrib-&gt;set_ic_value( lo_value ).

    lo_comp = lo_value.

    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save( lo_ic_attrib ).

*   Test 1
    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).
  ENDMETHOD.                    &quot;t15_save_class_attrib_value

  METHOD t16_select_class_attrib_value.
    CONSTANTS lc_path_method TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER_02/NAME&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_attrib TYPE REF TO zcl_ic_class_attrib,
          lo_ic_value TYPE REF TO zcl_ic_method_param_value,
          lo_ic_method TYPE REF TO zcl_ic_method,
          lo_ic_param TYPE REF TO zcl_ic_method_param.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree( CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_attrib ?= lo_comps-&gt;get_child_by_path( lc_path_method ).

*   Test attribute
    cl_aunit_assert=&gt;assert_not_initial( lo_ic_attrib ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_attrib-&gt;get_name( )
        exp = &apos;NAME&apos; ).

    cl_aunit_assert=&gt;assert_equals(
         act = lo_ic_attrib-&gt;get_parent( )-&gt;get_name( )
         exp = &apos;CONTAINER_02&apos; ).

*   Test value object from attribute
    lo_ic_value ?= lo_ic_attrib-&gt;get_ic_value( ).
    cl_aunit_assert=&gt;assert_not_initial( lo_ic_value ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_value-&gt;get_value_type( )
        exp = zcl_ic_value=&gt;c_value_type_param ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = lo_ic_value-&gt;get_ic_method_param( ) ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_value-&gt;get_ic_method_param( )-&gt;get_name( )
        exp = &apos;RT_NAME&apos; ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = lo_ic_value-&gt;get_ic_method_param( )-&gt;get_ic_value( ) ).

    cl_aunit_assert=&gt;assert_equals(
         act = lo_ic_value-&gt;get_ic_method_param( )-&gt;get_ic_value( )-&gt;get_value_type( )
         exp = zcl_ic_value=&gt;c_value_type_data ).

  ENDMETHOD.                    &quot;t16_select_class_attrib_value

  METHOD t17_save_method_param_value.
    CONSTANTS:lc_path_method_param_getter TYPE zic_path VALUE &apos;/IMPL 01 FOR TESTING/CONTAINER/ZIF_IC_COMPONENT~GET_NAME/RT_NAME&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_comp TYPE REF TO zif_ic_component,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_method TYPE REF TO zcl_ic_method,
          lo_ic_param TYPE REF TO zcl_ic_method_param,
          lo_method_constr TYPE REF TO zcl_ic_constr_method,
          l_method_setter TYPE zic_method_name.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_comps ?= lo_impl_ctx.
    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_comps ).

*   Create Method Impl Object
    CREATE OBJECT lo_ic_class
      EXPORTING
        i_class_nr    = 7
        i_name        = &apos;TEST_OBJECT3&apos;
        i_description = &apos;Test object for method param injection&apos;
        i_parent      = lo_impl_ctx
        i_rank        = 4
        i_class_name  = &apos;ZCL_IC_TEST&apos;.

*  Create method constructor
    CREATE OBJECT lo_method_constr
      EXPORTING
        i_class         = lo_ic_class
        i_method_nr     = 7
        i_method_name   = &apos;CREATE&apos;
        i_description   = &apos;Static create method&apos;
        i_rank          = 1
        i_declare_level = zcl_ic_method=&gt;c_declare_static.

    l_method_setter = &apos;WRITE_DESCRIPTION&apos;.
*   Create Method Impl Object
    CREATE OBJECT lo_ic_method
      EXPORTING
        i_class         = lo_ic_class
        i_method_nr     = 8
        i_method_name   = l_method_setter
        i_description   = &apos;Setter for the name&apos;
        i_rank          = 2
        i_declare_level = zcl_ic_method=&gt;c_declare_instance.

    lo_ic_method-&gt;set_is_active( zcl_ic_method=&gt;c_is_passive ).
    lo_ic_class-&gt;set_default_constructor( abap_false ).

    zcl_ic_persist=&gt;save_child( lo_ic_class ).
    zcl_ic_persist=&gt;save_child( lo_method_constr ).
    zcl_ic_persist=&gt;save_child( lo_ic_method ).

*   Create Param
    CREATE OBJECT lo_ic_param
      EXPORTING
        i_method      = lo_ic_method
        i_param_nr    = 7
        i_param_name  = &apos;I_DESCRIPTION&apos;
        i_description = &apos;Write param&apos;
        i_rank        = 1.

*   create value object
    DATA: lo_value TYPE REF TO zcl_ic_value,
          lo_ic_param_getter TYPE REF TO zcl_ic_method_param.

*   get param from getter, this becomes the value object of the new setter
    lo_ic_param_getter ?= lo_comps-&gt;get_child_by_path( lc_path_method_param_getter ).
    lo_value = zcl_ic_method_param_value=&gt;create( lo_ic_param_getter ).

    lo_ic_param-&gt;set_ic_value( lo_value ).
    lo_comp ?= lo_value.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save( lo_ic_param ).

*   Test 1
    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

  ENDMETHOD.                    &quot;t17_save_method_param_value

  METHOD t18_select_method_param_value.
    CONSTANTS lc_path_method TYPE zic_path VALUE &apos;/IMPL 01 FOR TESTING/TEST_OBJECT3/WRITE_DESCRIPTION/I_DESCRIPTION&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_ic_param TYPE REF TO zcl_ic_method_param,
          lo_ic_value TYPE REF TO zcl_ic_method_param_value.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_comps ?= lo_impl_ctx.

    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_comps ).

    lo_ic_param ?= lo_comps-&gt;get_child_by_path( lc_path_method ).

*   Test attribute
    cl_aunit_assert=&gt;assert_not_initial( lo_ic_param ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_param-&gt;get_name( )
        exp = &apos;I_DESCRIPTION&apos; ).

*   Test value object from attribute
    lo_ic_value ?= lo_ic_param-&gt;get_ic_value( ).
    cl_aunit_assert=&gt;assert_not_initial( lo_ic_value ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_value-&gt;get_value_type( )
        exp = zcl_ic_value=&gt;c_value_type_param ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = lo_ic_value-&gt;get_ic_method_param( ) ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_value-&gt;get_ic_method_param( )-&gt;get_name( )
        exp = &apos;RT_NAME&apos; ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = lo_ic_value-&gt;get_ic_method_param( )-&gt;get_ic_value( ) ).

    cl_aunit_assert=&gt;assert_equals(
         act = lo_ic_value-&gt;get_ic_method_param( )-&gt;get_ic_value( )-&gt;get_value_type( )
         exp = zcl_ic_value=&gt;c_value_type_data ).

  ENDMETHOD.                    &quot;t18_select_method_param_value

  METHOD t19_save_class_attrib_value.
    CONSTANTS:lc_path_test2_class TYPE zic_path VALUE &apos;IMPL 01 FOR TESTING/TEST_OBJECT3&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_comp TYPE REF TO zif_ic_component,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_method_constr TYPE REF TO zcl_ic_constr_method,
          lo_value TYPE REF TO zcl_ic_value,
          lo_ic_attrib_value TYPE REF TO zcl_ic_class_attrib_value,
          lo_ic_attrib TYPE REF TO zcl_ic_class_attrib,
          lo_ic_test2_class TYPE REF TO zcl_ic_class,
          lo_ic_test2_attrib TYPE REF TO zcl_ic_class_attrib.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_comps ?= lo_impl_ctx.
    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_comps ).

    lo_ic_test2_class ?= lo_comps-&gt;get_child_by_path( lc_path_test2_class ).

    CREATE OBJECT lo_ic_test2_attrib
      EXPORTING
        i_attrib_nr   = 7
        i_attrib_name = &apos;ATTRIB_TEXT&apos;
        i_class       = lo_ic_test2_class
        i_description = &apos;Attribute Getter tester&apos;.

*   create value object
    lo_value = zcl_ic_data=&gt;create( i_data_type = &apos;TEXT20&apos;
                                    i_data_value = &apos;Test Class 4 attribvalue&apos; ).

    lo_comp ?= lo_value.
    lo_ic_test2_attrib-&gt;set_ic_value( lo_value ).

    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save_child( lo_ic_test2_attrib ).

*   Create Method Impl Object
    CREATE OBJECT lo_ic_class
      EXPORTING
        i_class_nr    = 9
        i_name        = &apos;TEST_OBJECT4&apos;
        i_description = &apos;Test object for attrib value&apos;
        i_parent      = lo_impl_ctx
        i_rank        = 5
        i_class_name  = &apos;ZCL_IC_TEST&apos;.

*  Create method constructor
    CREATE OBJECT lo_method_constr
      EXPORTING
        i_class         = lo_ic_class
        i_method_nr     = 0
        i_method_name   = &apos;CREATE&apos;
        i_description   = &apos;Static create method for test obj 4&apos;
        i_rank          = 1
        i_declare_level = zcl_ic_method=&gt;c_declare_static.

    lo_method_constr-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
    lo_ic_class-&gt;set_default_constructor( abap_false ).

*   Create attrib
    CREATE OBJECT lo_ic_attrib
      EXPORTING
        i_attrib_nr   = 8
        i_class       = lo_ic_class
        i_attrib_name = &apos;CHANGED_ATTRIB&apos;
        i_description = &apos;Attribute value thats changed by attrib value&apos;.

    zcl_ic_persist=&gt;save_child( lo_ic_class ).
    lo_comp ?= lo_method_constr.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save_child( lo_ic_attrib ).

*   create value object
    lo_ic_attrib_value = zcl_ic_class_attrib_value=&gt;create( lo_ic_test2_attrib ).

    lo_ic_attrib-&gt;set_ic_value( lo_ic_attrib_value ).
    lo_comp ?= lo_ic_attrib_value.

    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save( lo_ic_attrib ).

*   Test 1
    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

  ENDMETHOD.                    &quot;t19_save_class_attrib_value

  METHOD t20_select_class_attrib_value.
    CONSTANTS lc_path_attrib TYPE zic_path VALUE &apos;IMPL 01 FOR TESTING/TEST_OBJECT4/CHANGED_ATTRIB&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_ic_attrib TYPE REF TO zcl_ic_class_attrib,
          lo_ic_value TYPE REF TO zcl_ic_class_attrib_value.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_comps ?= lo_impl_ctx.

    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_comps ).

    lo_ic_attrib ?= lo_comps-&gt;get_child_by_path( lc_path_attrib ).

*   Test attribute
    cl_aunit_assert=&gt;assert_not_initial( lo_ic_attrib ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_attrib-&gt;get_name( )
        exp = &apos;CHANGED_ATTRIB&apos; ).

*   Test value object from attribute
    lo_ic_value ?= lo_ic_attrib-&gt;get_ic_value( ).
    cl_aunit_assert=&gt;assert_not_initial( lo_ic_value ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_value-&gt;get_value_type( )
        exp = zcl_ic_value=&gt;c_value_type_attrib ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = lo_ic_value-&gt;get_ic_class_attrib( ) ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_ic_value-&gt;get_ic_class_attrib( )-&gt;get_name( )
        exp = &apos;ATTRIB_TEXT&apos; ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = lo_ic_value-&gt;get_ic_class_attrib( )-&gt;get_ic_value( ) ).

    cl_aunit_assert=&gt;assert_equals(
         act = lo_ic_value-&gt;get_ic_class_attrib( )-&gt;get_ic_value( )-&gt;get_value_type( )
         exp = zcl_ic_value=&gt;c_value_type_data ).

    DATA lo_value TYPE REF TO zcl_ic_data.

    lo_value ?= lo_ic_value-&gt;get_ic_class_attrib( )-&gt;get_ic_value( ).

    cl_aunit_assert=&gt;assert_equals(
      act =  lo_value-&gt;get_data_value( )
      exp = &apos;Test Class 4 attribvalue&apos; ).

  ENDMETHOD.                    &quot;t20_select_class_attrib_value

  METHOD t21_save_inj_type_obj.
    CONSTANTS lc_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos;.
    DATA: lo_ic_cont TYPE REF TO zcl_ic_container,
          lo_cont_ctx_1 TYPE REF TO zcl_ic_cont_context,
          lo_cont_ctx_2 TYPE REF TO zcl_ic_cont_context,
          lo_obj        TYPE REF TO zif_ic_component,
          lo_inj_ctx_type TYPE REF TO zcl_ic_inj_type,
          lo_class TYPE REF TO zcl_ic_class,
          lo_ic_comps TYPE REF TO zif_ic_composite,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_inj_obj  TYPE REF TO zcl_ic_inj_object,
          lo_class_test TYPE REF TO zcl_ic_class,
          lo_method_constr TYPE REF TO zcl_ic_constr_method,
          lo_attrib TYPE REF TO zcl_ic_class_attrib,
          lo_attrib_test TYPE REF TO zcl_ic_class_attrib,
          lo_data TYPE REF TO zcl_ic_value,
          lo_attrib_type_value TYPE REF TO zcl_ic_value.

*   Create container for Injection Type testing
    CREATE OBJECT lo_ic_cont
      EXPORTING
        i_object_nr   = 1
        i_name        = &apos;CONTAINER_TYPE&apos;
        i_description = &apos;Test Container for Injection TYPE template&apos;
        i_cont_type   = zcl_ic_container=&gt;c_type_container_type.

    zcl_ic_persist=&gt;save( i_ic_comp = lo_ic_cont ).

    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

*   Create 2 X Context
    CREATE OBJECT lo_cont_ctx_1
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = 0
        i_name        = &apos;TYPES&apos;
        i_description = &apos;Types context&apos;
        i_rank        = 1.

    CREATE OBJECT lo_cont_ctx_2
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = 0
        i_name        = &apos;TYPE_1&apos;
        i_description = &apos;Type 1 context&apos;
        i_parent_ctx  = lo_cont_ctx_1
        i_rank        = 1.

    lo_obj = lo_cont_ctx_1.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).

    cl_aunit_assert=&gt;assert_equals(
    act = sy-subrc
    exp = 0 ).

    lo_obj = lo_cont_ctx_2.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).

    cl_aunit_assert=&gt;assert_equals(
    act = sy-subrc
    exp = 0 ).

*  Add injection context TYPE
    CREATE OBJECT lo_inj_ctx_type
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = 0
        i_name        = &apos;INJ_TYPE_01&apos;
        i_description = &apos;Testing injection context 01&apos;
        i_parent_ctx  = lo_cont_ctx_2
        i_rank        = 1.

    lo_obj = lo_inj_ctx_type.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).

    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

*   Add class TYPE
    CREATE OBJECT lo_class
      EXPORTING
        i_class_nr    = 0
        i_name        = &apos;CONTAINER_TYPE_01&apos;
        i_description = &apos;Container class from Type 01&apos;
        i_parent      = lo_inj_ctx_type
        i_rank        = 1
        i_class_name  = &apos;ZCL_IC_CONTAINER&apos;.

    lo_obj = lo_class.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).
    zcl_ic_persist=&gt;save_child( lo_class ).


    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

*   Add Class Attribute
    CREATE OBJECT lo_attrib
      EXPORTING
        i_class       = lo_class
        i_attrib_nr   = 0
        i_attrib_name = &apos;NAME&apos;
        i_description = &apos;Container Name&apos;
        i_rank        = 1.

    lo_obj = lo_attrib.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).

*   Add value object
    lo_data = zcl_ic_data=&gt;create( i_data_type = &apos;ZIC_NAME&apos;
                                   i_data_value = &apos;NAME_OF_TYPE&apos; ).

    lo_attrib-&gt;set_ic_value( lo_data ).

    lo_obj ?= lo_data.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).
    zcl_ic_persist=&gt;save( lo_attrib ).

    cl_aunit_assert=&gt;assert_equals(
           act = sy-subrc
           exp = 0 ).

*  select impl component for adding Inj-obj
    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_ic_comps = lo_impl_ctx.

    zcl_ic_persist=&gt;select_tree( CHANGING  ch_ic_parent = lo_ic_comps ).

    CREATE OBJECT lo_inj_obj
      EXPORTING
        i_name        = &apos;INJ_OBJ_01&apos;
        i_description = &apos;Testing injection context 01 for objects&apos;
        i_parent      = lo_impl_ctx
        i_rank        = 1.

    lo_inj_obj-&gt;set_inj_type( lo_inj_ctx_type ).
    lo_obj = lo_inj_obj.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).
    zcl_ic_persist=&gt;save_child( lo_inj_obj ).

    cl_aunit_assert=&gt;assert_equals(
           act = sy-subrc
           exp = 0 ).

*   Add a new test_object to context to add class from inj-object
*   Create Method Impl Object
    CREATE OBJECT lo_class_test
      EXPORTING
        i_name        = &apos;TEST_OBJECT5&apos;
        i_description = &apos;Test object for inj object&apos;
        i_parent      = lo_impl_ctx
        i_rank        = 5
        i_class_name  = &apos;ZCL_IC_TEST&apos;.

    lo_obj = lo_class_test.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).
    zcl_ic_persist=&gt;save_child( lo_class_test ).

    CREATE OBJECT lo_method_constr
      EXPORTING
        i_class         = lo_class_test
        i_method_name   = &apos;CREATE&apos;
        i_description   = &apos;Static create method&apos;
        i_rank          = 1
        i_declare_level = zcl_ic_method=&gt;c_declare_static.

    lo_class_test-&gt;set_default_constructor( abap_false ).

    lo_obj = lo_method_constr.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).
    zcl_ic_persist=&gt;save_child( lo_class_test ).

*   Add Class Attribute
    CREATE OBJECT lo_attrib_test
      EXPORTING
        i_class       = lo_class_test
        i_attrib_nr   = 0
        i_attrib_name = &apos;NAME_FROM_TYPE_OBJ&apos;
        i_description = &apos;Container Name&apos;
        i_rank        = 1.

    lo_obj = lo_attrib_test.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).

    cl_aunit_assert=&gt;assert_equals(
           act = sy-subrc
           exp = 0 ).

*   Add value object
    DATA lo_value TYPE REF TO zcl_ic_value.

    lo_value ?= lo_attrib-&gt;get_ic_value( ).

    lo_attrib_type_value = zcl_ic_type_value=&gt;create( im_ic_inj_object = lo_inj_obj
                                                 im_ic_value = lo_value ).

    lo_attrib_test-&gt;set_ic_value( lo_attrib_type_value ).

    lo_obj ?=  lo_attrib_type_value.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_obj ).
    zcl_ic_persist=&gt;save( lo_attrib_test ).

    cl_aunit_assert=&gt;assert_equals(
           act = sy-subrc
           exp = 0 ).

  ENDMETHOD.                    &quot;t21_save_inj_type_obj

  METHOD t22_select_inj_type_obj.
    CONSTANTS: lc_inj_obj_name TYPE zic_inj_obj_name VALUE &apos;INJ_OBJ_01&apos;.

    DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_ic_comps TYPE REF TO zif_ic_composite,
          lo_inj_obj  TYPE REF TO zcl_ic_inj_object,
          lo_inj_type TYPE REF TO zcl_ic_inj_type,
          lit_classes TYPE zcl_ic_class=&gt;ty_classes,
          lo_class    TYPE REF TO zcl_ic_class.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_ic_comps = lo_impl_ctx.

    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_ic_comps ).

    lo_inj_obj = lo_impl_ctx-&gt;get_inj_obj_by_name( lc_inj_obj_name  ).

    cl_aunit_assert=&gt;assert_bound( act = lo_inj_obj ).
    cl_aunit_assert=&gt;assert_bound( act =  lo_inj_obj-&gt;get_inj_type( ) ).

*   Load injection context from type
    lo_inj_obj-&gt;load_ctx( ).
    lo_inj_obj-&gt;get_inj_type( )-&gt;get_classes( IMPORTING e_classes = lit_classes ).
    cl_aunit_assert=&gt;assert_not_initial( act = lit_classes ).

    READ TABLE lit_classes INDEX 1 INTO lo_class.

    cl_aunit_assert=&gt;assert_not_initial( act = lo_class ).
    cl_aunit_assert=&gt;assert_equals(
                            act = lo_class-&gt;get_name( )
                            exp = &apos;CONTAINER_TYPE_01&apos; ).
  ENDMETHOD.                    &quot;t22_select_inj_type_obj

  METHOD t30_select_full_impl_ctx.
    DATA: lo_ic_comps TYPE REF TO zif_ic_composite,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_class TYPE REF TO zcl_ic_class,
          lo_method TYPE REF TO zcl_ic_method.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_ic_comps = lo_impl_ctx.

    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_ic_comps ).

    cl_aunit_assert=&gt;assert_equals(
        act = lo_impl_ctx-&gt;get_container( )-&gt;get_name( )
        exp = &apos;CONTAINER_2&apos; ).

    cl_aunit_assert=&gt;assert_equals(
        act =   lo_impl_ctx-&gt;get_name( )
        exp = &apos;IMPL 01 FOR TESTING&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act =   lo_impl_ctx-&gt;get_description( )
      exp = &apos;Testing Application context&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act =   lo_impl_ctx-&gt;get_path( )
      exp = &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos; ).

    lo_class ?= lo_impl_ctx-&gt;zif_ic_composite~get_child_by_name( &apos;CONTAINER&apos; ).

    cl_aunit_assert=&gt;assert_not_initial(
      act = lo_class ).

    cl_aunit_assert=&gt;assert_equals(
     act = lo_class-&gt;get_class_name( )
     exp = &apos;ZCL_IC_CONTAINER&apos; ).

    lo_method ?= lo_class-&gt;zif_ic_composite~get_child_by_name( &apos;ZIF_IC_COMPONENT~SET_NAME&apos; ).

    cl_aunit_assert=&gt;assert_equals(
       act = lo_method-&gt;get_description( )
       exp = &apos;Setter for the name&apos; ).

  ENDMETHOD.                    &quot;t30_select_full_impl_ctx

**************************************************************
***************** Container tests  ***************************
**************************************************************

  METHOD t31_test_parent_child.
    DATA: lo_ic_cont  TYPE REF TO zcl_ic_container,
      lo_ctx TYPE REF TO zcl_ic_cont_context,
      lo_ctx2 TYPE REF TO zcl_ic_cont_context,
      lo_ctx3 TYPE REF TO zcl_ic_cont_context,
      lo_ctx4 TYPE REF TO zcl_ic_cont_context,
      lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
      lo_impl_ctx2 TYPE REF TO zcl_ic_impl_context.

*   select container
    lo_ic_cont = zcl_ic_container=&gt;create( 2 ).
    zcl_ic_persist=&gt;select( lo_ic_cont ).

*   Select container context
    lo_ctx ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;9000&apos;
        i_ctx_type        =  zcl_ic_context=&gt;c_cont_ctx ).

    lo_ctx2 ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;9001&apos;
        i_ctx_type        = zcl_ic_context=&gt;c_cont_ctx
        i_parent_ctx      = lo_ctx ).

    lo_ctx3 ?= zcl_ic_context=&gt;create(
         i_container       = lo_ic_cont
         i_object_nr       = &apos;9100&apos;
         i_ctx_type        =  zcl_ic_context=&gt;c_cont_ctx ).

    lo_ctx4 ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;9101&apos;
        i_ctx_type        = zcl_ic_context=&gt;c_cont_ctx
        i_parent_ctx      = lo_ctx3 ).

    zcl_ic_persist=&gt;select( lo_ctx ).
    zcl_ic_persist=&gt;select( lo_ctx2 ).
    zcl_ic_persist=&gt;select( lo_ctx3 ).
    zcl_ic_persist=&gt;select( lo_ctx4 ).

*   get implementation context
    lo_impl_ctx ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;10000001&apos;
        i_ctx_type        = zcl_ic_context=&gt;c_impl_ctx
        i_parent_ctx      = lo_ctx2 ).

    CREATE OBJECT lo_impl_ctx2
      EXPORTING
        i_cont        = lo_ic_cont
        i_ctx_nr      = &apos;10000005&apos;
        i_name        = &apos;Impl 02 for Testing&apos;
        i_description = &apos;Testing Application context 02&apos;
        i_parent_ctx  = lo_ctx4
        i_rank        = 1.

    zcl_ic_persist=&gt;select( lo_impl_ctx  ).
    zcl_ic_persist=&gt;save( lo_impl_ctx2 ).
    zcl_ic_persist=&gt;select( lo_impl_ctx2 ).

    check_tree( lo_impl_ctx ).

    cl_aunit_assert=&gt;assert_equals(
     act = lo_impl_ctx2-&gt;get_parent( )-&gt;get_object_nr( )
     exp = &apos;9101&apos; ).

  ENDMETHOD.                    &quot;test_parent_child

**************************************************************
***************** Other tests ********************************
**************************************************************
  METHOD t50_select_table_values.
    FIELD-SYMBOLS: &lt;l_struc&gt; TYPE zcl_ic_cont_context=&gt;ty_object,
                   &lt;lit_result&gt; TYPE STANDARD TABLE,
                   &lt;lwa_result&gt; TYPE zcl_ic_cont_context=&gt;ty_object.

    DATA: lo_cont  TYPE REF TO zcl_ic_container,
          lo_ctx TYPE REF TO zcl_ic_cont_context,
          lwa_o_struc TYPE REF TO data,
          lit_o_table TYPE REF TO data.

*   select container
    lo_cont = zcl_ic_container=&gt;create( 2 ).

    lo_ctx ?= zcl_ic_object=&gt;instance( i_obj_type = zcl_ic_object=&gt;c_cont_context_type
                                       i_parent = lo_cont ).

    CREATE DATA lwa_o_struc TYPE zcl_ic_cont_context=&gt;ty_object.
    ASSIGN lwa_o_struc-&gt;* TO &lt;l_struc&gt;.

    &lt;l_struc&gt;-description = &apos;UI Context for SFLIGHT&apos;.

    lit_o_table = zcl_ic_persist=&gt;select_table( i_ic_obj_ref = lo_ctx
                                  i_result_struc = lwa_o_struc
                                  i_condition_struc = lwa_o_struc ).

    ASSIGN lit_o_table-&gt;* TO &lt;lit_result&gt;.

    LOOP AT &lt;lit_result&gt; ASSIGNING &lt;lwa_result&gt;.
      DATA l_desc TYPE string.

      l_desc = &lt;lwa_result&gt;-description.

      cl_aunit_assert=&gt;assert_equals(
         act =  l_desc
         exp = &apos;UI Context for SFLIGHT&apos; ).

*     do loop only once
      cl_aunit_assert=&gt;assert_equals(
          act =  sy-tabix
          exp = 1 ).

    ENDLOOP.

  ENDMETHOD.                    &quot;select_table_values

  METHOD t51_select_table_wildcards.
    FIELD-SYMBOLS: &lt;lwa_struc&gt; TYPE zcl_ic_cont_context=&gt;ty_object,
                   &lt;lit_result&gt; TYPE STANDARD TABLE,
                   &lt;lwa_result&gt; TYPE zcl_ic_cont_context=&gt;ty_object.

    DATA: lo_cont  TYPE REF TO zcl_ic_container,
          lo_ctx TYPE REF TO zcl_ic_cont_context,
          lwa_o_struc TYPE REF TO data,
          lit_o_table TYPE REF TO data.

*   select container
    lo_cont = zcl_ic_container=&gt;create( 2 ).

    lo_ctx ?= zcl_ic_object=&gt;instance( i_obj_type = zcl_ic_object=&gt;c_cont_context_type
                                       i_parent = lo_cont ).

    CREATE DATA lwa_o_struc TYPE zcl_ic_cont_context=&gt;ty_object.
    ASSIGN lwa_o_struc-&gt;* TO &lt;lwa_struc&gt;.

    &lt;lwa_struc&gt;-description = &apos;%SFLIGHT%&apos;.

    lit_o_table = zcl_ic_persist=&gt;select_table( i_ic_obj_ref = lo_ctx
                                  i_result_struc = lwa_o_struc
                                  i_condition_struc = lwa_o_struc ).

    ASSIGN lit_o_table-&gt;* TO &lt;lit_result&gt;.

    LOOP AT &lt;lit_result&gt; ASSIGNING &lt;lwa_result&gt;.
      DATA l_desc TYPE string.

      l_desc =  &lt;lwa_result&gt;-description.

      IF sy-tabix = 1.
        cl_aunit_assert=&gt;assert_equals(
           act =  l_desc
           exp = &apos;Context for SFLIGHT&apos; ).
      ENDIF.

      IF sy-tabix = 2.
        cl_aunit_assert=&gt;assert_equals(
            act =  l_desc
            exp = &apos;UI Context for SFLIGHT&apos; ).
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    &quot;select_table_wildcards

  METHOD t55_select_filled_container.
    DATA: lo_cont TYPE REF TO zif_ic_composite,
          lo_comp TYPE REF TO zif_ic_composite,
          lo_comp2 TYPE REF TO zif_ic_composite.

    lo_cont ?= zcl_ic_container=&gt;create( 2 ).

    zcl_ic_persist=&gt;select_tree( EXPORTING i_dept = 2 CHANGING ch_ic_parent = lo_cont ).

*   checks
    lo_comp = lo_cont.
    cl_aunit_assert=&gt;assert_equals(
           act = lo_comp-&gt;get_object_nr( )
           exp = 2 ).

    lo_comp ?= lo_comp-&gt;get_child( i_comp_type = zcl_ic_object=&gt;c_cont_context_type
                                  i_object_nr = 9000 ).

    cl_aunit_assert=&gt;assert_equals(
          act =  lo_comp-&gt;get_object_nr( )
          exp = 9000 ).

    lo_comp ?= lo_comp-&gt;get_child( i_comp_type = zcl_ic_object=&gt;c_cont_context_type
                                  i_object_nr = 9001 ).
    cl_aunit_assert=&gt;assert_equals(
         act =  lo_comp-&gt;get_object_nr( )
         exp = 9001 ).

    lo_comp ?= lo_comp-&gt;get_child( i_comp_type = zcl_ic_object=&gt;c_impl_context_type
                                  i_object_nr =  10000001 ).
    cl_aunit_assert=&gt;assert_equals(
        act =  lo_comp-&gt;get_object_nr( )
        exp = 10000001 ).

    lo_comp ?= lo_cont-&gt;get_child( i_comp_type = zcl_ic_object=&gt;c_cont_context_type
                                 i_object_nr = 9100 ).
    lo_comp2 ?= lo_comp-&gt;get_child( i_comp_type = zcl_ic_object=&gt;c_cont_context_type
                                  i_object_nr = 9101  ).
    lo_comp ?= lo_comp-&gt;get_child( i_comp_type = zcl_ic_object=&gt;c_cont_context_type
                                   i_object_nr = 9140  ).

    cl_aunit_assert=&gt;assert_equals(
        act =  lo_comp-&gt;get_parent( )
        exp = lo_comp2-&gt;get_parent( ) ).

    lo_comp ?= lo_comp2-&gt;get_child( i_comp_type = zcl_ic_object=&gt;c_impl_context_type
                                    i_object_nr = 10000005  ).

    cl_aunit_assert=&gt;assert_equals(
       act =  lo_comp-&gt;get_object_nr( )
       exp = 10000005 ).

  ENDMETHOD.                    &quot;select_filled_container

  METHOD t56_select_filled_cont_dept.
    DATA: lo_ctx TYPE REF TO zcl_ic_cont_context,
          lo_cont1 TYPE REF TO zcl_ic_container,
          lo_comp TYPE REF TO zif_ic_composite.

    lo_cont1 = zcl_ic_container=&gt;create( 2 ).
    zcl_ic_persist=&gt;select( lo_cont1 ).
*   Select container context
    lo_ctx ?= zcl_ic_context=&gt;create(
        i_container       = lo_cont1
        i_object_nr       = &apos;9001&apos;
        i_ctx_type        =  zcl_ic_context=&gt;c_cont_ctx ).

    lo_comp ?= lo_ctx.
    zcl_ic_persist=&gt;select_tree( EXPORTING i_dept = 1 CHANGING ch_ic_parent = lo_comp ).

*   Check
    lo_comp ?= lo_comp-&gt;get_child( i_comp_type = zcl_ic_object=&gt;c_impl_context_type
                                 i_object_nr =  10000001 ).

    cl_aunit_assert=&gt;assert_equals(
        act =  lo_comp-&gt;get_object_nr( )
        exp = 10000001 ).

  ENDMETHOD.                    &quot;select_filled_cont_dept
  METHOD t57_select_tree_by_path.
    CONSTANTS lc_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_context TYPE REF TO zcl_ic_impl_context,
          l_path TYPE zic_path.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree(
                        EXPORTING i_until_object = zcl_ic_impl_context=&gt;c_impl_context_type
                        CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_context ?= lo_comps-&gt;get_child_by_path( lc_path ).

    cl_aunit_assert=&gt;assert_equals(
      act =  lo_ic_context-&gt;get_object_nr( )
      exp = 10000001 ).

    l_path = to_upper( lc_path ).

    cl_aunit_assert=&gt;assert_equals(
      act =  lo_ic_context-&gt;get_path( )
      exp = &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos; ).

  ENDMETHOD.                    &quot;t57_select_tree

  METHOD t58_select_path.
    CONSTANTS lc_path TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos;.

    DATA: lo_compn TYPE REF TO zif_ic_component,
          lo_cont TYPE REF TO zcl_ic_container,
           lo_ic_context TYPE REF TO zcl_ic_impl_context.

    lo_compn = zcl_ic_persist=&gt;select_path( i_comp_type = zcl_ic_container=&gt;c_container_type
                                            i_path = lc_path ).

    lo_ic_context  ?= lo_compn.
    lo_cont = lo_ic_context-&gt;get_container( ).

    cl_aunit_assert=&gt;assert_equals(
      act =  lo_ic_context-&gt;get_name( )
      exp = &apos;IMPL 01 FOR TESTING&apos; ).

    cl_aunit_assert=&gt;assert_equals(
      act =  lo_ic_context-&gt;get_path( )
      exp = &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos; ).

    cl_aunit_assert=&gt;assert_not_initial( act = lo_cont ).

    FREE lo_ic_context.
    lo_ic_context ?= lo_cont-&gt;zif_ic_composite~get_child_by_path( lc_path ).

    cl_aunit_assert=&gt;assert_equals(
      act =  lo_ic_context-&gt;get_path( )
      exp = &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING&apos; ).


  ENDMETHOD.                    &quot;t58_select_path

  METHOD t59_select_to_root.
    TYPES: BEGIN OF l_name_impl_ctx,
             ctx_name TYPE zic_name,
          END OF l_name_impl_ctx.
    FIELD-SYMBOLS: &lt;lit_result&gt; TYPE STANDARD TABLE,
                   &lt;lwa_result&gt; TYPE any.
    DATA: lo_cont TYPE REF TO zcl_ic_container,
          lo_compn TYPE REF TO zif_ic_component,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lwa_name_impl_ctx TYPE l_name_impl_ctx,
          lref_cond TYPE REF TO data,
          l_ref_result TYPE REF TO data,
          l_ref_result_lwa TYPE REF TO data.
***************************************
    &quot;    TODO nog te implementern
***************************************
    RETURN.
    cl_aunit_assert=&gt;assert_equals(
                       act = 1
                       exp = 2 ).

    lo_cont = zcl_ic_container=&gt;create( 2 ).

    CREATE OBJECT lo_impl_ctx
      EXPORTING
        i_cont = lo_cont
        i_name = &apos;IMPL 01 FOR TESTING&apos;.

    lwa_name_impl_ctx-ctx_name = &apos;IMPL 01 FOR TESTING&apos;.
    GET REFERENCE OF lwa_name_impl_ctx INTO lref_cond.

    l_ref_result = zcl_ic_persist=&gt;select_table( i_ic_obj_ref = lo_impl_ctx
                                            i_condition_struc = lref_cond
                                            i_result_struc = lo_impl_ctx-&gt;zif_ic_meta_info~get_obj_struct( ) ).

    ASSIGN l_ref_result-&gt;* TO &lt;lit_result&gt;.

    READ TABLE &lt;lit_result&gt; INDEX 1 ASSIGNING &lt;lwa_result&gt;.

    GET REFERENCE OF &lt;lwa_result&gt; INTO l_ref_result_lwa.
    lo_impl_ctx-&gt;zif_ic_meta_info~fill_by_struct( i_structure = l_ref_result_lwa ).


    lo_compn = lo_impl_ctx.


    zcl_ic_persist=&gt;select_to_root_todo( CHANGING  ch_compn = lo_compn ).

  ENDMETHOD.                    &quot;t59_select_to_root

**************************************************************
***************** Private Methods  ***************************
**************************************************************

  METHOD check_tree.
*   check tree all parents
*   context 2
    cl_aunit_assert=&gt;assert_equals(
        act = i_o_impl_ctx-&gt;get_parent( )-&gt;get_object_nr( )
        exp = &apos;9001&apos; ).
*   context 1
    cl_aunit_assert=&gt;assert_equals(
    act = i_o_impl_ctx-&gt;get_parent( )-&gt;get_parent( )-&gt;get_object_nr( )
    exp = &apos;9000&apos; ).
*   container
    cl_aunit_assert=&gt;assert_equals(
        act = i_o_impl_ctx-&gt;get_parent( )-&gt;get_parent( )-&gt;get_parent( )-&gt;get_object_nr( )
        exp = &apos;2&apos; ).
  ENDMETHOD.                    &quot;check_tree
  METHOD get_impl_ctx1.
    DATA: lo_ic_cont  TYPE REF TO zcl_ic_container,
      lo_ctx TYPE REF TO zcl_ic_cont_context,
      lo_ctx2 TYPE REF TO zcl_ic_cont_context,
      lo_impl_ctx TYPE REF TO zcl_ic_impl_context.

*   select container
    lo_ic_cont = zcl_ic_container=&gt;create( 2 ).
    zcl_ic_persist=&gt;select( lo_ic_cont ).

*   Select container context
    lo_ctx ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;9000&apos;
        i_ctx_type        =  zcl_ic_context=&gt;c_cont_ctx ).

    lo_ctx2 ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;9001&apos;
        i_ctx_type        = zcl_ic_context=&gt;c_cont_ctx
        i_parent_ctx      = lo_ctx ).

    zcl_ic_persist=&gt;select( lo_ctx ).
    zcl_ic_persist=&gt;select( lo_ctx2 ).

*   get implementation context
    lo_impl_ctx ?= zcl_ic_context=&gt;create(
        i_container       = lo_ic_cont
        i_object_nr       = &apos;10000001&apos;
        i_ctx_type        = zcl_ic_context=&gt;c_impl_ctx
        i_parent_ctx      = lo_ctx2 ).

    zcl_ic_persist=&gt;select( lo_impl_ctx  ).

    e_impl_ctx = lo_impl_ctx.

  ENDMETHOD.                    &quot;get_impl_ctx1

  METHOD fill_impl_ctx1.
*    changing ch_impl_ctx type ref to zcl_ic_impl_context

    DATA: lo_class TYPE REF TO zcl_ic_class,
          lo_method TYPE REF TO zcl_ic_constr_method.

*   Create Class for Random number
    CREATE OBJECT lo_class
      EXPORTING
        i_class_nr    = 2
        i_name        = &apos;RANDOM_OBJECT&apos;
        i_description = &apos;Random number generator&apos;
        i_parent      = ch_impl_ctx
        i_rank        = 2
        i_class_name  = &apos;CL_ABAP_RANDOM&apos;.

*  Create method constructor
    CREATE OBJECT lo_method
      EXPORTING
        i_class         = lo_class
        i_method_nr     = 2
        i_method_name   = &apos;CREATE&apos;
        i_description   = &apos;Static create method&apos;
        i_rank          = 1
        i_declare_level = zcl_ic_method=&gt;c_declare_static.

    lo_method-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
    lo_class-&gt;set_default_constructor( abap_false ).

    zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_class ).
    zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_method ).

  ENDMETHOD.                    &quot;endmethod

  METHOD fill_impl_ctx1_for_obj_inj.
*    changing ch_impl_ctx type ref to zcl_ic_impl_context

    DATA: lo_class_1 TYPE REF TO zcl_ic_class,
          lo_class_2 TYPE REF TO zcl_ic_class,
          lo_method_1 TYPE REF TO zcl_ic_constr_method,
          lo_method_2 TYPE REF TO zcl_ic_constr_method,
          lo_comp TYPE REF TO zif_ic_component.

*   Create Class 1
    CREATE OBJECT lo_class_1
      EXPORTING
        i_class_nr    = 3
        i_name        = &apos;TEST_OBJECT1&apos;
        i_description = &apos;Test object for attribute object injection&apos;
        i_parent      = ch_impl_ctx
        i_rank        = 3
        i_class_name  = &apos;ZCL_IC_TEST&apos;.

*  Create method constructor
    CREATE OBJECT lo_method_1
      EXPORTING
        i_class         = lo_class_1
        i_method_nr     = 3
        i_method_name   = &apos;CREATE&apos;
        i_description   = &apos;Static create method&apos;
        i_rank          = 3
        i_declare_level = zcl_ic_method=&gt;c_declare_static.

    lo_method_1-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
    lo_class_1-&gt;set_default_constructor( abap_false ).
    zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_class_1 ).
    zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_method_1 ).

*   Create Class 2
    CREATE OBJECT lo_class_2
      EXPORTING
        i_class_nr    = 4
        i_name        = &apos;TEST_OBJECT2&apos;
        i_description = &apos;Test object for attribute object injection&apos;
        i_parent      = ch_impl_ctx
        i_rank        = 4
        i_class_name  = &apos;ZCL_IC_TEST&apos;.

*  Create method constructor
    CREATE OBJECT lo_method_2
      EXPORTING
        i_class         = lo_class_2
        i_method_nr     = 4
        i_method_name   = &apos;CREATE&apos;
        i_description   = &apos;Static create method&apos;
        i_rank          = 3
        i_declare_level = zcl_ic_method=&gt;c_declare_static.

    lo_method_2-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
    lo_class_2-&gt;set_default_constructor( abap_false ).
    zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_class_2 ).
    zcl_ic_persist=&gt;save_child( i_ic_child_comp = lo_method_2 ).

*   change class one for attribute object injection
    DATA: lo_ic_attrib TYPE REF TO zcl_ic_class_attrib.

*   Create Class Attribute
    CREATE OBJECT lo_ic_attrib
      EXPORTING
        i_class       = lo_class_1
        i_attrib_nr   = 2
        i_attrib_name = &apos;TEST_OBJECT2&apos;
        i_description = &apos;Test object to test attribute injection&apos;
        i_rank        = 2.

*   create value object
    DATA lo_object TYPE REF TO zcl_ic_class_value.

    lo_object = zcl_ic_class_value=&gt;create( i_ic_class = lo_class_2 ).

    lo_ic_attrib-&gt;set_ic_value( lo_object ).

*   save
    lo_comp ?= lo_object.

    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save( lo_ic_attrib ).

  ENDMETHOD.                    &quot;fill_impl_ctx1_for_obj_inj

*************************************************************
**************** Injection tests ****************************
*************************************************************
  METHOD ti01_prg_member.
    DATA: lo_container TYPE REF TO zcl_ic_container.

    PERFORM test_injection IN PROGRAM zic_test_01
                           CHANGING lo_container.

    cl_aunit_assert=&gt;assert_not_initial(
      EXPORTING act = lo_container
    ).

*   Class member data injection
    cl_aunit_assert=&gt;assert_equals(
       EXPORTING
         act = lo_container-&gt;get_name( )
         exp = &apos;Changed_name&apos;
     ).

  ENDMETHOD.                    &quot;tinj_prg_member

  METHOD ti02_constructor_empty_global.
    DATA: lo_obj_inj TYPE REF TO zcl_ic_test,
          lo_container_inj TYPE REF TO zcl_ic_container,
          lo_error TYPE REF TO zcx_ic_error.

    TRY.
        CREATE OBJECT lo_obj_inj.
      CATCH zcx_ic_error INTO lo_error.
        RAISE EXCEPTION lo_error.
    ENDTRY.
    lo_container_inj = lo_obj_inj-&gt;get_container( ).

    cl_aunit_assert=&gt;assert_not_initial(
      EXPORTING act = lo_container_inj
    ).

*   Class member data injection
    cl_aunit_assert=&gt;assert_equals(
      EXPORTING
        act = lo_container_inj-&gt;get_name( )
        exp = &apos;Changed_name&apos;
     ).

  ENDMETHOD.                    &quot;tinj_constructor_empty

  METHOD ti03_local_class.
    DATA: lo_obj_inj TYPE REF TO lcl_inject_mock,
          lo_container_inj TYPE REF TO zcl_ic_container,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_impl_ctx_comp TYPE REF TO zif_ic_composite,
          lo_class TYPE REF TO zcl_ic_class,
          l_class_name TYPE zic_clsname,
          lwa_inject TYPE zif_ic_service=&gt;t_object,
          lit_inject TYPE zif_ic_service=&gt;t_object_table.

*   add extra impl to impl-context
    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_impl_ctx_comp = lo_impl_ctx.

    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_impl_ctx_comp ).

    l_class_name = &apos;\PROGRAM=ZIC_TEST_01\CLASS=LCL_IC_TEST_01&apos;.

*   Create Class for local program class
    CREATE OBJECT lo_class
      EXPORTING
        i_class_nr    = 8
        i_name        = &apos;LOCAL_CLASS&apos;
        i_description = &apos;Local program class&apos;
        i_parent      = lo_impl_ctx
        i_rank        = 8
        i_class_name  = l_class_name.

    zcl_ic_persist=&gt;save_child( lo_class ).

    TRY.
        DATA lo_error TYPE REF TO zcx_ic_error.

        zcl_ic_service=&gt;inject_to_table( EXPORTING i_context_path = lo_impl_ctx_comp-&gt;get_path( )
                                           CHANGING ch_objects = lit_inject ).
      CATCH zcx_ic_error INTO lo_error.
        RAISE EXCEPTION lo_error.
    ENDTRY.

    READ TABLE lit_inject WITH KEY name = &apos;LOCAL_CLASS&apos; INTO lwa_inject.

    cl_aunit_assert=&gt;assert_not_initial(
      EXPORTING act = lwa_inject-object
    ).

  ENDMETHOD.                    &quot;ti03_local_class

  METHOD ti04_factory_empty.
    DATA: l_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_obj_inj TYPE REF TO zcl_ic_test,
          lo_random TYPE REF TO cl_abap_random,
          l_value TYPE f,
          lo_error TYPE REF TO zcx_ic_error.

*   add extra impl to impl-context
    get_impl_ctx1( IMPORTING e_impl_ctx = l_impl_ctx ).
    fill_impl_ctx1( CHANGING ch_impl_ctx = l_impl_ctx ).

*   create object with injection
    CREATE OBJECT lo_obj_inj.

    lo_random = lo_obj_inj-&gt;get_random_object( ).

    cl_aunit_assert=&gt;assert_not_initial(
      EXPORTING act = lo_random
    ).

    l_value = lo_random-&gt;float( ).

    cl_aunit_assert=&gt;assert_not_initial(
        act = l_value ).

  ENDMETHOD.                    &quot;ti04_factory_empty

  METHOD ti05_attribute_object.
    DATA: l_impl_ctx TYPE REF TO zcl_ic_impl_context,
          l_impl_ctx_comp TYPE REF TO zif_ic_composite,
          lo_obj_to_inj TYPE REF TO zcl_ic_test,
          lo_obj_injected TYPE REF TO zcl_ic_test,
          l_value TYPE f.

*   add extra impl to impl-context
    get_impl_ctx1( IMPORTING e_impl_ctx = l_impl_ctx ).
    l_impl_ctx_comp = l_impl_ctx.

    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = l_impl_ctx_comp ).

    fill_impl_ctx1_for_obj_inj( CHANGING ch_impl_ctx = l_impl_ctx ).

*   create object with injection
    CREATE OBJECT lo_obj_to_inj.

    lo_obj_injected = lo_obj_to_inj-&gt;get_test_object1( ).

    cl_aunit_assert=&gt;assert_not_initial(
          EXPORTING act = lo_obj_injected
    ).

    lo_obj_injected = lo_obj_to_inj-&gt;get_test_object1( )-&gt;get_test_object2( ).

    cl_aunit_assert=&gt;assert_not_initial(
          EXPORTING act = lo_obj_injected
    ).

    cl_aunit_assert=&gt;assert_initial(
           EXPORTING act = lo_obj_injected-&gt;get_test_object1( )
     ).

    cl_aunit_assert=&gt;assert_initial(
        EXPORTING act = lo_obj_injected-&gt;get_test_object2( )
  ).
    cl_aunit_assert=&gt;assert_initial(
        EXPORTING act = lo_obj_injected-&gt;get_random_object( )
  ).

  ENDMETHOD.                    &quot;ti05_attribute_object

  METHOD ti06_method_active_param.
    CONSTANTS: lc_path_class TYPE zic_path VALUE &apos;/CONTAINER_2/SFLIGHT/UI/IMPL 01 FOR TESTING/CONTAINER&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_method TYPE REF TO zcl_ic_method,
          lo_obj_inj TYPE REF TO zcl_ic_test.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    zcl_ic_persist=&gt;select_tree(
                        EXPORTING i_until_object = zcl_ic_object=&gt;c_class_type
                        CHANGING  ch_ic_parent = lo_comps ).

    lo_ic_class ?= lo_comps-&gt;get_child_by_path( lc_path_class ).

*   Select Method and set it active
    CREATE OBJECT lo_ic_method
      EXPORTING
        i_class     = lo_ic_class
        i_method_nr = 5.

    zcl_ic_persist=&gt;select( lo_ic_method ).

    lo_ic_method-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
    zcl_ic_persist=&gt;save_child( lo_ic_method ).

*   create object with method param injection
*   + method is active
    DATA l_name TYPE zic_name.

    CREATE OBJECT lo_obj_inj.

*   tests
    cl_aunit_assert=&gt;assert_not_initial( lo_obj_inj-&gt;get_container( ) ).

    l_name = lo_obj_inj-&gt;get_container( )-&gt;zif_ic_component~get_name( ).

    cl_aunit_assert=&gt;assert_equals(
       act = l_name
       exp = &apos;Changed_name_by_method&apos; ).
  ENDMETHOD.                    &quot;ti06_method_param

  METHOD ti07_attrib_param.
    CONSTANTS lc_path_param TYPE zic_path VALUE &apos;IMPL 01 FOR TESTING/CONTAINER/ZIF_IC_COMPONENT~GET_NAME/RT_NAME&apos;.

    DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_comp TYPE REF TO zif_ic_component,
          lo_impl_ctx_comp TYPE REF TO zif_ic_composite,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_attrib TYPE REF TO zcl_ic_class_attrib,
          lo_value TYPE REF TO zcl_ic_value,
          lo_ic_param TYPE REF TO zcl_ic_method_param,
          lo_obj_inj TYPE REF TO zcl_ic_test,
          l_name TYPE zic_name.

*   add extra impl to impl-context
    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_impl_ctx_comp ?= lo_impl_ctx.
    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_impl_ctx_comp ).

    lo_ic_class = lo_impl_ctx-&gt;get_class( 3 ).

*   create attribute description, value, add value from a method parameter
    CREATE OBJECT lo_ic_attrib
      EXPORTING
        i_class       = lo_ic_class
        i_attrib_nr   = 3
        i_attrib_name = &apos;IC_TEST_PARAM&apos;
        i_description = &apos;Test, value = container name from method parameter&apos;
        i_rank        = 1.

*   Add method parameter value to attribute
    lo_comp = lo_impl_ctx-&gt;zif_ic_composite~get_child_by_path( lc_path_param ).
    lo_ic_param ?= lo_comp.

    lo_value ?= zcl_ic_method_param_value=&gt;create( lo_ic_param ).
    lo_ic_attrib-&gt;set_ic_value( lo_value ).

    lo_comp = lo_value.

    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save( lo_ic_attrib ).
*   Test save ok
    cl_aunit_assert=&gt;assert_equals(
        act = sy-subrc
        exp = 0 ).

*   Create and test injection of test object
    CREATE OBJECT lo_obj_inj.

*   tests
    cl_aunit_assert=&gt;assert_not_initial( lo_obj_inj-&gt;get_container( ) ).
    cl_aunit_assert=&gt;assert_not_initial( lo_obj_inj-&gt;get_test_object1( ) ).

*   attribute = lo_obj_inj-&gt;get_test_object1( ) -&gt; ic_test_param
*   injected value = return method parameter from ZIF_IC_COMPONENT~GET_NAME( )
    cl_aunit_assert=&gt;assert_equals(
       act = lo_obj_inj-&gt;get_test_object1( )-&gt;get_ic_test_param( )
       exp = lo_obj_inj-&gt;get_container( )-&gt;zif_ic_component~get_name( ) ).

  ENDMETHOD.                    &quot;ti07_attrib_method_param

  METHOD ti08_method_param_param.
    CONSTANTS lc_path_method TYPE zic_path VALUE &apos;/IMPL 01 FOR TESTING/TEST_OBJECT3/WRITE_DESCRIPTION&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,

          lo_ic_method TYPE REF TO zcl_ic_method,
          lo_obj_inj TYPE REF TO zcl_ic_test.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_comps ?= lo_impl_ctx.
    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_comps ).

    lo_ic_method ?= lo_comps-&gt;get_child_by_path( lc_path_method ).

    lo_ic_method-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
    zcl_ic_persist=&gt;save_child( lo_ic_method ).

*   Create and test injection of test object
    CREATE OBJECT lo_obj_inj.

*   tests
    cl_aunit_assert=&gt;assert_not_initial( lo_obj_inj-&gt;get_test_object3( ) ).

*   method result = lo_obj_inj-&gt;get_description
*   injected value = return method parameter from ZIF_IC_COMPONENT~GET_NAME( )
    cl_aunit_assert=&gt;assert_equals(
       act = lo_obj_inj-&gt;get_test_object3( )-&gt;get_description( )
       exp = &apos;Method getter param: &apos; &amp;&amp; lo_obj_inj-&gt;get_container( )-&gt;zif_ic_component~get_name( ) ).

  ENDMETHOD.                    &quot;ti08_method_param_param

  METHOD ti_09_attrib_attrib.
    DATA: lo_obj_inj TYPE REF TO zcl_ic_test.

*   Create and test injection of test object
    CREATE OBJECT lo_obj_inj
      EXPORTING
        i_inject = abap_true.

*   test Attribute type Injection
    cl_aunit_assert=&gt;assert_not_initial( lo_obj_inj-&gt;get_test_object4( ) ).

    cl_aunit_assert=&gt;assert_equals(
       act = lo_obj_inj-&gt;get_test_object4( )-&gt;get_changed_attrib( )
       exp = &apos;Getter for Test Clas&apos; ).
  ENDMETHOD.                    &quot;ti_09_attrib_attrib

  METHOD ti_10_inj_type_object.
    DATA: lo_obj_inj TYPE REF TO zcl_ic_test.

*   Create and test injection of test object
    CREATE OBJECT lo_obj_inj
      EXPORTING
        i_inject = abap_true.

*   test Attribute type Injection
    cl_aunit_assert=&gt;assert_not_initial( lo_obj_inj-&gt;get_container_type_01( ) ).

    cl_aunit_assert=&gt;assert_equals(
       act = lo_obj_inj-&gt;get_container_type_01( )-&gt;get_name( )
       exp = &apos;NAME_OF_TYPE&apos; ).

    cl_aunit_assert=&gt;assert_bound( act = lo_obj_inj-&gt;get_test_object5( ) ).

    cl_aunit_assert=&gt;assert_equals(
                    act = lo_obj_inj-&gt;get_test_object5( )-&gt;get_name_from_type_obj( )
                    exp = &apos;NAME_OF_TYPE&apos; ).
  ENDMETHOD.                    &quot;ti_10_inj_type_object

  METHOD ti20_value_table_ref.
    CONSTANTS: lc_path_class TYPE zic_path VALUE &apos;/IMPL 01 FOR TESTING/TEST_OBJECT1&apos;,
               lc_path_method_param TYPE zic_path VALUE &apos;/IMPL 01 FOR TESTING/TEST_OBJECT1/SET_PARAM_TABLE_REF/IM_SFLIGHT_REF&apos;.

    DATA: lo_comps TYPE REF TO zif_ic_composite,
          lo_comp TYPE REF TO zif_ic_component,
          lo_cont TYPE REF TO zcl_ic_container,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_ic_class TYPE REF TO zcl_ic_class,
          lo_ic_method TYPE REF TO zcl_ic_method,
          lo_ic_param TYPE REF TO zcl_ic_method_param,
          lo_obj_inj TYPE REF TO zcl_ic_test.

    lo_cont = zcl_ic_container=&gt;create( 2 ).
    lo_comps = lo_cont.

    get_impl_ctx1( IMPORTING e_impl_ctx = lo_impl_ctx ).
    lo_comps ?= lo_impl_ctx.
    zcl_ic_persist=&gt;select_tree( CHANGING ch_ic_parent = lo_comps ).

    lo_ic_class ?= lo_comps-&gt;get_child_by_path( lc_path_class ).

*   create method
    CREATE OBJECT lo_ic_method
      EXPORTING
        i_class         = lo_ic_class
        i_method_nr     = 0
        i_method_name   = &apos;SET_PARAM_TABLE_REF&apos;
        i_description   = &apos;Setter for the table value ref&apos;
        i_rank          = 3
        i_declare_level = zcl_ic_method=&gt;c_declare_instance.

    lo_ic_method-&gt;set_is_active( zcl_ic_method=&gt;c_is_active ).
    lo_comp ?= lo_ic_method.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).

*   Create Param
    CREATE OBJECT lo_ic_param
      EXPORTING
        i_method      = lo_ic_method
        i_param_nr    = 0
        i_param_name  = &apos;IM_SFLIGHT_REF&apos;
        i_description = &apos;Sflight Table ref param&apos;
        i_rank        = 1.

    lo_comp ?= lo_ic_param.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp =  lo_comp ).

*   create value object
    DATA: lo_value TYPE REF TO zcl_ic_value.

    lo_value = zcl_ic_table=&gt;create( i_table_name = &apos;SFLIGHT&apos; ).
    lo_ic_param-&gt;set_ic_value( lo_value ).
    lo_comp ?= lo_value.
    zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = lo_comp ).
    zcl_ic_persist=&gt;save( lo_ic_param ).

*   Create and test injection of test object
    FIELD-SYMBOLS: &lt;lit_sflight&gt; TYPE ANY TABLE.
    DATA l_ref_sflight TYPE REF TO data.

    CREATE OBJECT lo_obj_inj.

*   tests
    cl_aunit_assert=&gt;assert_not_initial( lo_obj_inj-&gt;get_test_object1( ) ).

    l_ref_sflight =  lo_obj_inj-&gt;get_test_object1( )-&gt;get_param_table_ref( ).

    IF l_ref_sflight IS NOT BOUND.
      cl_aunit_assert=&gt;assert_not_bound( l_ref_sflight ).
    ENDIF.

    ASSIGN l_ref_sflight-&gt;* TO &lt;lit_sflight&gt;.

    IF &lt;lit_sflight&gt; IS NOT ASSIGNED.
      cl_aunit_assert=&gt;fail( msg = &apos;&lt;lit_sflight&gt; is not assigned.&apos; ).
    ENDIF.

  ENDMETHOD.                    &quot;ti20_value_table_ref

**********************************************************************************************
**********************************************************************************************
**********************************************************************************************

ENDCLASS.             &quot;container_test</source>
 </PROG>
 <PROG NAME="ZIC_APP_GUI_TOP" VARCL="X" SUBC="I" RMAND="001" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZIC_APP_GUI_TOP" LENGTH="23 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZIC_APP_GUI_TOP                                   Report ZIC_APP_GUI
*&amp;
*&amp;---------------------------------------------------------------------*

REPORT   zic_app_gui.

CLASS: lcl_search_dynpro DEFINITION DEFERRED,
       lcl_ic_application DEFINITION DEFERRED,
       lcl_errors_dynpro DEFINITION DEFERRED,
       lcl_ic_container_dynpro DEFINITION DEFERRED,
       lcl_ic_create_cont_dynpro DEFINITION DEFERRED,
       lcl_ic_cont_ctx_dynpro DEFINITION DEFERRED,
       lcl_ic_create_contctx_dynpro DEFINITION DEFERRED,
       lcl_ic_impl_ctx_dynpro DEFINITION DEFERRED,
       lcl_ic_create_injctx_dynpro DEFINITION DEFERRED,
       lcl_ic_class_dynpro DEFINITION DEFERRED,
       lcl_ic_create_class_dynpro DEFINITION DEFERRED,
       lcl_ic_method_dynpro DEFINITION DEFERRED,
       lcl_ic_create_method_dynpro DEFINITION DEFERRED,
       lcl_ic_class_attrib_dynpro DEFINITION DEFERRED,
       lcl_ic_create_attrib_dynpro DEFINITION DEFERRED,
       lcl_ic_method_param_dynpro DEFINITION DEFERRED,
       lcl_ic_create_param_dynpro DEFINITION DEFERRED,
       lcl_ic_inj_obj_dynpro DEFINITION DEFERRED,
       lcl_ic_value_edit_dynpro_base DEFINITION DEFERRED,
       lcl_tree_dynpro DEFINITION DEFERRED,

       lcl_ic_create_inj_obj_dynpro DEFINITION DEFERRED,
       lcl_ic_select_inj_obj_dynpro DEFINITION DEFERRED,

*      Values
       lcl_ic_data_dynpro DEFINITION DEFERRED,
       lcl_ic_table_dynpro DEFINITION DEFERRED,
       lcl_ic_class_value_dynpro DEFINITION DEFERRED,
       lcl_ic_param_value_dynpro DEFINITION DEFERRED,
       lcl_ic_attrib_value_dynpro DEFINITION DEFERRED,
       lcl_ic_type_value_dynpro DEFINITION DEFERRED,
       lcl_ic_create_value_dynpro DEFINITION DEFERRED,
       lcl_ic_create_subval_dyn_base DEFINITION DEFERRED,
       lcl_ic_create_data_sub_dyn DEFINITION DEFERRED,
       lcl_ic_create_table_sub_dyn DEFINITION DEFERRED,
       lcl_ic_create_object_sub_dyn DEFINITION DEFERRED,
       lcl_ic_create_param_sub_dyn DEFINITION DEFERRED,
       lcl_ic_create_attrib_sub_dyn DEFINITION DEFERRED.

DATA: g_application TYPE REF TO lcl_ic_application,
      g_okcode TYPE syst-ucomm,
      g_custom_container TYPE REF TO cl_gui_custom_container.


*Subscreens
DATA: g_subscr_search_dynnr TYPE sy-dynnr,
      g_subscr_cont_tree_dynnr TYPE sy-dynnr,
      g_subscr_center_dynnr TYPE sy-dynnr,
      g_subscr_errors_dynnr TYPE sy-dynnr,
      g_subscr_center_top_dynnr TYPE sy-dynnr,
*     Values
      g_subscr_value_dynnr TYPE sy-dynnr,
      g_subscr_classval_dynnr TYPE sy-dynnr,
      g_subscr_create_val_dynnr TYPE sy-dynnr.

*Subscreens classes
DATA: go_search_dynpro TYPE REF TO lcl_search_dynpro,
      go_sub_dynpro TYPE REF TO zcl_ic_sub_dynpro_base,
      go_container_dyn TYPE REF TO lcl_ic_container_dynpro,
      go_create_cont_dyn TYPE REF TO lcl_ic_create_cont_dynpro,
      go_cont_ctx_dyn TYPE REF TO lcl_ic_cont_ctx_dynpro,
      go_create_cont_ctx_dyn TYPE REF TO lcl_ic_create_contctx_dynpro,
      go_impl_ctx_dyn TYPE REF TO lcl_ic_impl_ctx_dynpro,
      go_create_inj_ctx_dyn TYPE REF TO lcl_ic_create_injctx_dynpro,
      go_class_dyn TYPE REF TO lcl_ic_class_dynpro,
      go_create_class_dyn TYPE REF TO lcl_ic_create_class_dynpro,
      go_method_dyn TYPE REF TO lcl_ic_method_dynpro,
      go_create_method_dyn TYPE REF TO lcl_ic_create_method_dynpro,
      go_class_attrib_dyn TYPE REF TO lcl_ic_class_attrib_dynpro,
      go_create_attrib_dyn TYPE REF TO lcl_ic_create_attrib_dynpro,
      go_method_par_dyn TYPE REF TO lcl_ic_method_param_dynpro,
      go_inj_type_dyn TYPE REF TO lcl_ic_inj_obj_dynpro,
      go_create_param_dyn TYPE REF TO lcl_ic_create_param_dynpro,

      go_create_inj_obj_dyn TYPE REF TO lcl_ic_create_inj_obj_dynpro,
      go_select_inj_obj_dyn TYPE REF TO lcl_ic_select_inj_obj_dynpro,

*     values
      go_value_data_dyn TYPE REF TO lcl_ic_data_dynpro,
      go_value_table_dyn TYPE REF TO lcl_ic_table_dynpro,
      go_value_class_dyn TYPE REF TO lcl_ic_class_value_dynpro,
      go_value_param_dyn TYPE REF TO lcl_ic_param_value_dynpro,
      go_value_attrib_dyn TYPE REF TO lcl_ic_attrib_value_dynpro,
      go_value_type_dyn TYPE REF TO lcl_ic_type_value_dynpro,
      go_create_value_dyn TYPE REF TO lcl_ic_create_value_dynpro,
      go_create_data_dyn TYPE REF TO lcl_ic_create_data_sub_dyn,
      go_create_tab_dyn TYPE REF TO lcl_ic_create_table_sub_dyn,
      go_create_object_dyn TYPE REF TO lcl_ic_create_object_sub_dyn,
      go_create_paramval_dyn TYPE REF TO lcl_ic_create_param_sub_dyn,
      go_create_attribval_dyn TYPE REF TO lcl_ic_create_attrib_sub_dyn.</source>
 </PROG>
 <PROG NAME="ZIC_APP_GUI_O01" VARCL="X" SUBC="I" RMAND="001" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZIC_APP_GUI_O01" LENGTH="23 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZIC_APP_GUI_O01
*&amp;---------------------------------------------------------------------*
MODULE object_mapping OUTPUT.
  DATA lo_single_dynpro TYPE REF TO zcl_ic_sub_dynpro_base.

  g_application = lcl_ic_application=&gt;create( ).

  go_search_dynpro ?= zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro( im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_search ).
  go_sub_dynpro = zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro( lcl_ic_application=&gt;c_subscr_center_top ).

  lo_single_dynpro ?= zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro( lcl_ic_application=&gt;c_subscr_no_screen_area ).

  IF lo_single_dynpro IS BOUND.
    IF lcl_ic_create_inj_obj_dynpro=&gt;c_dynpro_nr = lo_single_dynpro-&gt;get_dynpro_nr( ) .
      go_create_inj_obj_dyn ?= lo_single_dynpro.
    ELSEIF lcl_ic_select_inj_obj_dynpro=&gt;c_dynpro_nr = lo_single_dynpro-&gt;get_dynpro_nr( ) .
      go_select_inj_obj_dyn ?= lo_single_dynpro.
    ENDIF.
  ENDIF.

  IF go_sub_dynpro IS NOT INITIAL.

    CASE go_sub_dynpro-&gt;get_dynpro_nr( ).
      WHEN lcl_ic_container_dynpro=&gt;c_dynpro_nr.
        go_container_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_cont_dynpro=&gt;c_dynpro_nr.
        go_create_cont_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_cont_ctx_dynpro=&gt;c_dynpro_nr.
        go_cont_ctx_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_contctx_dynpro=&gt;c_dynpro_nr.
        go_create_cont_ctx_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_impl_ctx_dynpro=&gt;c_dynpro_nr.
        go_impl_ctx_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_injctx_dynpro=&gt;c_dynpro_nr.
        go_create_inj_ctx_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_class_dynpro=&gt;c_dynpro_nr.
        go_class_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_class_dynpro=&gt;c_dynpro_nr.
        go_create_class_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_method_dynpro=&gt;c_dynpro_nr.
        go_method_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_method_dynpro=&gt;c_dynpro_nr.
        go_create_method_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_inj_obj_dynpro=&gt;c_dynpro_nr.
        go_inj_type_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_class_attrib_dynpro=&gt;c_dynpro_nr.
        go_class_attrib_dyn ?= go_sub_dynpro.

        IF go_class_attrib_dyn-&gt;value_dynpro IS BOUND.

          CASE go_class_attrib_dyn-&gt;value_dynpro-&gt;value_type.
            WHEN zcl_ic_value=&gt;c_value_type_data.
              go_value_data_dyn ?= go_class_attrib_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_table.
              go_value_table_dyn ?= go_class_attrib_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_object.
              go_value_class_dyn ?= go_class_attrib_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_param.
              go_value_param_dyn ?= go_class_attrib_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_attrib.
              go_value_attrib_dyn ?= go_class_attrib_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_inj_type.
              go_value_type_dyn ?= go_class_attrib_dyn-&gt;value_dynpro.
          ENDCASE.
        ENDIF.

      WHEN lcl_ic_create_attrib_dynpro=&gt;c_dynpro_nr.
        go_create_attrib_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_method_param_dynpro=&gt;c_dynpro_nr.
        go_method_par_dyn ?= go_sub_dynpro.

        IF go_method_par_dyn-&gt;value_dynpro IS BOUND.

          CASE go_method_par_dyn-&gt;value_dynpro-&gt;value_type.
            WHEN zcl_ic_value=&gt;c_value_type_data.
              go_value_data_dyn ?= go_method_par_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_table.
              go_value_table_dyn ?= go_method_par_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_object.
              go_value_class_dyn ?= go_method_par_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_param.
              go_value_param_dyn ?= go_method_par_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_attrib.
              go_value_attrib_dyn ?= go_method_par_dyn-&gt;value_dynpro.
            WHEN zcl_ic_value=&gt;c_value_type_inj_type.
              go_value_type_dyn ?= go_method_par_dyn-&gt;value_dynpro.
          ENDCASE.

        ENDIF.

      WHEN lcl_ic_create_param_dynpro=&gt;c_dynpro_nr.
        go_create_param_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_value_dynpro=&gt;c_dynpro_nr.
        go_create_value_dyn ?= go_sub_dynpro.
    ENDCASE.
  ENDIF.

  go_sub_dynpro ?= zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro( lcl_ic_application=&gt;c_subscr_create_value ).

  IF go_sub_dynpro IS NOT INITIAL.
    CASE go_sub_dynpro-&gt;get_dynpro_nr( ).
      WHEN lcl_ic_create_data_sub_dyn=&gt;c_dynpro_nr.
        go_create_data_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_table_sub_dyn=&gt;c_dynpro_nr.
        go_create_tab_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_object_sub_dyn=&gt;c_dynpro_nr.
        go_create_object_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_param_sub_dyn=&gt;c_dynpro_nr.
        go_create_paramval_dyn ?= go_sub_dynpro.
      WHEN lcl_ic_create_attrib_sub_dyn=&gt;c_dynpro_nr.
        go_create_attribval_dyn ?= go_sub_dynpro.
    ENDCASE.
  ENDIF.

ENDMODULE.                    &quot;object_mapping OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_0100  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status OUTPUT.
  SET TITLEBAR &apos;MAIN&apos;.

  IF go_create_inj_obj_dyn IS BOUND AND syst-dynnr = go_create_inj_obj_dyn-&gt;get_dynpro_nr( ).

    SET PF-STATUS &apos;MODAL_STATUS&apos;.
    EXIT.
  ENDIF.

  go_sub_dynpro = zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro( lcl_ic_application=&gt;c_subscr_center_top ).

  IF go_sub_dynpro IS BOUND.
    IF zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro_nr( lcl_ic_application=&gt;c_subscr_center_top )
      = lcl_ic_impl_ctx_dynpro=&gt;c_dynpro_nr.

      SET PF-STATUS &apos;IMPL_CTX_STATUS&apos;.


    ELSEIF go_sub_dynpro-&gt;is_screen_edit( ) = abap_true.
      SET PF-STATUS &apos;EDIT_STATUS&apos;.
    ENDIF.
  ELSE.
    SET PF-STATUS &apos;MAIN_STATUS&apos;.
  ENDIF.

ENDMODULE.                 &quot; STATUS_0100  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  NAVIGATION  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE navigation OUTPUT.
  CLEAR g_okcode.

  g_subscr_search_dynnr = zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro_nr( lcl_ic_application=&gt;c_subscr_search ).
  g_subscr_cont_tree_dynnr = zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro_nr( lcl_ic_application=&gt;c_subscr_tree ).
  g_subscr_center_dynnr = zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro_nr( lcl_ic_application=&gt;c_subscr_center ).
  g_subscr_errors_dynnr = zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro_nr( lcl_ic_application=&gt;c_subscr_errors ).
  g_subscr_center_top_dynnr = zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro_nr( lcl_ic_application=&gt;c_subscr_center_top ).

  IF go_class_attrib_dyn IS BOUND.
    IF go_class_attrib_dyn-&gt;value_dynpro IS BOUND.
      g_subscr_classval_dynnr = go_class_attrib_dyn-&gt;value_dynpro-&gt;get_dynpro_nr( ).
    ELSE.
      g_subscr_classval_dynnr = lcl_main_dynpro=&gt;c_empty_dynpro.
    ENDIF.
  ENDIF.

  IF go_method_par_dyn IS BOUND.
    IF go_method_par_dyn-&gt;value_dynpro IS BOUND.
      g_subscr_value_dynnr = go_method_par_dyn-&gt;value_dynpro-&gt;get_dynpro_nr( ).
    ELSE.
      g_subscr_value_dynnr = lcl_main_dynpro=&gt;c_empty_dynpro.
    ENDIF.
  ENDIF.

  IF go_create_value_dyn IS BOUND.
    IF go_create_value_dyn-&gt;get_value_dyn( ) IS BOUND.

      g_subscr_create_val_dynnr = go_create_value_dyn-&gt;get_value_dyn( )-&gt;get_dynpro_nr( ).
    ELSE.
      g_subscr_create_val_dynnr = lcl_main_dynpro=&gt;c_empty_dynpro.
    ENDIF.
  ENDIF.

ENDMODULE.                 &quot; NAVIGATION  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  DO_PBO  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE do_pbo OUTPUT.

  CASE sy-dynnr.
    WHEN lcl_search_dynpro=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_search ).

    WHEN lcl_ic_container_dynpro=&gt;c_dynpro_nr OR lcl_ic_cont_ctx_dynpro=&gt;c_dynpro_nr OR lcl_ic_impl_ctx_dynpro=&gt;c_dynpro_nr
          OR lcl_ic_class_dynpro=&gt;c_dynpro_nr OR lcl_ic_method_dynpro=&gt;c_dynpro_nr OR lcl_ic_class_attrib_dynpro=&gt;c_dynpro_nr
          OR lcl_ic_method_param_dynpro=&gt;c_dynpro_nr OR lcl_ic_inj_obj_dynpro=&gt;c_dynpro_nr OR lcl_ic_create_value_dynpro=&gt;c_dynpro_nr.

      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_center_top ).

    WHEN lcl_ic_data_dynpro=&gt;c_dynpro_nr OR lcl_ic_table_dynpro=&gt;c_dynpro_nr
         OR lcl_ic_class_value_dynpro=&gt;c_dynpro_nr OR lcl_ic_param_value_dynpro=&gt;c_dynpro_nr
         OR lcl_ic_attrib_value_dynpro=&gt;c_dynpro_nr OR lcl_ic_type_value_dynpro=&gt;c_dynpro_nr.

      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value ).

    WHEN lcl_ic_create_data_sub_dyn=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value ).
    WHEN lcl_ic_create_table_sub_dyn=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value ).
    WHEN lcl_ic_create_object_sub_dyn=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value ).
    WHEN lcl_ic_create_param_sub_dyn=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value ).
    WHEN lcl_ic_create_attrib_sub_dyn=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value ).
    WHEN lcl_ic_create_inj_obj_dynpro=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area ).
    when lcl_ic_select_inj_obj_dynpro=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pbo( EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area ).
    WHEN OTHERS.
      zcl_ic_dynpro_manager=&gt;do_pbo( ).
  ENDCASE.

  IF zcl_ic_dynpro_manager=&gt;is_screen_edit( ) = zcl_ic_sub_edit_dyn_base=&gt;c_is_screen_edit_yes
      OR zcl_ic_dynpro_manager=&gt;is_screen_edit( im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value ) = zcl_ic_sub_edit_dyn_base=&gt;c_is_screen_edit_yes.
    LOOP AT SCREEN.
      CASE sy-dynnr.
        WHEN lcl_ic_data_dynpro=&gt;c_dynpro_nr OR lcl_ic_table_dynpro=&gt;c_dynpro_nr
             OR lcl_ic_class_value_dynpro=&gt;c_dynpro_nr OR lcl_ic_param_value_dynpro=&gt;c_dynpro_nr
             OR lcl_ic_attrib_value_dynpro=&gt;c_dynpro_nr OR lcl_ic_type_value_dynpro=&gt;c_dynpro_nr.
          zcl_ic_dynpro_manager=&gt;do_screen_edit(  EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value
                                                  CHANGING ch_screen = screen ).
        WHEN lcl_ic_create_data_sub_dyn=&gt;c_dynpro_nr OR lcl_ic_create_table_sub_dyn=&gt;c_dynpro_nr
              OR lcl_ic_create_object_sub_dyn=&gt;c_dynpro_nr OR lcl_ic_create_param_sub_dyn=&gt;c_dynpro_nr
              OR lcl_ic_create_attrib_sub_dyn=&gt;c_dynpro_nr.
          zcl_ic_dynpro_manager=&gt;do_screen_edit(  EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value
                                                  CHANGING ch_screen = screen ).
        WHEN lcl_ic_create_inj_obj_dynpro=&gt;c_dynpro_nr.
          zcl_ic_dynpro_manager=&gt;do_screen_edit(  EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area
                                                  CHANGING ch_screen = screen ).
        WHEN OTHERS.
          zcl_ic_dynpro_manager=&gt;do_screen_edit(  EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_center_top
                                                  CHANGING ch_screen = screen ).
      ENDCASE.

      MODIFY SCREEN.
    ENDLOOP.

  ENDIF.

ENDMODULE.                 &quot; DO_PBO  OUTPUT</source>
 </PROG>
 <PROG NAME="ZIC_APP_GUI_I01" VARCL="X" SUBC="I" RMAND="001" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZIC_APP_GUI_I01" LENGTH="23 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZIC_APP_GUI_I01
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  S0100_EXIT  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE s0100_exit INPUT.
  LEAVE PROGRAM.
ENDMODULE.                    &quot;s0100_exit INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_0200  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE do_pai INPUT.

  CASE sy-dynnr.
    WHEN lcl_search_dynpro=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pai( EXPORTING im_action = g_okcode
                                            im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_search ).
    WHEN lcl_ic_container_dynpro=&gt;c_dynpro_nr OR lcl_ic_cont_ctx_dynpro=&gt;c_dynpro_nr OR lcl_ic_impl_ctx_dynpro=&gt;c_dynpro_nr
          OR lcl_ic_class_dynpro=&gt;c_dynpro_nr OR lcl_ic_method_dynpro=&gt;c_dynpro_nr OR lcl_ic_class_attrib_dynpro=&gt;c_dynpro_nr
          OR lcl_ic_method_param_dynpro=&gt;c_dynpro_nr OR lcl_ic_create_cont_dynpro=&gt;c_dynpro_nr
          OR lcl_ic_inj_obj_dynpro=&gt;c_dynpro_nr
          OR lcl_ic_create_contctx_dynpro=&gt;c_dynpro_nr OR lcl_ic_create_injctx_dynpro=&gt;c_dynpro_nr
          OR lcl_ic_create_class_dynpro=&gt;c_dynpro_nr OR lcl_ic_create_attrib_dynpro=&gt;c_dynpro_nr
          OR lcl_ic_create_method_dynpro=&gt;c_dynpro_nr OR lcl_ic_create_param_dynpro=&gt;c_dynpro_nr
          OR lcl_ic_create_value_dynpro=&gt;c_dynpro_nr.

      zcl_ic_dynpro_manager=&gt;do_pai( EXPORTING im_action = g_okcode
                                            im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_center_top  ).

    WHEN lcl_ic_data_dynpro=&gt;c_dynpro_nr
         OR lcl_ic_table_dynpro=&gt;c_dynpro_nr OR lcl_ic_class_value_dynpro=&gt;c_dynpro_nr
         OR lcl_ic_param_value_dynpro=&gt;c_dynpro_nr OR lcl_ic_attrib_value_dynpro=&gt;c_dynpro_nr or lcl_ic_type_value_dynpro=&gt;c_dynpro_nr.

      zcl_ic_dynpro_manager=&gt;do_pai( EXPORTING im_action = g_okcode
                                               im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value ).
    WHEN lcl_ic_create_object_sub_dyn=&gt;c_dynpro_nr OR lcl_ic_create_param_sub_dyn=&gt;c_dynpro_nr
        OR lcl_ic_create_attrib_sub_dyn=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pai( EXPORTING  im_action = g_okcode
                                                im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value ).

    WHEN lcl_ic_create_inj_obj_dynpro=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pai( EXPORTING  im_action = g_okcode
                                                im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area ).
    when lcl_ic_select_inj_obj_dynpro=&gt;c_dynpro_nr.
      zcl_ic_dynpro_manager=&gt;do_pai( EXPORTING  im_action = g_okcode
                                                im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area ).
    WHEN OTHERS.
      zcl_ic_dynpro_manager=&gt;do_pai( im_action = g_okcode ).
  ENDCASE.


  IF zcl_ic_dynpro_manager=&gt;is_screen_edit( ) = abap_true.

    LOOP AT SCREEN.
      CASE sy-dynnr.
        WHEN lcl_ic_data_dynpro=&gt;c_dynpro_nr OR lcl_ic_table_dynpro=&gt;c_dynpro_nr.
          zcl_ic_dynpro_manager=&gt;do_screen_edit(  EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value
                                                  CHANGING ch_screen = screen ).
        WHEN lcl_ic_create_inj_obj_dynpro=&gt;c_dynpro_nr.
          zcl_ic_dynpro_manager=&gt;do_screen_edit(  EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area
                                                  CHANGING ch_screen = screen ).
        WHEN OTHERS.
          zcl_ic_dynpro_manager=&gt;do_screen_edit(  EXPORTING im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_center_top
                                                  CHANGING ch_screen = screen ).
      ENDCASE.

      MODIFY SCREEN.
    ENDLOOP.

  ENDIF.

ENDMODULE.                    &quot;do_pai INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  VALUE_INJ_TYPE  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE value_inj_type INPUT.
  DATA: git_inj_values_tab TYPE TABLE OF zic_v_inj_type,
        gwa_inj_values TYPE zic_v_inj_type,
        g_progname TYPE sy-repid,
        g_dynnum   TYPE sy-dynnr,
        git_dynpro_values TYPE TABLE OF dynpread,
        gwa_field_value TYPE dynpread,
        git_return TYPE TABLE OF ddshretval,
        gwa_return TYPE ddshretval,
        g_field_cont TYPE fieldname.

  g_progname = syst-repid.
  g_dynnum = syst-dynnr.

  REFRESH git_dynpro_values.
  CLEAR: gwa_field_value, g_field_cont.

  gwa_field_value-fieldname = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CONT_NR&apos;.
  APPEND gwa_field_value TO git_dynpro_values.

  CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
    EXPORTING
      dyname             = g_progname
      dynumb             = g_dynnum
      translate_to_upper = abap_true
    TABLES
      dynpfields         = git_dynpro_values.

  READ TABLE git_dynpro_values INTO gwa_field_value WITH KEY fieldname = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CONT_NR&apos;.

  IF sy-subrc = 0.
    g_field_cont = gwa_field_value-fieldvalue.
  ENDIF.

  IF gwa_field_value-fieldvalue IS INITIAL.
    g_field_cont = &apos;%&apos;.
  ENDIF.

  SELECT  *
    FROM  zic_v_inj_type
    INTO  TABLE git_inj_values_tab
    WHERE cont_nr LIKE g_field_cont.

  CALL FUNCTION &apos;F4IF_INT_TABLE_VALUE_REQUEST&apos;
    EXPORTING
      retfield    = &apos;INJ_CTX_NR&apos;
      dynpprog    = g_progname
      dynpnr      = g_dynnum
      dynprofield = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_ICTX_NR&apos;
      value_org   = &apos;S&apos;
    TABLES
      value_tab   = git_inj_values_tab
      return_tab  = git_return.

  READ TABLE git_return INTO gwa_return INDEX 1.

  IF syst-subrc = 0.
    REFRESH git_dynpro_values.

    READ TABLE git_inj_values_tab INTO gwa_inj_values WITH KEY inj_ctx_nr = gwa_return-fieldval.

    IF syst-subrc = 0.
      gwa_field_value-fieldname = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CONT_NR&apos;.
      gwa_field_value-fieldvalue = gwa_inj_values-cont_nr.
      APPEND gwa_field_value TO git_dynpro_values.

      gwa_field_value-fieldname = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CONT_NAME&apos;.
      gwa_field_value-fieldvalue = gwa_inj_values-cont_name.
      APPEND gwa_field_value TO git_dynpro_values.

      gwa_field_value-fieldname = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CTX_NR&apos;.
      gwa_field_value-fieldvalue = gwa_inj_values-cont_ctx_nr.
      APPEND gwa_field_value TO git_dynpro_values.

      gwa_field_value-fieldname = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CTX_NAME&apos;.
      gwa_field_value-fieldvalue = gwa_inj_values-cont_ctx_name.
      APPEND gwa_field_value TO git_dynpro_values.

      gwa_field_value-fieldname = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_ICTX_NR&apos;.
      gwa_field_value-fieldvalue = gwa_inj_values-inj_ctx_nr.
      APPEND gwa_field_value TO git_dynpro_values.

      gwa_field_value-fieldname = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_ICTX_NAME&apos;.
      gwa_field_value-fieldvalue = gwa_inj_values-inj_ctx_name.
      APPEND gwa_field_value TO git_dynpro_values.

      gwa_field_value-fieldname = &apos;GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_ICTX_PATH&apos;.
      gwa_field_value-fieldvalue = gwa_inj_values-inj_ctx_path.
      APPEND gwa_field_value TO git_dynpro_values.

      CALL FUNCTION &apos;DYNP_VALUES_UPDATE&apos;
        EXPORTING
          dyname     = g_progname
          dynumb     = g_dynnum
        TABLES
          dynpfields = git_dynpro_values.

    ENDIF.

  ENDIF.

ENDMODULE.                 &quot; VALUE_INJ_TYPE  INPUT</source>
 </PROG>
 <PROG NAME="ZIC_APP_GUI_CLS" VARCL="X" SUBC="I" RMAND="001" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZIC_APP_GUI_CLS" LENGTH="23 "/>
   </language>
  </textPool>
  <source>*----------------------------------------------------------------------*
*       CLASS lcl_show_sub_dynpro_cmd DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_show_sub_dynpro_cmd DEFINITION CREATE PRIVATE.

  PUBLIC SECTION.
    INTERFACES zif_ic_command.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_component TYPE REF TO zif_ic_component
                          RETURNING value(rt_command) TYPE REF TO zif_ic_command.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component.

  PROTECTED SECTION.
    DATA: sub_scrn_area TYPE scrfname,
          main_dynpro TYPE REF TO zcl_ic_main_dynpro_base,
          ic_component TYPE REF TO zif_ic_component,
          previous_dynpro TYPE REF TO zcl_ic_sub_dynpro_base.

ENDCLASS.                    &quot;lcl_show_sub_dynpro_cmd DEFINITION
*TODO weg
*CLASS lcl_drag_object DEFINITION.
*  PUBLIC SECTION.
*    DATA text TYPE mtreesnode-text.
*ENDCLASS.                    &quot;lcl_drag_object DEFINITION

*TODO weg
*CLASS lcl_dragdrop_receiver DEFINITION.
*  PUBLIC SECTION.
**    METHODS:
**Hier
**TODO hier
**       left_drag FOR EVENT on_drag OF lcl_tree_dynpro
**                      IMPORTING node_key drag_drop_object,
**       right_drop FOR EVENT on_drop OF lcl_gui_textline
**                      IMPORTING index line pos dragdrop_object.
*
*ENDCLASS.                    &quot;lcl_dragdrop_receiver DEFINITION
*TODO class weg
*CLASS lcl_gui_textline DEFINITION INHERITING FROM cl_gui_textedit.
*  PUBLIC SECTION.
*    CONSTANTS: c_lines TYPE i VALUE 1.
*
*    METHODS: constructor
*      IMPORTING
*          value(parent) TYPE REF TO cl_gui_container
*          max_number_chars TYPE i OPTIONAL
*          value(style) TYPE i DEFAULT 0
*          wordwrap_mode TYPE i DEFAULT wordwrap_at_windowborder
*          wordwrap_position TYPE i DEFAULT -1
*          wordwrap_to_linebreak_mode TYPE i DEFAULT false
*          filedrop_mode TYPE i DEFAULT dropfile_event_off
*          value(lifetime) TYPE i OPTIONAL
*          value(name) TYPE string OPTIONAL
*      EXCEPTIONS
*        error_cntl_create
*        error_cntl_init
*        error_cntl_link
*        error_dp_create
*        gui_type_not_supported.
*
*    METHODS: get_text RETURNING value(re_text) TYPE string,
*             set_text IMPORTING im_text TYPE string .
*
*  PROTECTED SECTION.
*    METHODS: init.
*ENDCLASS.                    &quot;lcl_gui_textline DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_main_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_main_dynpro DEFINITION INHERITING FROM zcl_ic_main_dynpro_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0100&apos;,
               c_empty_dynpro TYPE sydynnr VALUE &apos;0999&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_action_ic_exec TYPE scrffcod VALUE &apos;IC_EXEC&apos;,
               c_action_ic_debug TYPE scrffcod VALUE &apos;IC_DEBUG&apos;,
               c_action_ic_edit TYPE scrffcod VALUE &apos;IC_EDIT&apos;,
               c_action_ic_save TYPE scrffcod VALUE &apos;SAVE&apos;,
               c_action_ic_check TYPE scrffcod VALUE &apos;IC_CHECK&apos;,
               c_action_ic_back TYPE scrffcod VALUE &apos;BACK&apos;.

    CLASS-METHODS create IMPORTING im_application TYPE REF TO lcl_ic_application
                         RETURNING value(rt_dynpro) TYPE REF TO lcl_main_dynpro.

    EVENTS: ic_exec_clicked, ic_debug_clicked, ic_edit_clicked, ic_save_clicked, ic_check_clicked, ic_back_clicked.

    METHODS: constructor IMPORTING im_application TYPE REF TO lcl_ic_application,
             handle_pai REDEFINITION,
             get_application RETURNING value(rt_application) TYPE REF TO lcl_ic_application.

  PROTECTED SECTION.
    DATA application TYPE REF TO lcl_ic_application.
ENDCLASS.                    &quot;lcl_main_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_dynpro_utils DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_dynpro_utils DEFINITION CREATE PRIVATE FINAL.

  PUBLIC SECTION.

    CLASS-METHODS: parse_class_to_combo IMPORTING im_impl_ctx TYPE REF TO zcl_ic_impl_context
                                                  im_class TYPE REF TO zcl_ic_class OPTIONAL
                                                  im_method TYPE REF TO zcl_ic_method OPTIONAL
                                                  im_param TYPE REF TO zcl_ic_method_param OPTIONAL
                                                  im_attrib TYPE REF TO zcl_ic_class_attrib OPTIONAL
                                                  im_class_combo_id TYPE vrm_id
                                                  im_method_combo_id TYPE vrm_id OPTIONAL
                                                  im_param_combo_id TYPE vrm_id OPTIONAL
                                                  im_attrib_combo_id TYPE vrm_id OPTIONAL
                                        CHANGING  ch_class_combo_val TYPE string
                                                  ch_method_combo_val TYPE string OPTIONAL
                                                  ch_param_combo_val TYPE string OPTIONAL
                                                  ch_attrib_combo_val TYPE string OPTIONAL,
                   parse_inj_obj_to_combo IMPORTING im_inj_obj TYPE REF TO zcl_ic_inj_object
                                                    im_inj_obj_id TYPE vrm_id
                                          CHANGING  ch_inj_obj_val TYPE string.

ENDCLASS.                    &quot;lcl_ic_dynpro_utils DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_sub_dynpro_comp_base DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_sub_dynpro_comp_base DEFINITION INHERITING FROM zcl_ic_sub_edit_dyn_base ABSTRACT.

  PUBLIC SECTION.
    DATA: object_nr TYPE zic_object_nr,
          name TYPE zic_name,
          description TYPE zic_description,
          parent_path TYPE zic_path,
          path TYPE zic_path,
          rank TYPE zic_rank,

          parent_ctx TYPE zic_path.

    METHODS: constructor IMPORTING im_dynpro_nr TYPE sydynnr
                                   im_program_name TYPE syst-cprog
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base OPTIONAL
                                   im_ic_component TYPE REF TO zif_ic_component OPTIONAL,
             handle_pai REDEFINITION,
             save_component,
             check_component,
             get_ic_path RETURNING value(rt_path) TYPE zic_path,
             get_main_lcl_dynpro RETURNING value(rt_lcl_main_dynpro) TYPE REF TO lcl_main_dynpro.

    EVENTS: show_ic_comp EXPORTING value(ex_path) TYPE zic_path,
            search_class.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn,
             parse_dyn_to_comp,
             before_save_component,
             after_save_component.

    DATA: ic_component TYPE REF TO zif_ic_component.
ENDCLASS.                    &quot;lcl_ic_sub_dynpro_comp_base DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_add_sub_dynpro_comp DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_add_sub_dynpro_comp DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base ABSTRACT.

  PUBLIC SECTION.
    METHODS:  constructor IMPORTING im_dynpro_nr TYPE sydynnr
                                   im_program_name TYPE syst-cprog
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_parent TYPE REF TO zif_ic_composite OPTIONAL,
             get_comp_type ABSTRACT RETURNING value(rt_comp_type) TYPE zic_obj_type,
             get_parent RETURNING value(rt_parent) TYPE REF TO zif_ic_composite,
             set_parent IMPORTING im_parent TYPE REF TO zif_ic_composite.

  PROTECTED SECTION.
    DATA parent TYPE REF TO zif_ic_composite.

    METHODS: before_save_component REDEFINITION,
             create_component RETURNING value(rt_comp) TYPE REF TO zif_ic_component.

ENDCLASS.                    &quot;lcl_ic_add_sub_dynpro_comp DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_SEARCH_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_search_dynpro DEFINITION INHERITING FROM zcl_ic_sub_dynpro_base CREATE PRIVATE.

  PUBLIC SECTION.

    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0200&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_action_retrieve_cont TYPE scrffcod VALUE &apos;RETRIEVE_CONT&apos;,
               c_action_create_cont TYPE scrffcod VALUE &apos;CREATE_CONT&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_search_dynpro.

    DATA: cont_nr TYPE zic_container-cont_nr,
          name TYPE zic_container-name.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base,
             handle_pai REDEFINITION.

    EVENTS: retrieve_container_clicked EXPORTING value(ex_search_dynpro) TYPE REF TO lcl_search_dynpro
                                                 value(ex_cont_nr) TYPE zic_container-cont_nr,
            create_container_clicked EXPORTING value(ex_search_dynpro) TYPE REF TO lcl_search_dynpro.

ENDCLASS.                    &quot;lcl_SEARCH_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_tree_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_tree_dynpro DEFINITION INHERITING FROM zcl_ic_sub_dynpro_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0300&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    CONSTANTS: c_column1_comp TYPE tv_itmname VALUE &apos;Column1&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_tree_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base.

    DATA: ic_tree_container TYPE REF TO cl_gui_custom_container,
          ic_tree       TYPE REF TO cl_gui_column_tree.

ENDCLASS.                    &quot;lcl_SEARCH_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_CENTER_DYNPRO DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_center_dynpro DEFINITION INHERITING FROM zcl_ic_sub_dynpro_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0400&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_center_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base.

ENDCLASS.                    &quot;lcl_CENTER_DYNPRO DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_errors_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_errors_dynpro DEFINITION INHERITING FROM zcl_ic_sub_dynpro_base CREATE PRIVATE.
  PUBLIC SECTION.

    INTERFACES: zif_ic_validating_dynpro.

    TYPES: BEGIN OF ty_alv,
              icon TYPE icon_d,
              nr TYPE numc4,
              msg TYPE text255,
           END OF ty_alv.
    TYPES ty_alv_tab TYPE STANDARD TABLE OF ty_alv.

    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0410&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_cont_name TYPE string VALUE &apos;IC_ALV_ERRORS&apos;,
               c_icon_error TYPE icon-name VALUE &apos;ICON_LED_RED&apos;,
               c_icon_warning TYPE icon-name VALUE &apos;ICON_LED_YELLOW&apos;,
               c_icon_info TYPE icon-name VALUE &apos;ICON_LED_GREEN&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_errors_dynpro,
                   format_to_alv_table IMPORTING im_msg_tab TYPE zif_ic_validate=&gt;ty_message_tab
                                       CHANGING ch_format_tab TYPE ty_alv_tab.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base.

  PROTECTED SECTION.
    DATA: validate TYPE REF TO zif_ic_validate,
          alv_errors  TYPE REF TO cl_salv_table,
          gui_cont TYPE REF TO cl_gui_custom_container,
          error_tab TYPE ty_alv_tab.

ENDCLASS.                    &quot;lcl_errors_dynpro DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_IC_CONTAINER_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_container_dynpro DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0500&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: number TYPE zic_container-cont_nr,
          cont_type TYPE zic_cont_type.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_component TYPE REF TO zif_ic_component
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_container_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_container RETURNING value(rt_cont) TYPE REF TO zcl_ic_container.

ENDCLASS.                    &quot;lcl_CENTER_DYNPRO DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_cont_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_cont_dynpro DEFINITION INHERITING FROM lcl_ic_add_sub_dynpro_comp CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0501&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: number TYPE zic_cont_nr,
          cont_type TYPE zic_cont_type.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_cont_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base,
             get_comp_type REDEFINITION.

  PROTECTED SECTION.
    METHODS: create_component REDEFINITION,
             parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_container RETURNING value(rt_cont) TYPE REF TO zcl_ic_container.

ENDCLASS.                    &quot;lcl_ic_create_cont_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_contctx_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_contctx_dynpro DEFINITION INHERITING FROM lcl_ic_add_sub_dynpro_comp CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0506&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_parent TYPE REF TO zif_ic_composite
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_contctx_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_parent TYPE REF TO zif_ic_composite,
             get_comp_type REDEFINITION.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_cont_ctx RETURNING value(rt_cont_ctx) TYPE REF TO zcl_ic_cont_context.

ENDCLASS.                    &quot;lcl_ic_create_cont_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_inj_obj_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_inj_obj_dynpro DEFINITION INHERITING FROM lcl_ic_add_sub_dynpro_comp CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0537&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: inj_type_cont_nr TYPE zic_container-cont_nr,
          inj_type_cont_name TYPE zic_container-name,
          inj_type_ctx_nr TYPE zic_cont_context-ctx_nr,
          inj_type_ctx_name TYPE zic_cont_context-ctx_name,
          inj_type_ictx_nr TYPE zic_impl_context-impl_ctx_nr,
          inj_type_ictx_name TYPE zic_impl_context-ctx_name,
          inj_type_ictx_path TYPE zic_impl_context-path.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_parent TYPE REF TO zif_ic_composite
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_inj_obj_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_parent TYPE REF TO zif_ic_composite,
             get_comp_type REDEFINITION,
             weg_weg.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_inj_obj RETURNING value(rt_inj_obj) TYPE REF TO zcl_ic_inj_object.
ENDCLASS.                    &quot;lcl_ic_create_inj_obj_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_injctx_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_injctx_dynpro DEFINITION INHERITING FROM lcl_ic_add_sub_dynpro_comp CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0511&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_parent TYPE REF TO zif_ic_composite
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_injctx_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_parent TYPE REF TO zif_ic_composite,
             get_comp_type REDEFINITION.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_inj_ctx RETURNING value(rt_inj_ctx) TYPE REF TO zcl_ic_impl_context.

ENDCLASS.                    &quot;lcl_ic_create_cont_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_class_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_class_dynpro DEFINITION INHERITING FROM lcl_ic_add_sub_dynpro_comp CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0516&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: class_name TYPE zic_clsname,
          return_class_name TYPE zic_clsname,
          default_constr TYPE zic_class_defconstr.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_parent TYPE REF TO zif_ic_composite
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_class_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_parent TYPE REF TO zif_ic_composite,
             get_comp_type REDEFINITION.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_class RETURNING value(rt_class) TYPE REF TO zcl_ic_class.

ENDCLASS.                    &quot;lcl_ic_create_class_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_attrib_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_attrib_dynpro DEFINITION INHERITING FROM lcl_ic_add_sub_dynpro_comp CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0526&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA value_type TYPE zic_value_type.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_parent TYPE REF TO zif_ic_composite
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_attrib_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_parent TYPE REF TO zif_ic_composite,
             get_comp_type REDEFINITION.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_class_attrib RETURNING value(rt_attrib) TYPE REF TO zcl_ic_class_attrib.

ENDCLASS.                    &quot;lcl_ic_create_attrib_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_method_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_method_dynpro DEFINITION INHERITING FROM lcl_ic_add_sub_dynpro_comp CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0521&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: method_type TYPE zic_method_type,
          declare_level TYPE seomtddecl,
          active TYPE zic_method_active.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_parent TYPE REF TO zif_ic_composite
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_method_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_parent TYPE REF TO zif_ic_composite,
             get_comp_type REDEFINITION.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_method RETURNING value(rt_method) TYPE REF TO zcl_ic_method.

ENDCLASS.                    &quot;lcl_ic_create_attrib_dynpro DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_param_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_param_dynpro DEFINITION INHERITING FROM lcl_ic_add_sub_dynpro_comp CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0531&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_parent TYPE REF TO zif_ic_composite
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_param_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_parent TYPE REF TO zif_ic_composite,
             get_comp_type REDEFINITION.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_param RETURNING value(rt_param) TYPE REF TO zcl_ic_method_param.

ENDCLASS.                    &quot;lcl_ic_create_param_dynpro DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_VALUE_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_value_dynpro DEFINITION INHERITING FROM lcl_ic_add_sub_dynpro_comp CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0540&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: holder_name TYPE zic_name,
          holder_description TYPE zic_description,
          holder_path TYPE zic_path.

    DATA: value_type TYPE zic_value_type.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_holder TYPE REF TO zif_ic_valueholder
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_value_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_holder TYPE REF TO zif_ic_valueholder,
             handle_pbo REDEFINITION,
             handle_pai REDEFINITION,
             get_comp_type REDEFINITION,
             get_value_dyn RETURNING value(rt_value_dyn) TYPE REF TO lcl_ic_create_subval_dyn_base,
             get_value RETURNING value(rt_value) TYPE REF TO zcl_ic_value,
             get_value_holder RETURNING value(rt_val_holder) TYPE REF TO zif_ic_component,
             show_ic_value IMPORTING im_path TYPE zic_path.

  PROTECTED SECTION.
    DATA: value_dynpro TYPE REF TO lcl_ic_create_subval_dyn_base,
          previous_value_type TYPE zic_value_type,
          value_holder TYPE REF TO zif_ic_valueholder.

    METHODS: create_sub_value_dynpro IMPORTING im_value_type TYPE zic_value_type,
             create_component REDEFINITION,
             before_save_component REDEFINITION,
             after_save_component REDEFINITION,
             parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION.

ENDCLASS.                    &quot;lcl_ic_create_VALUE_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_subval_dyn_base DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_subval_dyn_base DEFINITION INHERITING FROM zcl_ic_sub_edit_dyn_base ABSTRACT.
  PUBLIC SECTION.

    CLASS-METHODS: create IMPORTING im_value_type TYPE zic_value_type
                                    im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_create_value_dynpro TYPE REF TO lcl_ic_create_value_dynpro
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_subval_dyn_base.

    METHODS:  constructor IMPORTING im_dynpro_nr TYPE sydynnr
                                   im_program_name TYPE syst-cprog
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro,
              parse_value_to_comp, &quot;TODO maybe abstract methods here instead of these
              parse_value_to_dyn.

  PROTECTED SECTION.
    DATA parent_dynpro TYPE REF TO lcl_ic_create_value_dynpro.

    METHODS: parse_sub_value_to_dyn ABSTRACT,
             parse_sub_value_to_comp ABSTRACT.

ENDCLASS.                    &quot;lcl_ic_create_subval_dyn_base DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_data_sub_dyn DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_data_sub_dyn DEFINITION INHERITING FROM lcl_ic_create_subval_dyn_base.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0600&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: data_type TYPE rs38l_typ,
          data_value TYPE seovalue.

    CLASS-METHODS: create_sub_dyn IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                            im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
                                  RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_data_sub_dyn.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro.

  PROTECTED SECTION.
    METHODS: parse_sub_value_to_dyn REDEFINITION,
             parse_sub_value_to_comp REDEFINITION,
             get_data_value RETURNING value(rt_value) TYPE REF TO zcl_ic_data.

ENDCLASS.                    &quot;lcl_ic_create_data_sub_dyn DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_table_sub_dyn DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_table_sub_dyn DEFINITION INHERITING FROM lcl_ic_create_subval_dyn_base.

  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0601&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: table_name TYPE tabname.

    CLASS-METHODS: create_sub_dyn IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                            im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
                                  RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_table_sub_dyn.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro.

  PROTECTED SECTION.
    METHODS: parse_sub_value_to_dyn REDEFINITION,
             parse_sub_value_to_comp REDEFINITION,
             get_table_value RETURNING value(rt_value) TYPE REF TO zcl_ic_table.
ENDCLASS.                    &quot;lcl_ic_create_table_sub_dyn DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_object_sub_dyn DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_object_sub_dyn DEFINITION INHERITING FROM lcl_ic_create_subval_dyn_base.

  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0602&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_combo_class TYPE vrm_id VALUE &apos;GO_CREATE_OBJECT_DYN-&gt;IC_CLASS_COMBO&apos;,
               c_show_ic_class_action TYPE string VALUE &apos;SHOW_IC_CLASS&apos;,
               c_ic_class_combo TYPE string VALUE &apos;IC_CLASS_COMBO&apos;,
               c_search_class_action TYPE string VALUE &apos;SEARCH_CLASS&apos;.

    DATA: ic_class_combo TYPE string.

    CLASS-METHODS: create_sub_dyn IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                            im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
                                  RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_object_sub_dyn.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro,
             handle_pai REDEFINITION.

  PROTECTED SECTION.
    DATA: selected_class TYPE zcl_ic_class=&gt;ty_class.

    METHODS: parse_sub_value_to_dyn REDEFINITION,
             parse_sub_value_to_comp REDEFINITION,
             get_ic_class_value RETURNING value(rt_value) TYPE REF TO zcl_ic_class_value.
ENDCLASS.                    &quot;lcl_ic_create_object_sub_dyn DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_param_sub_dyn DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_param_sub_dyn DEFINITION INHERITING FROM lcl_ic_create_subval_dyn_base.

  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0603&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_combo_class TYPE vrm_id VALUE &apos;GO_CREATE_PARAMVAL_DYN-&gt;IC_CLASS_COMBO&apos;,
               c_combo_method TYPE vrm_id VALUE &apos;GO_CREATE_PARAMVAL_DYN-&gt;IC_METHOD_COMBO&apos;,
               c_combo_param TYPE vrm_id VALUE &apos;GO_CREATE_PARAMVAL_DYN-&gt;IC_PARAM_COMBO&apos;,
               c_show_ic_class_action TYPE string VALUE &apos;SHOW_IC_CLASS&apos;,
               c_show_ic_method_action TYPE string VALUE &apos;SHOW_IC_METHOD&apos;,
               c_show_ic_param_action TYPE string VALUE &apos;SHOW_IC_PARAM&apos;,
               c_ic_class_combo TYPE string VALUE &apos;IC_CLASS_COMBO&apos;,
               c_ic_method_combo TYPE string VALUE &apos;IC_METHOD_COMBO&apos;,
               c_ic_param_combo TYPE string VALUE &apos;IC_PARAM_COMBO&apos;,
               c_search_class_action TYPE string VALUE &apos;SEARCH_CLASS&apos;.

    DATA: ic_class_combo TYPE string,
          ic_method_combo TYPE string,
          ic_param_combo TYPE string.

    CLASS-METHODS: create_sub_dyn IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                            im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
                                  RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_param_sub_dyn.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro,
             handle_pai REDEFINITION.

  PROTECTED SECTION.
    DATA: selected_class TYPE zcl_ic_class=&gt;ty_class,
          selected_method TYPE zcl_ic_method=&gt;ty_method,
          selected_param TYPE zcl_ic_method_param=&gt;ty_method_param.

    METHODS: parse_sub_value_to_dyn REDEFINITION,
             parse_sub_value_to_comp REDEFINITION,
             get_ic_param_value RETURNING value(rt_value) TYPE REF TO zcl_ic_method_param_value.
ENDCLASS.                    &quot;lcl_ic_create_param_sub_dyn DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_attrib_sub_dyn DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_attrib_sub_dyn DEFINITION INHERITING FROM lcl_ic_create_subval_dyn_base.

  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0604&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_combo_class TYPE vrm_id VALUE &apos;GO_CREATE_ATTRIBVAL_DYN-&gt;IC_CLASS_COMBO&apos;,
               c_combo_attrib TYPE vrm_id VALUE &apos;GO_CREATE_ATTRIBVAL_DYN-&gt;IC_ATTRIB_COMBO&apos;,
               c_show_ic_class_action TYPE string VALUE &apos;SHOW_IC_CLASS&apos;,
               c_show_ic_attrib_action TYPE string VALUE &apos;SHOW_IC_ATTRIB&apos;,
               c_ic_class_combo TYPE string VALUE &apos;IC_CLASS_COMBO&apos;,
               c_ic_attrib_combo TYPE string VALUE &apos;IC_ATTRIB_COMBO&apos;,
               c_search_class_action TYPE string VALUE &apos;SEARCH_CLASS&apos;.

    DATA: ic_class_combo TYPE string,
          ic_attrib_combo TYPE string.

    CLASS-METHODS: create_sub_dyn IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                            im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
                                  RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_attrib_sub_dyn.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro,
             handle_pai REDEFINITION.

  PROTECTED SECTION.
    DATA: selected_class TYPE zcl_ic_class=&gt;ty_class,
          selected_attrib TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

    METHODS: parse_sub_value_to_dyn REDEFINITION,
             parse_sub_value_to_comp REDEFINITION,
             get_ic_attrib_value RETURNING value(rt_value) TYPE REF TO zcl_ic_class_attrib_value.
ENDCLASS.                    &quot;lcl_ic_create_attrib_sub_dyn DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_cont_ctx_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_cont_ctx_dynpro DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0505&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_component TYPE REF TO zif_ic_component
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_cont_ctx_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_cont_ctx RETURNING value(rt_ctx) TYPE REF TO zcl_ic_cont_context.

ENDCLASS.                    &quot;lcl_ic_cont_ctx_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_impl_ctx_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_impl_ctx_dynpro DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base CREATE PROTECTED.
  PUBLIC SECTION.

    TYPES: BEGIN OF ty_inj_alv,
            icon TYPE icon_d,
            name TYPE zic_name,
            type_cont_name TYPE zic_cont_name,
            type_name TYPE zic_ctx_name,
            description TYPE zic_description,
         END OF ty_inj_alv.
    TYPES ty_alv_tab TYPE STANDARD TABLE OF ty_inj_alv.

    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0510&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_cont_name TYPE string VALUE &apos;INJ_OBJECT_CONT&apos;,
               c_cmd_inj_line_insert TYPE string VALUE &apos;INJ_LINE_INSERT&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_component TYPE REF TO zif_ic_component
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_impl_ctx_dynpro.

    DATA: create_inj_obj_dynpro TYPE REF TO lcl_ic_create_inj_obj_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component,
             handle_pbo REDEFINITION,
             handle_pai REDEFINITION.

  PROTECTED SECTION.

    CLASS-DATA: inj_obj_alv TYPE REF TO cl_salv_table,
                gui_cont TYPE REF TO cl_gui_custom_container.

    DATA: inj_obj_tab TYPE ty_alv_tab,
          inj_obj_dynpro TYPE abap_bool.

    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_ctx RETURNING value(rt_ctx) TYPE REF TO zcl_ic_context,
             get_impl_ctx RETURNING value(rt_ctx) TYPE REF TO zcl_ic_impl_context,
             fill_alv_table,
             show_alv.

ENDCLASS.                    &quot;lcl_ic_impl_ctx_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_inj_type_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_inj_type_dynpro DEFINITION INHERITING FROM lcl_ic_impl_ctx_dynpro.
  PUBLIC SECTION.

    DATA box_ic_cont_c TYPE string VALUE &apos;TEST&apos;.

    CLASS-METHODS: create_inj_type_dynpro IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                                    im_ic_component TYPE REF TO zif_ic_component
                                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_inj_type_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component,
             adapt_screen REDEFINITION.

  PROTECTED SECTION.

    METHODS: get_inj_type RETURNING value(rt_ctx) TYPE REF TO zcl_ic_inj_type,
             fill_alv_table REDEFINITION.

ENDCLASS.                    &quot;lcl_ic_inj_type_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_class_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_class_dynpro DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0515&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_component TYPE REF TO zif_ic_component
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_class_dynpro.

    DATA: class_name TYPE zic_clsname,
          return_class_name TYPE zic_clsname,
          default_constr TYPE zic_class_defconstr.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_class RETURNING value(rt_class) TYPE REF TO zcl_ic_class.
ENDCLASS.                    &quot;lcl_ic_class_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_method_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_method_dynpro DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0520&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: method_type TYPE zic_method_type,
          declare_level TYPE seomtddecl,
          active TYPE zic_method_active.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_component TYPE REF TO zif_ic_component
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_method_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_method RETURNING value(rt_method) TYPE REF TO zcl_ic_method.
ENDCLASS.                    &quot;lcl_ic_method_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_class_attrib_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_class_attrib_dynpro DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0525&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: value_dynpro TYPE REF TO lcl_ic_value_edit_dynpro_base.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_component TYPE REF TO zif_ic_component
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_class_attrib_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component,
             set_screen_mode REDEFINITION,
             handle_pbo REDEFINITION.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             before_save_component REDEFINITION,
             get_class_attrib RETURNING value(rt_cl_attrib) TYPE REF TO zcl_ic_class_attrib.
ENDCLASS.                    &quot;lcl_ic_class_attrib_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_method_param_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_method_param_dynpro DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0530&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: value_dynpro TYPE REF TO lcl_ic_value_edit_dynpro_base.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_component TYPE REF TO zif_ic_component
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_method_param_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component,
             set_screen_mode REDEFINITION,
             handle_pbo REDEFINITION.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             before_save_component REDEFINITION,
             get_method_param RETURNING value(rt_method_param) TYPE REF TO zcl_ic_method_param.
ENDCLASS.                    &quot;lcl_ic_method_param_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_inj_type_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_inj_obj_dynpro DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0535&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_component TYPE REF TO zif_ic_component
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_inj_obj_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component,
             is_screen_edit REDEFINITION.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_inj_obj RETURNING value(rt_inj_object) TYPE REF TO zcl_ic_inj_object.

ENDCLASS.                    &quot;lcl_ic_inj_type_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_value_edit_dynpro_base DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_value_edit_dynpro_base DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base ABSTRACT.
  PUBLIC SECTION.
    DATA: value_type TYPE zic_value_type.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
                                    im_ic_value TYPE REF TO zcl_ic_value
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_value_edit_dynpro_base.

    METHODS: constructor IMPORTING im_dynpro_nr TYPE sydynnr
                                   im_program_name TYPE syst-cprog
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_value TYPE REF TO zcl_ic_value.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_value RETURNING value(rt_value) TYPE REF TO zcl_ic_value.
ENDCLASS.                    &quot;lcl_ic_value_edit_dynpro_base DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_data_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_data_dynpro DEFINITION INHERITING FROM lcl_ic_value_edit_dynpro_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0550&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_default_data_type TYPE char6 VALUE &apos;STRING&apos;.

    DATA: data_type TYPE rs38l_typ,
          data_value TYPE seovalue.

    CLASS-METHODS: create_dynpro IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                           im_sub_scrn_area TYPE scrfname OPTIONAL
                                           im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
                                 RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_data_dynpro.

    METHODS: constructor IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_data_value RETURNING value(rt_value) TYPE REF TO zcl_ic_data.
ENDCLASS.                    &quot;lcl_ic_value_edit_dynpro_base DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_table_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_table_dynpro DEFINITION INHERITING FROM lcl_ic_value_edit_dynpro_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0551&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    DATA: table_name TYPE tabname.

    CLASS-METHODS: create_dynpro IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                           im_sub_scrn_area TYPE scrfname OPTIONAL
                                           im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
                                 RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_table_dynpro.

    METHODS: constructor IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base.

  PROTECTED SECTION.
    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_table_value RETURNING value(rt_value) TYPE REF TO zcl_ic_table.

ENDCLASS.                    &quot;lcl_ic_value_edit_dynpro_base DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_class_value_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_class_value_dynpro DEFINITION INHERITING FROM lcl_ic_value_edit_dynpro_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0552&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_show_ic_class_action TYPE string VALUE &apos;SHOW_IC_CLASS&apos;,
               c_ic_class_combo TYPE string VALUE &apos;IC_CLASS_COMBO&apos;,
               c_search_class_action TYPE string VALUE &apos;SEARCH_CLASS&apos;,
               c_combo_class TYPE vrm_id VALUE &apos;GO_VALUE_CLASS_DYN-&gt;IC_CLASS_COMBO&apos;.

    DATA: ic_class_combo TYPE string.

    CLASS-METHODS: create_dynpro IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                           im_sub_scrn_area TYPE scrfname OPTIONAL
                                           im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
                                 RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_class_value_dynpro.

    METHODS: constructor IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base,
             handle_pai REDEFINITION.
  PROTECTED SECTION.

    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_ic_class_value RETURNING value(rt_value) TYPE REF TO zcl_ic_class_value.

ENDCLASS.                    &quot;lcl_ic_class_value_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_param_value_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_param_value_dynpro DEFINITION INHERITING FROM lcl_ic_value_edit_dynpro_base CREATE PRIVATE.

  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0553&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_show_ic_class_action TYPE string VALUE &apos;SHOW_IC_CLASS&apos;,
               c_show_ic_method_action TYPE string VALUE &apos;SHOW_IC_METHOD&apos;,
               c_show_ic_param_action TYPE string VALUE &apos;SHOW_IC_PARAM&apos;,
               c_ic_class_combo TYPE string VALUE &apos;IC_CLASS_COMBO&apos;,
               c_ic_method_combo TYPE string VALUE &apos;IC_METHOD_COMBO&apos;,
               c_ic_param_combo TYPE string VALUE &apos;IC_PARAM_COMBO&apos;,
               c_search_class_action TYPE string VALUE &apos;SEARCH_CLASS&apos;,
               c_combo_class TYPE vrm_id VALUE &apos;GO_VALUE_PARAM_DYN-&gt;IC_CLASS_COMBO&apos;,
               c_combo_method TYPE vrm_id VALUE &apos;GO_VALUE_PARAM_DYN-&gt;IC_METHOD_COMBO&apos;,
               c_combo_param TYPE vrm_id VALUE &apos;GO_VALUE_PARAM_DYN-&gt;IC_PARAM_COMBO&apos;.

    DATA: ic_class_combo TYPE string,
          ic_method_combo TYPE string,
          ic_param_combo TYPE string.

    CLASS-METHODS: create_dynpro IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                           im_sub_scrn_area TYPE scrfname OPTIONAL
                                           im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
                                 RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_param_value_dynpro.

    METHODS: constructor IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base,
             handle_pai REDEFINITION.

  PROTECTED SECTION.

    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_ic_param_value RETURNING value(rt_value) TYPE REF TO zcl_ic_method_param_value,
             fill_comp_selects IMPORTING im_implctx TYPE REF TO zcl_ic_impl_context.

    DATA: impl_ctx TYPE REF TO zcl_ic_impl_context,
          class_select TYPE REF TO zcl_ic_class,
          method_select TYPE REF TO zcl_ic_method,
          param_select TYPE REF TO zcl_ic_method_param.

ENDCLASS.                    &quot;lcl_ic_param_value_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_attrib_value_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_attrib_value_dynpro DEFINITION INHERITING FROM lcl_ic_value_edit_dynpro_base CREATE PRIVATE.

  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0554&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_show_ic_class_action TYPE string VALUE &apos;SHOW_IC_CLASS&apos;,
               c_show_ic_attrib_action TYPE string VALUE &apos;SHOW_IC_ATTRIB&apos;,
               c_ic_class_combo TYPE string VALUE &apos;IC_CLASS_COMBO&apos;,
               c_ic_attrib_combo TYPE string VALUE &apos;IC_ATTRIB_COMBO&apos;,
               c_search_class_action TYPE string VALUE &apos;SEARCH_CLASS&apos;,
               c_combo_class TYPE vrm_id VALUE &apos;GO_VALUE_ATTRIB_DYN-&gt;IC_CLASS_COMBO&apos;,
               c_combo_attrib TYPE vrm_id VALUE &apos;GO_VALUE_ATTRIB_DYN-&gt;IC_ATTRIB_COMBO&apos;.

    DATA: ic_class_combo TYPE string,
          ic_attrib_combo TYPE string.

    CLASS-METHODS: create_dynpro IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                           im_sub_scrn_area TYPE scrfname OPTIONAL
                                           im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
                                 RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_attrib_value_dynpro.

    METHODS: constructor IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base,
             handle_pai REDEFINITION.

  PROTECTED SECTION.

    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             get_ic_attrib_value RETURNING value(rt_value) TYPE REF TO zcl_ic_class_attrib_value,
             fill_comp_selects IMPORTING im_implctx TYPE REF TO zcl_ic_impl_context.

    DATA: impl_ctx TYPE REF TO zcl_ic_impl_context,
          class_select TYPE REF TO zcl_ic_class,
          attrib_select TYPE REF TO zcl_ic_class_attrib.

ENDCLASS.                    &quot;lcl_ic_attrib_value_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_select_inj_obj_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_select_inj_obj_dynpro DEFINITION INHERITING FROM lcl_ic_sub_dynpro_comp_base CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0556&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;.

    CLASS-METHODS: create IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                    im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                    im_ic_inj_object TYPE REF TO zcl_ic_inj_object
                          RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_select_inj_obj_dynpro.

    METHODS: constructor IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
                                   im_ic_component TYPE REF TO zif_ic_component,
             handle_pbo REDEFINITION.

    DATA: ic_tree_container TYPE REF TO cl_gui_custom_container,
          ic_tree       TYPE REF TO cl_gui_column_tree.

  PROTECTED SECTION.
    DATA: selected_value TYPE REF TO zcl_ic_value.

    METHODS: create_container,
             on_node_double_click FOR EVENT node_double_click OF cl_gui_column_tree
                                  IMPORTING node_key,
             on_item_double_click FOR EVENT item_double_click OF cl_gui_column_tree
                                  IMPORTING node_key,
             get_inj_obj RETURNING value(rt_inj_obj) TYPE REF TO zcl_ic_inj_object,
             get_selected_value RETURNING value(rt_value) TYPE REF TO zcl_ic_value.
ENDCLASS.                    &quot;lcl_ic_select_inj_obj_dynpro DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_type_value_dynpro DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_type_value_dynpro DEFINITION INHERITING FROM lcl_ic_value_edit_dynpro_base CREATE PRIVATE.

  PUBLIC SECTION.
    CONSTANTS: c_dynpro_nr TYPE sydynnr VALUE &apos;0555&apos;,
               c_prog_name TYPE sycprog VALUE &apos;ZIC_APP_GUI&apos;,
               c_combo_inj_obj TYPE vrm_id VALUE &apos;GO_VALUE_TYPE_DYN-&gt;IC_INJ_OBJ_COMBO&apos;,
               c_show_ic_inj_obj_action TYPE string VALUE &apos;SHOW_IC_INJ_OBJ&apos;,
               c_select_ic_inj_obj_action TYPE string VALUE &apos;SELECT_IC_INJ_OBJ&apos;.

    CLASS-METHODS: create_dynpro IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                           im_sub_scrn_area TYPE scrfname OPTIONAL
                                           im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
                                 RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_type_value_dynpro.

    DATA: ic_inj_obj_combo TYPE string,
          select_inj_obj_dynpro TYPE REF TO lcl_ic_select_inj_obj_dynpro.

    METHODS: constructor IMPORTING im_ic_value TYPE REF TO zcl_ic_value
                                   im_sub_scrn_area TYPE scrfname OPTIONAL
                                   im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base,
             handle_pbo REDEFINITION,
             handle_pai REDEFINITION.

  PROTECTED SECTION.
    DATA: inj_obj_dynpro TYPE abap_bool.

    METHODS: parse_comp_to_dyn REDEFINITION,
             parse_dyn_to_comp REDEFINITION,
             refresh_inj_obj,
             get_ic_inj_object RETURNING value(rt_inj_obj) TYPE REF TO zcl_ic_inj_object,
             get_ic_type_value RETURNING value(rt_type_value) TYPE REF TO zcl_ic_type_value.

ENDCLASS.                    &quot;lcl_ic_type_value_dynpro DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_application DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_application DEFINITION CREATE PRIVATE.
  PUBLIC SECTION.
    CONSTANTS: c_subscr_search TYPE scrfname VALUE &apos;IC_SUB_SCR_SEARCH&apos;,
               c_subscr_tree TYPE scrfname VALUE &apos;IC_SUB_SCR_TREE&apos;,
               c_subscr_center TYPE scrfname VALUE &apos;IC_SUB_SCR_CENTER&apos;,
               c_subscr_errors TYPE scrfname VALUE &apos;IC_SUB_SCR_ERRORS&apos;,
               c_subscr_center_top TYPE scrfname VALUE &apos;IC_SUB_SCR_CENTER_TOP&apos;,
               c_subscr_value TYPE scrfname VALUE &apos;IC_SUB_SCR_VALUE&apos;,
               c_subscr_create_value TYPE scrfname VALUE &apos;IC_SUB_SCR_CREATE_VALUE&apos;,
               c_subscr_no_screen_area TYPE scrfname VALUE &apos;NO_SCREEN_AREA&apos;.

    CONSTANTS: c_action_create_cont_ctx TYPE ui_func VALUE &apos;CREATE_CONT_CTX&apos;,
               c_action_create_inj_ctx TYPE ui_func VALUE &apos;CREATE_INJ_CTX&apos;,
               c_action_create_ic_class TYPE ui_func VALUE &apos;CREATE_IC_CLASS&apos;,
               c_action_create_ic_attrib TYPE ui_func VALUE &apos;CREATE_IC_class_ATTRIB&apos;,
               c_action_create_ic_method TYPE ui_func VALUE &apos;CREATE_IC_METHOD&apos;,
               c_action_create_ic_methodparam TYPE ui_func VALUE &apos;CREATE_IC_METHOD_PARAM&apos;,
               c_action_create_ic_value TYPE ui_func VALUE &apos;CREATE_IC_VALUE&apos;.

    TYPES: BEGIN OF t_column_tree_node,
            path TYPE zic_path,
            node_key TYPE treev_node-node_key,
            node TYPE treev_node,
            item TYPE mtreeitm,
           END OF t_column_tree_node.

    TYPES t_column_tree_node_tab TYPE TABLE OF t_column_tree_node.
    TYPES: t_column_tree_item_tab TYPE STANDARD TABLE OF mtreeitm.

    CLASS-METHODS: create RETURNING value(rt_application) TYPE REF TO lcl_ic_application.

    METHODS: constructor,
             create_ic_tree IMPORTING im_ic_comp TYPE REF TO zif_ic_component
                            CHANGING ch_tree TYPE REF TO cl_gui_column_tree,
             add_container_in_tree IMPORTING cont_nr TYPE zic_container-cont_nr,
             get_selected_container RETURNING value(rt_container) TYPE REF TO zcl_ic_container,
             show_selected_component,
             get_selected_comp RETURNING value(rt_comp) TYPE REF TO zif_ic_component.

  PRIVATE SECTION.
    CLASS-DATA:
      application TYPE REF TO lcl_ic_application.

    METHODS: create_ic_tree_nodes IMPORTING im_ic_comp TYPE REF TO zif_ic_component
                                            im_parent TYPE tv_nodekey DEFAULT space
                                  CHANGING ch_tree_index TYPE i
                                           ch_tree_node_tab TYPE treev_ntab
                                           ch_tree_item_tab TYPE t_column_tree_item_tab,
             selected_comp_by_node_key IMPORTING im_node_key TYPE tv_nodekey,
             select_ctx_from_inj_node IMPORTING im_node_select TYPE t_column_tree_node
                                      RETURNING value(rt_context) TYPE REF TO zcl_ic_context,
             selected_comp_by_path IMPORTING im_path TYPE zic_path,
*            events
             on_retrieve_container_clicked  FOR EVENT retrieve_container_clicked OF lcl_search_dynpro
                                            IMPORTING ex_search_dynpro ex_cont_nr,
             on_create_container_clicked    FOR EVENT create_container_clicked OF lcl_search_dynpro
                                            IMPORTING ex_search_dynpro,
             on_node_double_click FOR EVENT node_double_click OF cl_gui_column_tree
                                  IMPORTING node_key,
             on_item_double_click FOR EVENT item_double_click OF cl_gui_column_tree
                                  IMPORTING node_key,
             on_node_ctx_menu_req FOR EVENT node_context_menu_request OF cl_gui_column_tree
                                         IMPORTING node_key
                                                   menu,
             on_item_ctx_menu_req  FOR EVENT item_context_menu_request OF cl_gui_column_tree
                                         IMPORTING node_key
                                                   menu,
             on_node_ctx_menu_sel FOR EVENT node_context_menu_select OF cl_gui_column_tree
                                         IMPORTING node_key
                                                   fcode,
             on_item_ctx_menu_sel FOR EVENT item_context_menu_select OF cl_gui_column_tree
                                         IMPORTING node_key
                                                   fcode,
             on_ic_exec_clicked FOR EVENT ic_exec_clicked OF lcl_main_dynpro,
             on_ic_debug_clicked FOR EVENT ic_debug_clicked OF lcl_main_dynpro,
             on_ic_edit_clicked FOR EVENT ic_edit_clicked OF lcl_main_dynpro,
             on_ic_save_clicked FOR EVENT ic_save_clicked OF lcl_main_dynpro,
             on_ic_check_clicked FOR EVENT ic_check_clicked OF lcl_main_dynpro,
             on_ic_back_clicked FOR EVENT ic_back_clicked OF lcl_main_dynpro,
             on_show_ic_comp FOR EVENT show_ic_comp OF lcl_ic_sub_dynpro_comp_base
                                IMPORTING ex_path,
             on_search_class FOR EVENT search_class OF lcl_ic_class_value_dynpro.

    DATA: dynpro_manager TYPE REF TO zcl_ic_dynpro_manager,
          command_manager TYPE REF TO zcl_ic_command_manager,
          main_dynpro TYPE REF TO zcl_ic_main_dynpro_base,
          ic_search_dynpro TYPE REF TO lcl_search_dynpro,
          ic_tree_dynpro TYPE REF TO lcl_tree_dynpro,
          ic_center_dynpro TYPE REF TO lcl_center_dynpro,
          ic_errors_dynpro TYPE REF TO lcl_errors_dynpro,
*         business data
          selected_container TYPE REF TO zcl_ic_container,
          selected_component TYPE REF TO zif_ic_component,
          cont_tree_nodes TYPE t_column_tree_node_tab.

ENDCLASS.                    &quot;lcl_ic_application DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_show_sub_dynpro_cmd IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_show_sub_dynpro_cmd IMPLEMENTATION.

  METHOD create.
*     IMPORTING im_sub_scrn_area TYPE scrfname
*               im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
*               im_ic_component TYPE REF TO zif_ic_componen
*     RETURNING VALUE(rt_command) TYPE REF TO zif_ic_command.
    DATA lo_command TYPE REF TO lcl_show_sub_dynpro_cmd.

    CREATE OBJECT lo_command
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_component  = im_ic_component.

    rt_command = lo_command.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname
*             im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
*             im_ic_component TYPE REF TO zif_ic_component.

    sub_scrn_area = im_sub_scrn_area.
    main_dynpro = im_main_dynpro.
    ic_component = im_ic_component.
  ENDMETHOD.                    &quot;constructor

  METHOD zif_ic_command~execute.
    DATA: lo_center_dynpro TYPE REF TO zcl_ic_sub_dynpro_base.

*   get rollback info
    previous_dynpro = zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro(
                                                    im_sub_scrn_area = sub_scrn_area ).

*   show_selected_component
    CASE ic_component-&gt;get_type( ).

      WHEN zcl_ic_object=&gt;c_class_type.

        lo_center_dynpro = lcl_ic_class_dynpro=&gt;create( im_sub_scrn_area = sub_scrn_area
                                                        im_main_dynpro = main_dynpro
                                                        im_ic_component = ic_component ).
      WHEN zcl_ic_object=&gt;c_method_type.

        lo_center_dynpro = lcl_ic_method_dynpro=&gt;create( im_sub_scrn_area = sub_scrn_area
                                                         im_main_dynpro = main_dynpro
                                                         im_ic_component = ic_component ).
      WHEN zcl_ic_object=&gt;c_class_attrib_type.

        lo_center_dynpro = lcl_ic_class_attrib_dynpro=&gt;create( im_sub_scrn_area = sub_scrn_area
                                                               im_main_dynpro = main_dynpro
                                                               im_ic_component = ic_component ).
      WHEN zcl_ic_object=&gt;c_method_param_type.

        lo_center_dynpro = lcl_ic_method_param_dynpro=&gt;create( im_sub_scrn_area = sub_scrn_area
                                                               im_main_dynpro = main_dynpro
                                                               im_ic_component = ic_component ).
      WHEN zcl_ic_object=&gt;c_inj_obj_type.

        lo_center_dynpro = lcl_ic_inj_obj_dynpro=&gt;create( im_sub_scrn_area = sub_scrn_area
                                                               im_main_dynpro = main_dynpro
                                                               im_ic_component = ic_component ).
    ENDCASE.

    zcl_ic_dynpro_manager=&gt;instance( )-&gt;set_current_dynpro( im_dynpro = lo_center_dynpro
                                                            im_sub_scrn_area = sub_scrn_area ).

  ENDMETHOD.                    &quot;zif_ic_command~execute

  METHOD zif_ic_command~rollback.
*   set previous screen

    zcl_ic_dynpro_manager=&gt;instance( )-&gt;set_current_dynpro( im_dynpro = previous_dynpro
                                                            im_sub_scrn_area = sub_scrn_area ).
  ENDMETHOD.                    &quot;zif_ic_command~rollback

ENDCLASS.                    &quot;lcl_show_sub_dynpro_cmd IMPLEMENTATION
*TODO weg + misshien data in top include
*CLASS lcl_dragdrop_receiver IMPLEMENTATION.
**  METHOD left_drag.
**    DATA drag_object TYPE REF TO lcl_drag_object.
***
***    READ TABLE node_itab WITH KEY node_key = node_key
***                         INTO node.
**    break bcuser.
**    CREATE OBJECT drag_object.
**    drag_object-&gt;text = &apos;TEST&apos;.&quot;node-text.
**    drag_drop_object-&gt;object = drag_object.
**  ENDMETHOD.                    &quot;left_drag
**
**  METHOD right_drop.
***    DATA textline(256).
***    DATA text_table LIKE STANDARD TABLE OF textline.
***    DATA drag_object TYPE REF TO lcl_drag_object.
***    CATCH SYSTEM-EXCEPTIONS move_cast_error = 1.
***      drag_object ?= dragdrop_object-&gt;object.
***    ENDCATCH.
***    IF sy-subrc = 1.
***      &quot; data object has unexpected class
***                                       &quot; =&gt; cancel Drag &amp; Drop operation
***      CALL METHOD dragdrop_object-&gt;abort.
***      EXIT.
***    ENDIF.
***    CALL METHOD editor-&gt;get_text_as_stream
***         IMPORTING text        = text_table.
**** Synchronize Automation Queue after Get Methods
***    CALL METHOD cl_gui_cfw=&gt;flush.
***    textline = drag_object-&gt;text.
**** Insert text in internal table
***    INSERT textline INTO text_table INDEX 1.
**** Send modified table to frontend
***    CALL METHOD editor-&gt;set_text_as_stream
***         EXPORTING  text = text_table
***         EXCEPTIONS error_dp        = 1
***                    error_dp_create = 2.
**  ENDMETHOD.                    &quot;right_drop
*ENDCLASS.                    &quot;lcl_dragdrop_receiver IMPLEMENTATION

**TODO class weg + misschien handlers in top include
*CLASS lcl_gui_textline IMPLEMENTATION.
*
*  METHOD constructor.
*
*    super-&gt;constructor(
*            parent = parent
*            max_number_chars = max_number_chars
*            style = style
*            wordwrap_mode = wordwrap_mode
*            wordwrap_position = wordwrap_position
*            wordwrap_to_linebreak_mode = wordwrap_to_linebreak_mode
*            filedrop_mode = filedrop_mode
*            lifetime = lifetime
*            name = name ).
*
*    init( ).
*
*  ENDMETHOD.                    &quot;constructor
*
*  METHOD init.
**   init first time control
*    set_statusbar_mode( 0 ).
*    set_last_visible_line( c_lines ).
*    set_height( c_lines ).
*    set_toolbar_mode( 0 ).
*    set_enable( abap_false ).
*  ENDMETHOD.                    &quot;init_control
*
*  METHOD get_text.
**    RETURNING VALUE(re_text) type string,
*
*    get_textstream( IMPORTING text = re_text ).
*  ENDMETHOD.                    &quot;get_text
*
*  METHOD set_text.
**   set_text importing im_text type string .
*    set_textstream( im_text ).
*
*  ENDMETHOD.                    &quot;set_text
*
*ENDCLASS.                    &quot;lcl_gui_textline IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_application IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_application IMPLEMENTATION.
  METHOD create.
*   RETURNING VALUE(rt_application) type ref to lcl_ic_application
    IF application IS INITIAL.
      CREATE OBJECT application.
    ENDIF.

    rt_application = application.
  ENDMETHOD.                    &quot;run_application

  METHOD constructor.
*TODO CONFIG *****************
    dynpro_manager = zcl_ic_dynpro_manager=&gt;instance( ).

    CREATE OBJECT command_manager.

    main_dynpro = lcl_main_dynpro=&gt;create( me ).
    ic_search_dynpro = lcl_search_dynpro=&gt;create( im_sub_scrn_area = &apos;IC_SUB_SCR_SEARCH&apos;
                                                  im_main_dynpro = main_dynpro ).
    ic_tree_dynpro = lcl_tree_dynpro=&gt;create( im_sub_scrn_area = &apos;IC_SUB_SCR_TREE&apos;
                                              im_main_dynpro = main_dynpro ).
    ic_center_dynpro = lcl_center_dynpro=&gt;create( im_sub_scrn_area = &apos;IC_SUB_SCR_CENTER&apos;
                                                  im_main_dynpro = main_dynpro ).
    ic_errors_dynpro = lcl_errors_dynpro=&gt;create( im_sub_scrn_area = &apos;IC_SUB_SCR_ERRORS&apos;
                                                  im_main_dynpro = main_dynpro ).

*   start startscreen
    dynpro_manager-&gt;set_current_dynpro(  im_sub_scrn_area = &apos;IC_SUB_SCR_SEARCH&apos;
                                         im_dynpro = ic_search_dynpro ).

    dynpro_manager-&gt;set_current_dynpro(  im_sub_scrn_area = &apos;IC_SUB_SCR_TREE&apos;
                                         im_dynpro = ic_tree_dynpro ).

    dynpro_manager-&gt;set_current_dynpro( im_sub_scrn_area = &apos;IC_SUB_SCR_CENTER&apos;
                                        im_dynpro = ic_center_dynpro ).

    dynpro_manager-&gt;set_current_dynpro( im_sub_scrn_area = &apos;IC_SUB_SCR_ERRORS&apos;
                                    im_dynpro = ic_errors_dynpro ).
*TODO CONFIG *****************

    dynpro_manager-&gt;set_validation_dynpro( ic_errors_dynpro ).

    DATA lo_main TYPE REF TO lcl_main_dynpro.

    lo_main ?= main_dynpro.
*   screen handlers
    SET HANDLER on_retrieve_container_clicked FOR ic_search_dynpro.
    SET HANDLER on_create_container_clicked FOR ic_search_dynpro.
*   tree handlers
    SET HANDLER on_node_double_click FOR ic_tree_dynpro-&gt;ic_tree.
    SET HANDLER on_item_double_click FOR ic_tree_dynpro-&gt;ic_tree.
    SET HANDLER on_node_ctx_menu_req FOR ic_tree_dynpro-&gt;ic_tree.
    SET HANDLER on_item_ctx_menu_req FOR ic_tree_dynpro-&gt;ic_tree.
    SET HANDLER on_node_ctx_menu_sel FOR ic_tree_dynpro-&gt;ic_tree.
    SET HANDLER on_item_ctx_menu_sel FOR ic_tree_dynpro-&gt;ic_tree.
    SET HANDLER on_ic_exec_clicked FOR lo_main.
    SET HANDLER on_ic_debug_clicked FOR lo_main.
    SET HANDLER on_ic_edit_clicked FOR lo_main.
    SET HANDLER on_ic_save_clicked FOR lo_main.
    SET HANDLER on_ic_check_clicked FOR lo_main.
    SET HANDLER on_ic_back_clicked FOR lo_main.
    SET HANDLER on_show_ic_comp FOR ALL INSTANCES.
    SET HANDLER on_search_class FOR ALL INSTANCES.

  ENDMETHOD.                    &quot;constructorn.

  METHOD create_ic_tree.
*   IMPORTING im_ic_comp TYPE REF TO zif_ic_component
*   CHANGING ch_tree TYPE REF TO cl_gui_column_tree
    CONSTANTS: lc_tabstruct TYPE x030l-tabname VALUE &apos;MTREEITM&apos;.

    DATA: lit_node_table TYPE treev_ntab,
          lit_item_table TYPE lcl_ic_application=&gt;t_column_tree_item_tab,
          l_tree_index TYPE i.

*   create nodes in left tree
    ch_tree-&gt;delete_all_nodes( ).

    create_ic_tree_nodes( EXPORTING im_ic_comp = im_ic_comp
                          CHANGING ch_tree_index = l_tree_index
                                   ch_tree_node_tab = lit_node_table
                                   ch_tree_item_tab = lit_item_table ).

    ch_tree-&gt;add_nodes_and_items(
         EXPORTING node_table = lit_node_table
                   item_table = lit_item_table
                   item_table_structure_name = lc_tabstruct ).

  ENDMETHOD.                    &quot;create_ic_nodes

  METHOD create_ic_tree_nodes.
*  importing im_ic_comp TYPE REF TO zif_ic_component
*            im_parent type TV_NODEKEY
*  CHANGING ch_tree_index TYPE i
*           ch_tree_node_tab TYPE TREEV_NTAB
*           ch_tree_item_tab type lcl_tree_dynpro=&gt;t_COLUMN_TREE_ITEM_TAB,
    DATA: lwa_node TYPE t_column_tree_node,
          lo_parent TYPE REF TO zif_ic_composite,
          lo_childs TYPE zif_ic_composite=&gt;ty_comp_tab_entries,
          lo_child TYPE zif_ic_composite=&gt;ty_comp_tab_entry.

    CLEAR: lwa_node, lwa_node-node, lwa_node-item.

    IF im_ic_comp IS INITIAL.
      RETURN.
    ENDIF.

    ch_tree_index = ch_tree_index + 1.
    lwa_node-node_key = ch_tree_index.
    lwa_node-path = im_ic_comp-&gt;get_path( ).
    lwa_node-node-node_key = ch_tree_index.
    lwa_node-node-relatkey = im_parent.

    lwa_node-item-node_key = lwa_node-node-node_key.
    lwa_node-item-item_name = lcl_tree_dynpro=&gt;c_column1_comp.
    lwa_node-item-class = cl_gui_column_tree=&gt;item_class_text.
    lwa_node-item-text = im_ic_comp-&gt;get_name( ).

    IF im_ic_comp-&gt;is_parent( ) = abap_true.
      lwa_node-node-isfolder = abap_true.
    ELSE.
      lwa_node-node-isfolder = abap_false.
    ENDIF.

    CASE im_ic_comp-&gt;get_type( ).
      WHEN zcl_ic_object=&gt;c_container_type.
        lwa_node-node-exp_image = icon_system_usermenu.
        lwa_node-node-n_image = icon_system_usermenu.
      WHEN zcl_ic_object=&gt;c_cont_context_type.
      WHEN zcl_ic_object=&gt;c_impl_context_type
                        OR zcl_ic_object=&gt;c_inj_type.
        lwa_node-node-exp_image = icon_activity.
        lwa_node-node-n_image = icon_activity.
      WHEN zcl_ic_object=&gt;c_class_type.
        lwa_node-node-exp_image = icon_oo_class.
        lwa_node-node-n_image = icon_oo_class.
      WHEN zcl_ic_object=&gt;c_method_type.
        lwa_node-node-exp_image = icon_oo_class_method.
        lwa_node-node-n_image = icon_oo_class_method.
      WHEN zcl_ic_object=&gt;c_class_attrib_type.
        lwa_node-node-exp_image = icon_oo_class_attribute.
        lwa_node-node-n_image = icon_oo_class_attribute.
      WHEN zcl_ic_object=&gt;c_method_param_type.
        lwa_node-node-exp_image = icon_parameter.
        lwa_node-node-n_image = icon_parameter.
      WHEN zcl_ic_object=&gt;c_inj_obj_type.
        lwa_node-node-exp_image = icon_other_object.
        lwa_node-node-n_image = icon_other_object.
    ENDCASE.

    APPEND lwa_node-node TO ch_tree_node_tab.
    APPEND lwa_node-item TO ch_tree_item_tab.
    APPEND lwa_node TO cont_tree_nodes.

    CLEAR lo_childs.

    IF im_ic_comp-&gt;get_type( ) = zcl_ic_object=&gt;c_inj_obj_type.
      DATA lo_inj_obj TYPE REF TO zcl_ic_inj_object.

      lo_inj_obj ?= im_ic_comp.
      lo_inj_obj-&gt;load_ctx( ).
      lo_childs = lo_inj_obj-&gt;get_inj_type( )-&gt;zif_ic_composite~get_children( ).
      lwa_node-path = lo_inj_obj-&gt;get_inj_type( )-&gt;get_path( ).
      lwa_node-item-text = lo_inj_obj-&gt;get_inj_type( )-&gt;get_name( ).
    ELSEIF im_ic_comp-&gt;is_parent( ) = abap_true.
      lo_parent ?= im_ic_comp.
      lo_childs = lo_parent-&gt;get_children( ).
    ENDIF.

    LOOP AT lo_childs INTO lo_child.
      create_ic_tree_nodes( EXPORTING im_ic_comp = lo_child-comp
                                      im_parent = lwa_node-node-node_key
                            CHANGING ch_tree_index = ch_tree_index
                                     ch_tree_node_tab = ch_tree_node_tab
                                     ch_tree_item_tab = ch_tree_item_tab ).
    ENDLOOP.

  ENDMETHOD.                    &quot;create_ic_tree_nodes

  METHOD selected_comp_by_node_key.
*   importing im_node_key type tv_nodekey,
    DATA: lwa_node_select TYPE t_column_tree_node.

    READ TABLE cont_tree_nodes WITH KEY node_key = im_node_key
                               INTO lwa_node_select.

    IF selected_container IS BOUND
      AND lwa_node_select IS NOT INITIAL.

      selected_component = selected_container-&gt;zif_ic_composite~get_child_by_path( lwa_node_select-path ).

      IF selected_component IS NOT BOUND.
        DATA lo_ctx TYPE REF TO zcl_ic_context.

        lo_ctx = select_ctx_from_inj_node( lwa_node_select ).

        IF lo_ctx IS BOUND.
          selected_component = lo_ctx-&gt;search_comp_by_path( im_path = lwa_node_select-path ).
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    &quot;selected_comp_by_node_key

  METHOD select_ctx_from_inj_node.
*   IMPORTING im_node_select TYPE t_column_tree_node
*   RETURNING VALUE(rt_context) TYPE REF TO zcl_ic_context,
    DATA: lwa_temp TYPE t_column_tree_node,
          lo_child TYPE REF TO zif_ic_component.

    CLEAR lo_child.
    lwa_temp = im_node_select.

    WHILE lwa_temp IS NOT INITIAL
      AND lwa_temp-node-relatkey &gt; 0.

      READ TABLE cont_tree_nodes WITH KEY node_key = lwa_temp-node-relatkey
                       INTO lwa_temp.

      IF syst-subrc = 0.
        lo_child = selected_container-&gt;zif_ic_composite~get_child_by_path( lwa_temp-path ).

        IF lo_child IS BOUND
           AND ( lo_child-&gt;get_type( ) = zcl_ic_impl_context=&gt;c_impl_context_type
              OR lo_child-&gt;get_type( ) = zcl_ic_impl_context=&gt;c_inj_type ).

          IF lo_child IS BOUND.
            rt_context ?= lo_child.
          ENDIF.
        ENDIF.

      ELSE.
        lwa_temp-node-relatkey = 0.
      ENDIF.

    ENDWHILE.

  ENDMETHOD.                    &quot;select_ctx_from_inj_node

  METHOD selected_comp_by_path.
*   importing im_path type zic_path,

    IF selected_container IS BOUND.
      selected_component = selected_container-&gt;zif_ic_composite~get_child_by_path( im_path ).
    ENDIF.

  ENDMETHOD.                    &quot;selected_comp_by_path
  METHOD on_retrieve_container_clicked.
*   IMPORTING ex_search_dynpro TYPE REF TO lcl_search_dynpro
*             ex_cont_nr TYPE zic_container-cont_nr
    DATA lo_container TYPE REF TO zif_ic_composite.

    lo_container ?= zcl_ic_container=&gt;create( i_object_nr = ex_cont_nr ).

    zcl_ic_persist=&gt;select_tree( &quot;TODO EXPORTING i_until_object = zcl_ic_object=&gt;c_class_type
                                 CHANGING ch_ic_parent = lo_container ).

    selected_container ?= lo_container.

    REFRESH cont_tree_nodes.
    create_ic_tree( EXPORTING im_ic_comp = selected_container
                    CHANGING ch_tree = ic_tree_dynpro-&gt;ic_tree ).
  ENDMETHOD.                    &quot;on_retrieve_container_clicked

  METHOD on_create_container_clicked.
*   IMPORTING ex_search_dynpro ex_cont_nr ex_cont_name,
    DATA lo_center_dynpro TYPE REF TO zcl_ic_sub_dynpro_base.

*   Show container Add screen
    lo_center_dynpro = lcl_ic_create_cont_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                          im_main_dynpro = main_dynpro ).

    IF lo_center_dynpro IS NOT INITIAL.
      dynpro_manager-&gt;set_current_dynpro( im_sub_scrn_area = lo_center_dynpro-&gt;get_scrn_area( )
                                          im_dynpro = lo_center_dynpro ).
    ENDIF.

  ENDMETHOD.                    &quot;on_create_container_clicked

  METHOD add_container_in_tree.
* importing cont_nr type zic_container-cont_nr.
*    TODO ???
  ENDMETHOD.                    &quot;add_container_in_tree

  METHOD get_selected_container.
*  RETURNING VALUE(rt_container) type ref to zlc_ic_container.

    rt_container = selected_container.
  ENDMETHOD.                    &quot;get_selected_container

  METHOD get_selected_comp.
*   returning value(rt_comp) type ref to zif_ic_component.
    rt_comp = selected_component.
  ENDMETHOD.                    &quot;get_selected_comp

  METHOD show_selected_component.
    DATA: ic_center_dynpro TYPE REF TO zcl_ic_sub_dynpro_base.

    IF selected_component IS BOUND.

      CASE selected_component-&gt;get_type( ).
        WHEN zcl_ic_object=&gt;c_container_type.
          zcl_ic_persist=&gt;select( EXPORTING i_ic_comp = selected_component ).

          ic_center_dynpro = lcl_ic_container_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                              im_main_dynpro = main_dynpro
                                                              im_ic_component = selected_component ).
        WHEN zcl_ic_object=&gt;c_cont_context_type.
          zcl_ic_persist=&gt;select( EXPORTING i_ic_comp = selected_component ).

          ic_center_dynpro = lcl_ic_cont_ctx_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                              im_main_dynpro = main_dynpro
                                                              im_ic_component = selected_component ).
        WHEN zcl_ic_object=&gt;c_impl_context_type.
          zcl_ic_persist=&gt;select( EXPORTING i_ic_comp = selected_component ).

          ic_center_dynpro = lcl_ic_impl_ctx_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                             im_main_dynpro = main_dynpro
                                                             im_ic_component = selected_component ).
        WHEN zcl_ic_object=&gt;c_inj_type.
          zcl_ic_persist=&gt;select( EXPORTING i_ic_comp = selected_component ).

          ic_center_dynpro = lcl_ic_inj_type_dynpro=&gt;create_inj_type_dynpro( im_sub_scrn_area = c_subscr_center_top
                                                                             im_main_dynpro = main_dynpro
                                                                             im_ic_component = selected_component ).
        WHEN zcl_ic_object=&gt;c_inj_obj_type.
          zcl_ic_persist=&gt;select( EXPORTING i_ic_comp = selected_component ).

          ic_center_dynpro = lcl_ic_inj_obj_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                            im_main_dynpro = main_dynpro
                                                            im_ic_component = selected_component ).
        WHEN zcl_ic_object=&gt;c_class_type.
          zcl_ic_persist=&gt;select( EXPORTING i_ic_comp = selected_component ).

          ic_center_dynpro = lcl_ic_class_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                          im_main_dynpro = main_dynpro
                                                          im_ic_component = selected_component ).
        WHEN zcl_ic_object=&gt;c_method_type.
          zcl_ic_persist=&gt;select( EXPORTING i_ic_comp = selected_component ).

          ic_center_dynpro = lcl_ic_method_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                          im_main_dynpro = main_dynpro
                                                          im_ic_component = selected_component ).
        WHEN zcl_ic_object=&gt;c_class_attrib_type.
          zcl_ic_persist=&gt;select( EXPORTING i_ic_comp = selected_component ).

          ic_center_dynpro = lcl_ic_class_attrib_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                                 im_main_dynpro = main_dynpro
                                                                 im_ic_component = selected_component ).
        WHEN zcl_ic_object=&gt;c_method_param_type.
          zcl_ic_persist=&gt;select( EXPORTING i_ic_comp = selected_component ).

          ic_center_dynpro = lcl_ic_method_param_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                                 im_main_dynpro = main_dynpro
                                                                 im_ic_component = selected_component ).
      ENDCASE.

      IF ic_center_dynpro IS BOUND.
        dynpro_manager-&gt;set_current_dynpro( im_sub_scrn_area = ic_center_dynpro-&gt;get_scrn_area( )
                                            im_dynpro =  ic_center_dynpro ).
        dynpro_manager-&gt;refresh_main_dynpro( ).
      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;show_selected_component

  METHOD on_node_double_click.
*   IMPORTING node_key
    selected_comp_by_node_key( im_node_key = node_key ).

    show_selected_component( ).
  ENDMETHOD.                    &quot;on_node_double_click

  METHOD on_item_double_click.
*   importing node_key.

    on_node_double_click( node_key ).
  ENDMETHOD.                    &quot;on_item_double_click

  METHOD on_node_ctx_menu_req.
*   importing NODE_KEY type TV_NODEKEY
*             MENU type ref to CL_CTMENU
    DATA: lo_menu TYPE REF TO cl_ctmenu,
          l_comp_type TYPE zic_object_nr.
*TODO HARDCODED TEXT IN MESSAGE CLASS
    IF menu IS NOT BOUND.
      RETURN.
    ENDIF.

    lo_menu = menu.
    selected_comp_by_node_key( im_node_key = node_key ).

    IF get_selected_comp( ) IS INITIAL.
      RETURN.
    ENDIF.

    CASE get_selected_comp( )-&gt;get_type( ).
      WHEN zcl_ic_object=&gt;c_container_type.
        CALL METHOD lo_menu-&gt;add_function
          EXPORTING
            fcode = c_action_create_cont_ctx
            text  = &apos;Create context&apos;.
      WHEN zcl_ic_object=&gt;c_cont_context_type.
        CALL METHOD lo_menu-&gt;add_function
          EXPORTING
            fcode = c_action_create_cont_ctx
            text  = &apos;Create context&apos;.

        CALL METHOD lo_menu-&gt;add_function
          EXPORTING
            fcode = c_action_create_inj_ctx
            text  = &apos;Create Injection Context&apos;.
      WHEN zcl_ic_object=&gt;c_impl_context_type.
        CALL METHOD lo_menu-&gt;add_function
          EXPORTING
            fcode = c_action_create_ic_class
            text  = &apos;Create IC Class&apos;.

      WHEN zcl_ic_object=&gt;c_class_type.
        CALL METHOD lo_menu-&gt;add_function
          EXPORTING
            fcode = c_action_create_ic_attrib
            text  = &apos;Create IC Class Attrib&apos;.

        CALL METHOD lo_menu-&gt;add_function
          EXPORTING
            fcode = c_action_create_ic_method
            text  = &apos;Create IC Method&apos;.
      WHEN zcl_ic_object=&gt;c_method_type.
        CALL METHOD lo_menu-&gt;add_function
          EXPORTING
            fcode = c_action_create_ic_methodparam
            text  = &apos;Create IC Method Param&apos;.
      WHEN zcl_ic_object=&gt;c_method_param_type
        OR zcl_ic_object=&gt;c_class_attrib_type.

        CALL METHOD lo_menu-&gt;add_function
          EXPORTING
            fcode = c_action_create_ic_value
            text  = &apos;Create IC Value&apos;.

    ENDCASE.

  ENDMETHOD.                    &quot;on_node_ctx_menu_req

  METHOD on_item_ctx_menu_req.
*   importing NODE_KEY type TV_NODEKEY
*             MENU type ref to CL_CTMENU
    on_node_ctx_menu_req( EXPORTING node_key = node_key
                                    menu = menu ).

  ENDMETHOD.                    &quot;on_handle_NODE_Ctx_MENU_REQ

  METHOD on_node_ctx_menu_sel.
*   importing im_NODE_KEY type TV_NODEKEY
*             fcode type sy-ucomm
    DATA: lo_center_dynpro TYPE REF TO zcl_ic_sub_dynpro_base,
          lo_parent TYPE REF TO zif_ic_composite.

    selected_comp_by_node_key( node_key ).

    IF selected_component-&gt;is_parent( ) = abap_true.
      lo_parent ?= selected_component.
    ENDIF.

*   Show container Add screen
    CASE fcode.
      WHEN c_action_create_cont_ctx.

        lo_center_dynpro = lcl_ic_create_contctx_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                                 im_main_dynpro = main_dynpro
                                                                 im_ic_parent = lo_parent ).
      WHEN c_action_create_inj_ctx.

        lo_center_dynpro = lcl_ic_create_injctx_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                                im_main_dynpro = main_dynpro
                                                                im_ic_parent = lo_parent ).
      WHEN c_action_create_ic_class.
        lo_center_dynpro = lcl_ic_create_class_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                               im_main_dynpro = main_dynpro
                                                               im_ic_parent = lo_parent ).
      WHEN c_action_create_ic_attrib.
        lo_center_dynpro = lcl_ic_create_attrib_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                                im_main_dynpro = main_dynpro
                                                                im_ic_parent = lo_parent ).
      WHEN c_action_create_ic_method.
        lo_center_dynpro = lcl_ic_create_method_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                                im_main_dynpro = main_dynpro
                                                                im_ic_parent = lo_parent ).
      WHEN c_action_create_ic_methodparam.
        lo_center_dynpro = lcl_ic_create_param_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                               im_main_dynpro = main_dynpro
                                                               im_ic_parent = lo_parent ).
      WHEN c_action_create_ic_value.
        DATA: lo_holder TYPE REF TO zif_ic_valueholder,
              lo_class_descr TYPE REF TO cl_abap_classdescr.

        lo_class_descr ?= cl_abap_classdescr=&gt;describe_by_object_ref( selected_component ).

*       TODO IF lo_class_descr-&gt;applies_to_class( &apos;ZIF_IC_VALUEHOLDER&apos; ) = abap_true .
        lo_holder ?= selected_component.
        lo_center_dynpro = lcl_ic_create_value_dynpro=&gt;create( im_sub_scrn_area = c_subscr_center_top
                                                               im_main_dynpro = main_dynpro
                                                               im_ic_holder = lo_holder ).
*        ELSE.
*          &quot;TODO error
*        ENDIF.

    ENDCASE.

    IF lo_center_dynpro IS BOUND.

      dynpro_manager-&gt;set_current_dynpro( im_sub_scrn_area = lo_center_dynpro-&gt;get_scrn_area( )
                                          im_dynpro = lo_center_dynpro ).

      dynpro_manager-&gt;refresh_main_dynpro( ).
    ENDIF.

  ENDMETHOD.                    &quot;on_node_ctx_menu_sel

  METHOD on_item_ctx_menu_sel.
*   importing NODE_KEY type TV_NODEKEY
*             fcode type sy-ucomm
    on_node_ctx_menu_sel( EXPORTING node_key = node_key
                                    fcode = fcode ).
  ENDMETHOD.                    &quot;on_node_ctx_menu_sel

  METHOD on_ic_exec_clicked.
    DATA: lo_dynpro TYPE REF TO lcl_ic_impl_ctx_dynpro,
          lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lwa_inject TYPE zif_ic_service=&gt;t_object,
          lit_inject TYPE zif_ic_service=&gt;t_object_table,
          lo_error TYPE REF TO zcx_ic_error.

    lo_dynpro ?= zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro_by_name(
                                          im_dynpro_nr = lcl_ic_impl_ctx_dynpro=&gt;c_dynpro_nr
                                          im_program = lcl_ic_impl_ctx_dynpro=&gt;c_prog_name ).

    IF lo_dynpro IS BOUND.
      lo_impl_ctx ?= selected_container-&gt;zif_ic_composite~get_child_by_path( i_path = lo_dynpro-&gt;get_ic_path( ) ).
    ENDIF.

    IF lo_impl_ctx IS BOUND.
      REFRESH lit_inject.

      TRY.
          zcl_ic_service=&gt;inject_to_table( EXPORTING i_context_path = lo_impl_ctx-&gt;get_path( )
                                           CHANGING ch_objects = lit_inject ).
        CATCH zcx_ic_error INTO lo_error.
          MESSAGE lo_error TYPE zif_ic_validate=&gt;c_error.
      ENDTRY.

      LOOP AT lit_inject INTO lwa_inject.
        DATA l_image TYPE tv_image.

        l_image = icon_oo_object.

        IF lwa_inject-object IS BOUND.
          DATA: l_node_key TYPE tv_nodekey,
                l_item_name TYPE tv_itmname,
                l_tree_node TYPE lcl_ic_application=&gt;t_column_tree_node.

          READ TABLE cont_tree_nodes WITH KEY path = lwa_inject-path
                                     INTO l_tree_node.

          IF l_tree_node IS NOT INITIAL.

            ic_tree_dynpro-&gt;ic_tree-&gt;item_set_t_image(
                         node_key = l_tree_node-node_key
                         item_name = lcl_tree_dynpro=&gt;c_column1_comp
                         t_image = l_image ).
          ENDIF.

        ENDIF.

      ENDLOOP.

    ENDIF.

  ENDMETHOD.                    &quot;ON_IC_EXEC_CLICKED

  METHOD on_ic_debug_clicked.
    zcl_ic_service=&gt;set_debug_on( ).
    on_ic_exec_clicked( ).
    zcl_ic_service=&gt;set_debug_off( ).
  ENDMETHOD.                    &quot;on_ic_debug_clicked

  METHOD on_ic_edit_clicked.
    DATA: lo_dynpro TYPE REF TO zcl_ic_sub_dynpro_base,
          lo_edit_dynpro TYPE REF TO zcl_ic_sub_edit_dyn_base.

    lo_dynpro ?= zcl_ic_dynpro_manager=&gt;instance( )-&gt;get_current_dynpro( im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_center_top ).

    IF lo_dynpro IS BOUND
      AND lo_dynpro-&gt;is_screen_edit( ) = abap_true.

      lo_edit_dynpro ?= lo_dynpro.

      IF lo_edit_dynpro-&gt;get_screen_mode( ) = zcl_ic_sub_edit_dyn_base=&gt;c_mode_display.
        lo_edit_dynpro-&gt;set_screen_mode( zcl_ic_sub_edit_dyn_base=&gt;c_mode_edit ).
      ELSEIF lo_edit_dynpro-&gt;get_screen_mode( ) = zcl_ic_sub_edit_dyn_base=&gt;c_mode_edit .
        lo_edit_dynpro-&gt;set_screen_mode( zcl_ic_sub_edit_dyn_base=&gt;c_mode_display ).
      ENDIF.

    ENDIF.

  ENDMETHOD.                    &quot;on_ic_edit_clicked

  METHOD on_ic_save_clicked.

  ENDMETHOD.                    &quot;on_ic_save_clicked

  METHOD on_ic_check_clicked.

  ENDMETHOD.                    &quot;on_ic_check_clicked

  METHOD on_ic_back_clicked.
    command_manager-&gt;rollback( ).
  ENDMETHOD.                    &quot;ON_IC_BACK_CLICKED

  METHOD on_show_ic_comp.
*   IMPORTING value(ex_path) type zic_path
    DATA lo_command TYPE REF TO zif_ic_command.

    selected_comp_by_path( ex_path ).

    lo_command = lcl_show_sub_dynpro_cmd=&gt;create(
                                     im_sub_scrn_area = c_subscr_center_top
                                     im_main_dynpro = main_dynpro
                                     im_ic_component = selected_component ).

    command_manager-&gt;execute_command( lo_command ).

  ENDMETHOD.                    &quot;on_show_ic_comp

  METHOD on_search_class.
    break bcuser.
  ENDMETHOD.                    &quot;ON_search_CLASS
ENDCLASS.                    &quot;lcl_ic_application IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_main_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_main_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_application TYPE REF TO lcl_ic_application
*   RETURNING value(rt_dynpro) TYPE zcl_ic_main_dynpro_base.
    CREATE OBJECT rt_dynpro
      EXPORTING
        im_application = im_application.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   importing im_application type ref to lcl_ic_application,
    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name ).

    application = im_application.
  ENDMETHOD.                    &quot;constructor

  METHOD handle_pai.
    super-&gt;handle_pai( im_action = im_action ).

    CASE im_action.
      WHEN c_action_ic_exec.
        RAISE EVENT ic_exec_clicked.
      WHEN c_action_ic_debug.
        RAISE EVENT ic_debug_clicked.
      WHEN c_action_ic_edit.
        RAISE EVENT ic_edit_clicked.
      WHEN c_action_ic_save.
        RAISE EVENT ic_save_clicked.
      WHEN c_action_ic_check.
        RAISE EVENT ic_check_clicked.
      WHEN c_action_ic_back.
        RAISE EVENT ic_back_clicked.
    ENDCASE.

  ENDMETHOD.                    &quot;handle_pai

  METHOD get_application.
*   RETURNING VALUE(rt_application) type ref to lcl_ic_application.
    rt_application = application.
  ENDMETHOD.                    &quot;get_application

ENDCLASS.                    &quot;lcl_main_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_dynpro_utils IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_dynpro_utils IMPLEMENTATION.

  METHOD parse_class_to_combo.
*   IMPORTING  im_impl_ctx TYPE REF TO zcl_ic_impl_context
*              im_class TYPE REF TO zcl_ic_class OPTIONAL
*              im_method TYPE REF TO zcl_ic_method OPTIONAL
*              im_param TYPE REF TO zcl_ic_method_param OPTIONAL
*              im_attrib type ref to zcl_ic_class_attrib optional
*              im_class_combo_id TYPE vrm_id
*              im_method_combo_id TYPE vrm_id OPTIONAL
*              im_param_combo_id TYPE vrm_id OPTIONAL
*              im_attrib_combo_id type vrm_id optional
*    CHANGING  ch_class_combo_val TYPE string
*              ch_method_combo_val TYPE string OPTIONAL
*              ch_param_combo_val TYPE string OPTIONAL
*              ch_attrib_combo_val type string OPTIONAL.
    DATA: lit_value  TYPE vrm_values,
          lwa_value TYPE vrm_value,
          lit_classes TYPE zcl_ic_class=&gt;ty_classes,
          lo_class TYPE zcl_ic_class=&gt;ty_class,
          lit_methods TYPE zcl_ic_method=&gt;ty_methods,
          lo_method TYPE zcl_ic_method=&gt;ty_method,
          lit_params TYPE zcl_ic_method_param=&gt;ty_method_params,
          lo_param TYPE zcl_ic_method_param=&gt;ty_method_param,
          lit_attribs TYPE zcl_ic_class_attrib=&gt;ty_class_attribs,
          lo_attrib TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

*   CLASS
*   Fill combobox with class name
    REFRESH lit_value.
    CLEAR lwa_value.

    IF im_impl_ctx IS NOT BOUND.
      RETURN.
    ENDIF.

    im_impl_ctx-&gt;get_classes( IMPORTING e_classes = lit_classes ).

    LOOP AT lit_classes INTO lo_class.
      lwa_value-key = lo_class-&gt;get_object_nr( ).
      lwa_value-text =  lo_class-&gt;get_name( ).

      APPEND lwa_value TO lit_value.
    ENDLOOP.

    CALL FUNCTION &apos;VRM_SET_VALUES&apos;
      EXPORTING
        id              = im_class_combo_id
        values          = lit_value
      EXCEPTIONS
        id_illegal_name = 1
        OTHERS          = 2.
    IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO ErrorA
    ENDIF.

    IF im_class IS BOUND.
      ch_class_combo_val = im_class-&gt;get_object_nr( ).
    ELSE.
      RETURN.
    ENDIF.

    REFRESH lit_value.
    CLEAR lwa_value.

*   Methods
    IF im_method_combo_id IS NOT INITIAL.
      im_class-&gt;get_methods( IMPORTING e_methods = lit_methods ).

      LOOP AT lit_methods INTO lo_method.
        lwa_value-key = lo_method-&gt;get_object_nr( ).
        lwa_value-text =  lo_method-&gt;get_name( ).

        APPEND lwa_value TO lit_value.
      ENDLOOP.

      CALL FUNCTION &apos;VRM_SET_VALUES&apos;
        EXPORTING
          id              = im_method_combo_id
          values          = lit_value
        EXCEPTIONS
          id_illegal_name = 1
          OTHERS          = 2.
      IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO ErrorA
      ENDIF.

      IF im_method IS BOUND.
        ch_method_combo_val = im_method-&gt;get_object_nr( ).
      ENDIF.

*   PARAMS
      IF im_method IS NOT BOUND
        OR im_param_combo_id IS INITIAL.
        RETURN.
      ENDIF.

*   Fill combobox with param name
      REFRESH lit_value.
      CLEAR lwa_value.

      im_method-&gt;get_params( IMPORTING e_method_params = lit_params ).

      LOOP AT lit_params INTO lo_param.
        lwa_value-key = lo_param-&gt;get_object_nr( ).
        lwa_value-text =  lo_param-&gt;get_name( ).

        APPEND lwa_value TO lit_value.
      ENDLOOP.

      CALL FUNCTION &apos;VRM_SET_VALUES&apos;
        EXPORTING
          id              = im_param_combo_id
          values          = lit_value
        EXCEPTIONS
          id_illegal_name = 1
          OTHERS          = 2.
      IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO ErrorA
      ENDIF.

      IF im_param IS BOUND.
        ch_param_combo_val = im_param-&gt;get_object_nr( ).
      ENDIF.
    ENDIF.

*   Attributes
    IF im_attrib_combo_id IS NOT INITIAL.
      im_class-&gt;get_attribs( IMPORTING e_attribs = lit_attribs ).

      LOOP AT lit_attribs INTO lo_attrib.
        lwa_value-key = lo_attrib-&gt;get_object_nr( ).
        lwa_value-text =  lo_attrib-&gt;get_name( ).

        APPEND lwa_value TO lit_value.
      ENDLOOP.

      CALL FUNCTION &apos;VRM_SET_VALUES&apos;
        EXPORTING
          id              = im_attrib_combo_id
          values          = lit_value
        EXCEPTIONS
          id_illegal_name = 1
          OTHERS          = 2.
      IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO ErrorA
      ENDIF.

      IF im_attrib IS BOUND.
        ch_attrib_combo_val = im_attrib-&gt;get_object_nr( ).
      ENDIF.

    ENDIF.

  ENDMETHOD.                    &quot;parse_class_to_combo

  METHOD parse_inj_obj_to_combo.
*   IMPORTING im_inj_obj TYPE REF TO zcl_ic_inj_object.
*             im_inj_obj_id TYPE vrm_id
    DATA: lit_value  TYPE vrm_values,
          lwa_value TYPE vrm_value,
          lit_inj_obj TYPE zcl_ic_inj_object=&gt;ty_inj_objects,
          lo_inj_obj TYPE zcl_ic_inj_object=&gt;ty_inj_object.

*   Fill combobox with class name
    REFRESH lit_value.
    CLEAR lwa_value.

    IF im_inj_obj-&gt;get_impl_ctx( ) IS NOT BOUND.
      RETURN.
    ENDIF.

    im_inj_obj-&gt;get_impl_ctx( )-&gt;get_inj_objects( IMPORTING ex_inj_objects = lit_inj_obj ).

    LOOP AT lit_inj_obj INTO lo_inj_obj.
      lwa_value-key = lo_inj_obj-&gt;get_object_nr( ).
      lwa_value-text = lo_inj_obj-&gt;get_name( ).

      APPEND lwa_value TO lit_value.
    ENDLOOP.

    CALL FUNCTION &apos;VRM_SET_VALUES&apos;
      EXPORTING
        id              = im_inj_obj_id
        values          = lit_value
      EXCEPTIONS
        id_illegal_name = 1
        OTHERS          = 2.
    IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO Error
    ENDIF.

    IF im_inj_obj IS BOUND.
      ch_inj_obj_val = im_inj_obj-&gt;get_object_nr( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_inj_obj_to_combo
ENDCLASS.                    &quot;lcl_ic_dynpro_utils IMPLEMENTATION



*----------------------------------------------------------------------*
*       CLASS lcl_ic_sub_dynpro_comp_base IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_sub_dynpro_comp_base IMPLEMENTATION.

  METHOD constructor.
*   IMPORTING im_dynpro_nr TYPE sydynnr
*             im_program_name TYPE syst-cprog
*             IM_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base,
*             im_ic_component type ref to zif_ic_component
    super-&gt;constructor( im_dynpro_nr = im_dynpro_nr
                        im_program_name = im_program_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

    ic_component = im_ic_component.

    IF ic_component IS BOUND.
      path = ic_component-&gt;get_path( ).

      IF ic_component-&gt;get_parent( ) IS BOUND.
        parent_path = ic_component-&gt;get_parent( )-&gt;get_path( ).
      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;constructor

  METHOD handle_pai.
    super-&gt;handle_pai( im_action = im_action ).

    CASE im_action.
      WHEN lcl_main_dynpro=&gt;c_action_ic_save.

        IF get_screen_mode( ) = zcl_ic_sub_edit_dyn_base=&gt;c_mode_edit
            OR get_screen_mode( ) = zcl_ic_sub_edit_dyn_base=&gt;c_mode_add.
          save_component( ).
        ELSE.
          &quot;TODO message only save in edit mode
        ENDIF.
      WHEN lcl_main_dynpro=&gt;c_action_ic_check.
        check_component( ).
    ENDCASE.

  ENDMETHOD.                    &quot;handle_pai

  METHOD parse_comp_to_dyn.

    IF ic_component IS BOUND.
      object_nr = ic_component-&gt;get_object_nr( ).
      name = ic_component-&gt;get_name( ).
      description = ic_component-&gt;get_description( ).
      rank = ic_component-&gt;get_rank( ).

      IF ic_component-&gt;get_parent( ) IS BOUND.
        parent_ctx = ic_component-&gt;get_parent( )-&gt;get_path( ).
      ENDIF.

    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    &quot;TODO ADD???    DATA: lo_ic_obj TYPE REF TO zcl_ic_object.
    &quot;TODO??    lo_ic_obj = zcl_ic_object=&gt;instance( i_obj_type = ic_component-&gt;get_type( ) ).
    IF ic_component IS BOUND.
      ic_component-&gt;set_name( name ).
      ic_component-&gt;set_description( description ).
      ic_component-&gt;set_rank( rank ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD before_save_component.
  ENDMETHOD.                    &quot;before_save_component

  METHOD after_save_component.
  ENDMETHOD.                    &quot;after_save_componenT

  METHOD save_component.

    before_save_component( ).
    parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      IF get_screen_mode( ) = c_mode_edit
        OR ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_container_type.

        zcl_ic_persist=&gt;save( ic_component ).
      ELSEIF get_screen_mode( ) = c_mode_add.
        zcl_ic_persist=&gt;add( CHANGING ch_ic_comp = ic_component ).
      ENDIF.
    ELSE.
      &quot;TODO throw error.
    ENDIF.

    after_save_component( ).

  ENDMETHOD.                    &quot;save_component

  METHOD check_component.
    DATA lo_validate TYPE REF TO zif_ic_validate.
    parse_dyn_to_comp( ).

    lo_validate = zcl_ic_service=&gt;check_component_tree( ic_component ).
    zcl_ic_dynpro_manager=&gt;instance( )-&gt;show_validation( lo_validate ).

  ENDMETHOD.                    &quot;check_component

  METHOD get_ic_path.
*   RETURNING VALUE(RT_PATH) TYPE zic_path.

    IF ic_component IS BOUND.
      rt_path = ic_component-&gt;get_path( ).
    ENDIF.

  ENDMETHOD.                    &quot;GET_IC_PATH

  METHOD get_main_lcl_dynpro.
*   RETURNING VALUE(rt_lcl_main_dynpro) type ref to lcl_main_dynpro.
    rt_lcl_main_dynpro ?= main_dynpro.
  ENDMETHOD.                    &quot;get_main_lcl_dynpro

ENDCLASS.                    &quot;lcl_ic_sub_dynpro_comp_base IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_add_sub_dynpro_comp IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_add_sub_dynpro_comp IMPLEMENTATION.

  METHOD constructor.
*   IMPORTING im_dynpro_nr TYPE sydynnr
*             im_program_name TYPE syst-cprog
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
*             im_ic_parent TYPE REF TO zif_ic_composite OPTIONAL,


    super-&gt;constructor( im_dynpro_nr = im_dynpro_nr
                        im_program_name = im_program_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

    set_screen_mode( zcl_ic_sub_edit_dyn_base=&gt;c_mode_add ).

    IF im_ic_parent IS BOUND.
      parent = im_ic_parent.
      parent_path = im_ic_parent-&gt;get_path( ).
    ENDIF.

  ENDMETHOD.                    &quot;constructor

  METHOD create_component.
*   RETURNING value(rt_comp) TYPE REF TO zif_ic_component,
    DATA: lo_comp TYPE REF TO zif_ic_component,
          lo_parent TYPE REF TO zif_ic_composite.

    lo_comp = get_main_lcl_dynpro( )-&gt;get_application( )-&gt;get_selected_comp( ).

    IF lo_comp IS BOUND
      AND lo_comp-&gt;is_parent( ) = abap_true.

      lo_parent ?= lo_comp.
      rt_comp ?= zcl_ic_object=&gt;instance( i_parent = lo_parent
                                          i_obj_type = get_comp_type( ) ).
    ENDIF.

  ENDMETHOD.                    &quot;create_component

  METHOD before_save_component.
    super-&gt;before_save_component( ).

    ic_component = create_component( ).
  ENDMETHOD.                    &quot;before_save_component

  METHOD get_parent.
* RETURNING VALUE(rt_parent) type ref to zif_ic_composite,
    rt_parent = parent.
  ENDMETHOD.                    &quot;get_parent

  METHOD set_parent.
*   IMPORTING im_parent type ref to zif_if_composite.
    parent =  im_parent.
  ENDMETHOD.                    &quot;set_parent

ENDCLASS.                    &quot;lcl_ic_add_sub_dynpro_comp IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_dynpro_100 IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_search_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_dynpro_base
*   RETURNING value(rt_dynpro) TYPE zcl_ic_main_dynpro_base.
    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

  ENDMETHOD.                    &quot;constructor

  METHOD handle_pai.
    super-&gt;handle_pai( im_action = im_action ).

    CASE im_action.
      WHEN c_action_retrieve_cont.
        RAISE EVENT retrieve_container_clicked EXPORTING ex_search_dynpro = me
                                                         ex_cont_nr = cont_nr.
      WHEN c_action_create_cont.
        RAISE EVENT create_container_clicked EXPORTING ex_search_dynpro = me.
    ENDCASE.

  ENDMETHOD.                    &quot;handle_pai

ENDCLASS.                    &quot;lcl_dynpro_100 IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_tree_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_tree_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_dynpro_base
*   RETURNING value(rt_dynpro) TYPE zcl_ic_main_dynpro_base.
    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
    DATA: lwa_event        TYPE cntl_simple_event,
          lit_events       TYPE cntl_simple_events.

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

    CREATE OBJECT ic_tree_container
      EXPORTING
        container_name = &apos;IC_CONT_TREE&apos;
        dynnr = get_main_dynpro( )-&gt;get_dynpro_nr( )
        repid = sy-cprog.

*   setup the hierarchy header
    CONSTANTS: lc_msg_id TYPE sy-msgid VALUE &apos;ZIC_MESSAGES&apos;,
               lc_msg_type TYPE sy-msgty VALUE &apos;I&apos;,
               lc_msg_nr TYPE sy-msgno VALUE &apos;000&apos;,
               lc_header_width TYPE int4 VALUE 30.

    DATA: lwa_hierarchy_header TYPE treev_hhdr.

    MESSAGE ID lc_msg_id TYPE lc_msg_type NUMBER lc_msg_nr INTO lwa_hierarchy_header-heading.
    lwa_hierarchy_header-width = lc_header_width.

    CREATE OBJECT ic_tree
      EXPORTING
        parent                      = ic_tree_container
        node_selection_mode         = cl_gui_column_tree=&gt;node_sel_mode_single
        item_selection              = abap_true
        hierarchy_column_name       = c_column1_comp
        hierarchy_header            = lwa_hierarchy_header
      EXCEPTIONS
        cntl_system_error           = 1
        create_error                = 2
        failed                      = 3
        illegal_node_selection_mode = 4
        lifetime_error              = 5.
    IF sy-subrc &lt;&gt; 0.
      &quot;TODO errorhandling.
    ENDIF.

*   register events
*   TODO look to delete some events
    lwa_event-eventid = cl_gui_column_tree=&gt;eventid_node_double_click.
    APPEND lwa_event TO lit_events.

    lwa_event-eventid = cl_gui_column_tree=&gt;eventid_item_double_click.
    APPEND lwa_event TO lit_events.

    lwa_event-eventid = cl_gui_column_tree=&gt;eventid_expand_no_children.
    APPEND lwa_event TO lit_events.

    lwa_event-eventid = cl_gui_column_tree=&gt;eventid_node_context_menu_req.
    APPEND lwa_event TO lit_events.

    lwa_event-eventid = cl_gui_column_tree=&gt;eventid_item_context_menu_req.
    APPEND lwa_event TO lit_events.

    ic_tree-&gt;set_registered_events( lit_events ).

  ENDMETHOD.                    &quot;constructor

ENDCLASS.                    &quot;lcl_tree_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_errors_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_errors_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*   RETURNING value(rt_dynpro) TYPE lcl_errors_dynpro.
    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

  ENDMETHOD.                    &quot;constructor

  METHOD format_to_alv_table.
*   IMPORTING im_msg_tab type zif_ic_validate=&gt;ty_message_tab
*   RETURNING ch_format_tab type ty_alv_tab.
    DATA: lwa_msg TYPE zif_ic_validate=&gt;ty_message,
          lwa_format TYPE ty_alv,
          l_nr TYPE i,
          l_path TYPE zic_path,
          l_previous_path TYPE zic_path,
          l_msg TYPE string.

    CLEAR: l_nr, l_path, l_previous_path.
    REFRESH ch_format_tab.

    LOOP AT im_msg_tab INTO lwa_msg.
      CLEAR lwa_format.

      l_path = lwa_msg-path.

      IF l_previous_path &lt;&gt; l_path.
        l_previous_path = l_path.
        lwa_format-msg = lwa_msg-path.

        APPEND lwa_format TO ch_format_tab.
      ENDIF.

      CASE lwa_msg-type.
        WHEN zif_ic_validate=&gt;c_error.
          lwa_format-icon = cl_icon=&gt;get_icon( i_name = c_icon_error ).
        WHEN  zif_ic_validate=&gt;c_warning.
          lwa_format-icon = cl_icon=&gt;get_icon( i_name = c_icon_warning ).
        WHEN  zif_ic_validate=&gt;c_info.
          lwa_format-icon = cl_icon=&gt;get_icon( i_name = c_icon_info ).
      ENDCASE.

      l_nr = l_nr + 1.
      lwa_format-nr = l_nr.

      MESSAGE ID lwa_msg-msg-msgid TYPE lwa_msg-type
                NUMBER lwa_msg-msg-msgno
                INTO l_msg
                WITH lwa_msg-msg-attr1 lwa_msg-msg-attr2
                     lwa_msg-msg-attr3 lwa_msg-msg-attr4.

      lwa_format-msg = l_msg.

      APPEND lwa_format TO ch_format_tab.
    ENDLOOP.

  ENDMETHOD.                    &quot;format_to_alv_table

  METHOD zif_ic_validating_dynpro~display.
    DATA: l_cont_name TYPE scrfname,
          lo_error TYPE REF TO cx_salv_no_new_data_allowed.

    IF gui_cont IS NOT BOUND.
      l_cont_name = c_cont_name.

      CREATE OBJECT gui_cont
        EXPORTING
          container_name = l_cont_name.
    ENDIF.

    IF validate IS BOUND.
      format_to_alv_table( EXPORTING im_msg_tab = validate-&gt;message_tab
                           CHANGING ch_format_tab = error_tab ).
    ELSE.
      validate-&gt;clear( ).
      REFRESH error_tab.
    ENDIF.

    TRY.
        IF alv_errors IS NOT BOUND.
          cl_salv_table=&gt;factory( EXPORTING r_container = gui_cont
                                            container_name = c_cont_name
                                  IMPORTING r_salv_table = alv_errors
                                  CHANGING t_table = error_tab ).
        ELSE.
          alv_errors-&gt;refresh( ).
          TRY.
              alv_errors-&gt;set_data( CHANGING t_table = error_tab ).
            CATCH cx_salv_no_new_data_allowed INTO lo_error.
              MESSAGE lo_error TYPE zif_ic_validate=&gt;c_error.
          ENDTRY.
        ENDIF.

        alv_errors-&gt;display( ).
      CATCH cx_salv_msg.
        &quot;TODO error handling
    ENDTRY.


  ENDMETHOD.                    &quot;display

  METHOD zif_ic_validating_dynpro~clear.
    CLEAR validate.
  ENDMETHOD.                    &quot;zif_ic_validating_dynpro~clear

  METHOD zif_ic_validating_dynpro~get_validate_object.
    rt_validate = validate.
  ENDMETHOD.                    &quot;zif_ic_validating_dynpro~get_validate_object

  METHOD zif_ic_validating_dynpro~set_validate_object.
    validate = im_validate.
  ENDMETHOD.                    &quot;zif_ic_validating_dynpro~set_validate_object
ENDCLASS.                    &quot;lcl_center_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_center_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_center_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.
    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).


  ENDMETHOD.                    &quot;constructor

ENDCLASS.                    &quot;lcl_center_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_container_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_container_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_container_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro
          im_ic_component  = im_ic_component.

    ELSE.
      &quot;TODO throw error
    ENDIF.
*TODO make config!!
*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.
      number = get_container( )-&gt;get_object_nr( ).
      cont_type = get_container( )-&gt;get_cont_type( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    &quot;TODO ADD???    DATA: lo_ic_obj TYPE REF TO zcl_ic_object.
    &quot;TODO??    lo_ic_obj = zcl_ic_object=&gt;instance( i_obj_type = ic_component-&gt;get_type( ) ).
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      DATA lo_cont TYPE REF TO zcl_ic_container.

      lo_cont ?= ic_component.
      lo_cont-&gt;set_cont_type( cont_type ).
    ENDIF.
  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_container.

    IF ic_component IS BOUND.
      rt_cont ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_container

ENDCLASS.                    &quot;lcl_ic_container_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_cont_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_cont_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.


    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.

*TODO make config!!
*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NUMBER&apos;.
    APPEND l_edit_field TO lit_edit_fields.
    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.
    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.
    l_edit_field = &apos;CONT_TYPE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

  ENDMETHOD.                    &quot;constructor

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.
      number = get_container( )-&gt;get_object_nr( ).
      cont_type = get_container( )-&gt;get_cont_type( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      DATA lo_cont TYPE REF TO zcl_ic_container.

      lo_cont = zcl_ic_container=&gt;create( i_object_nr = number ).
      lo_cont-&gt;set_cont_type( cont_type ).

      ic_component =  lo_cont.
      super-&gt;parse_dyn_to_comp( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD create_component.
*  RETURNING value(rt_comp) TYPE ref to zif_ic_component.

    rt_comp ?= zcl_ic_container=&gt;create( i_object_nr = number ).
  ENDMETHOD.                    &quot;create_component

  METHOD get_comp_type.
*   abstract RETURNING VALUE(rt_comp_type) type zic_obj_type.

    rt_comp_type = zcl_ic_object=&gt;c_container_type.
  ENDMETHOD.                    &quot;get_comp_type

  METHOD get_container.

    IF ic_component IS BOUND.
      rt_cont ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_container

ENDCLASS.                    &quot;lcl_ic_create_cont_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_contctx_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_contctx_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_parent type ref to zif_ic_composite
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.


    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_parent     = im_ic_parent.

*TODO make config!!
*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.
    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_parent TYPE REF TO zif_ic_composite,

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_parent = im_ic_parent ).

  ENDMETHOD.                    &quot;constructor

  METHOD get_comp_type.
*   abstract RETURNING VALUE(rt_comp_type) type zic_obj_type.

    rt_comp_type = zcl_ic_object=&gt;c_cont_context_type.
  ENDMETHOD.                    &quot;get_comp_type

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).
  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_cont_ctx.
*   RETURNING value(rt_cont_ctx) TYPE REF TO zcl_ic_cont_context.

    IF ic_component IS BOUND.
      rt_cont_ctx ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_cont_ctx

ENDCLASS.                    &quot;lcl_ic_create_contctx_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_inj_obj_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_inj_obj_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_parent type ref to zif_ic_composite
*   RETURNING value(rt_dynpro) TYPE lcl_ic_create_inj_obj_dynpro.

    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_parent     = im_ic_parent.

*TODO make config!!
*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.
    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_parent TYPE REF TO zif_ic_composite,

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_parent = im_ic_parent ).

  ENDMETHOD.                    &quot;constructor

  METHOD get_comp_type.
*   abstract RETURNING VALUE(rt_comp_type) type zic_obj_type.

    rt_comp_type = zcl_ic_object=&gt;c_inj_obj_type.
  ENDMETHOD.                    &quot;get_comp_type

  METHOD weg_weg.&quot;TODO weg

  ENDMETHOD.                    &quot;weg_weg

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      DATA: lo_cont TYPE REF TO zcl_ic_container,
            lo_ctx TYPE REF TO zcl_ic_cont_context,
            lo_inj_type TYPE REF TO zcl_ic_inj_type.

      lo_cont ?= zcl_ic_object=&gt;instance( i_obj_type = zcl_ic_object=&gt;c_container_type ).
      lo_cont-&gt;zif_ic_component~set_object_nr( inj_type_cont_nr ).
      lo_cont-&gt;zif_ic_component~set_name( inj_type_cont_name ).

      lo_ctx ?= zcl_ic_object=&gt;instance( i_obj_type = zcl_ic_object=&gt;c_cont_context_type
                                         i_parent = lo_cont ).
      lo_ctx-&gt;zif_ic_component~set_object_nr( inj_type_ctx_nr ).
      lo_ctx-&gt;zif_ic_component~set_name( inj_type_ctx_name ).

      lo_inj_type ?= zcl_ic_object=&gt;instance( i_obj_type = zcl_ic_object=&gt;c_inj_type
                                              i_parent = lo_ctx ).
      lo_inj_type-&gt;zif_ic_component~set_object_nr( inj_type_ictx_nr ).
      lo_inj_type-&gt;zif_ic_component~set_name( inj_type_ictx_name ).

      get_inj_obj( )-&gt;set_inj_type( lo_inj_type ).
    ENDIF.
  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_inj_obj.
*  RETURNING value(rt_inj_obj) TYPE REF TO zcl_ic_inj_obj.

    IF ic_component IS BOUND.
      rt_inj_obj ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_cont_ctx

ENDCLASS.                    &quot;lcl_ic_create_inj_obj_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_injctx_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_injctx_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_parent type ref to zif_ic_composite
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.


    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_parent     = im_ic_parent.

*TODO make config!!
*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.
    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_parent TYPE REF TO zif_ic_composite,

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_parent = im_ic_parent ).

  ENDMETHOD.                    &quot;constructor

  METHOD get_comp_type.
*   abstract RETURNING VALUE(rt_comp_type) type zic_obj_type.

    rt_comp_type = zcl_ic_object=&gt;c_impl_context_type.
  ENDMETHOD.                    &quot;get_comp_type

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).
  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_inj_ctx.
*   RETURNING value(rt_inj_ctx) TYPE REF TO zcl_ic_impl_context.

    IF ic_component IS BOUND.
      rt_inj_ctx ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_inj_ctx

ENDCLASS.                    &quot;lcl_ic_create_injctx_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_class_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_class_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_parent type ref to zif_ic_composite
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.


    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_parent     = im_ic_parent.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;CLASS_NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;RETURN_CLASS_NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DEFAULT_CONSTR&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_parent TYPE REF TO zif_ic_composite,

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_parent = im_ic_parent ).

  ENDMETHOD.                    &quot;constructor

  METHOD get_comp_type.
*   abstract RETURNING VALUE(rt_comp_type) type zic_obj_type.

    rt_comp_type = zcl_ic_object=&gt;c_class_type.
  ENDMETHOD.                    &quot;get_comp_type

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.
      class_name = get_class( )-&gt;get_class_name( ).
      return_class_name = get_class( )-&gt;get_return_class_name( ).
      default_constr = get_class( )-&gt;has_default_constructor( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      DATA lo_class TYPE REF TO zcl_ic_class.

      lo_class ?= ic_component.
      lo_class-&gt;set_class_name( class_name ).
      lo_class-&gt;set_return_class_name( return_class_name ).
      lo_class-&gt;set_default_constructor( default_constr ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_class.
*   RETURNING value(rt_class) TYPE REF TO zcl_ic_class

    IF ic_component IS BOUND.
      rt_class ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_class
ENDCLASS.                    &quot;lcl_ic_create_class_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_attrib_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_attrib_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_parent type ref to zif_ic_composite
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.


    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_parent     = im_ic_parent.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_parent TYPE REF TO zif_ic_composite,

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_parent = im_ic_parent ).

  ENDMETHOD.                    &quot;constructor

  METHOD get_comp_type.
*   abstract RETURNING VALUE(rt_comp_type) type zic_obj_type.

    rt_comp_type = zcl_ic_object=&gt;c_class_attrib_type.
  ENDMETHOD.                    &quot;get_comp_type

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.
      value_type = get_class_attrib( )-&gt;get_ic_value( )-&gt;get_value_type( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.

    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_class_attrib.
*   RETURNING value(rt_attrib) TYPE REF TO zcl_ic_class_attrib.

    IF ic_component IS BOUND.
      rt_attrib ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_class_attrib
ENDCLASS.                    &quot;lcl_ic_create_attrib_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_method_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_method_dynpro IMPLEMENTATION  .
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_parent type ref to zif_ic_composite
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.


    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_parent     = im_ic_parent.

*   editable fields
    DATA: l_edit_field TYPE string,
         lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;METHOD_TYPE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DECLARE_LEVEL&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;ACTIVE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_parent TYPE REF TO zif_ic_composite,

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_parent = im_ic_parent ).

  ENDMETHOD.                    &quot;constructor

  METHOD get_comp_type.
*   abstract RETURNING VALUE(rt_comp_type) type zic_obj_type.

    rt_comp_type = zcl_ic_object=&gt;c_method_type.
  ENDMETHOD.                    &quot;get_comp_type

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.

      method_type = get_method( )-&gt;get_method_type( ).
      declare_level = get_method( )-&gt;get_declare_level( ).
      active = get_method( )-&gt;is_active( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      DATA lo_method TYPE REF TO zcl_ic_method.

      lo_method ?= ic_component.

      lo_method-&gt;set_method_type( method_type ).
      lo_method-&gt;set_is_active( active ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_method.
    &quot;   RETURNING value(rt_method) TYPE REF TO zcl_ic_method.

    IF ic_component IS BOUND.
      rt_method ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_method
ENDCLASS.                    &quot;lcl_ic_create_method_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_param_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_param_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_parent type ref to zif_ic_composite
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.


    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_parent     = im_ic_parent.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_parent TYPE REF TO zif_ic_composite,

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_parent = im_ic_parent ).

  ENDMETHOD.                    &quot;constructor

  METHOD get_comp_type.
*   abstract RETURNING VALUE(rt_comp_type) type zic_obj_type.

    rt_comp_type = zcl_ic_object=&gt;c_method_param_type.
  ENDMETHOD.                    &quot;get_comp_type

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.

    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.

    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_param.
*   RETURNING value(rt_param) TYPE REF TO zcl_ic_method_param.
    rt_param ?= ic_component.
  ENDMETHOD.                    &quot;get_param

ENDCLASS.                    &quot;lcl_ic_create_param_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_value_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_value_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_holder TYPE REF TO zif_ic_valueholder
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.

    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_holder     = im_ic_holder.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;VALUE_TYPE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sucrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_holder TYPE REF TO zif_ic_valueholder,
    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

    value_holder = im_ic_holder.

    holder_name = value_holder-&gt;get_name( ).
    holder_description = value_holder-&gt;get_description( ).
    holder_path = value_holder-&gt;get_path( ).

*   initial value type
    value_type = zcl_ic_value=&gt;c_value_type_data.
    create_sub_value_dynpro( value_type ).
  ENDMETHOD.                    &quot;constructor

  METHOD  handle_pbo.
    super-&gt;handle_pbo( ).

    previous_value_type = value_type.
  ENDMETHOD.                    &quot;handle_pbo

  METHOD handle_pai.
    super-&gt;handle_pai( im_action ).

    IF  previous_value_type &lt;&gt; value_type.

      previous_value_type = value_type.
      create_sub_value_dynpro( value_type ).
    ENDIF.

  ENDMETHOD.                    &quot;handle_pai

  METHOD get_comp_type.
*   abstract RETURNING VALUE(rt_comp_type) type zic_obj_type.
*TODO  mag weg?
    rt_comp_type = zcl_ic_object=&gt;c_value_type.
  ENDMETHOD.                    &quot;get_comp_type

  METHOD create_sub_value_dynpro.
*   importing im_value_type type zic_value_type

    value_dynpro ?= lcl_ic_create_subval_dyn_base=&gt;create(
                          im_value_type = im_value_type
                          im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value
                          im_create_value_dynpro = me ).

    zcl_ic_dynpro_manager=&gt;instance( )-&gt;set_current_dynpro( im_dynpro = value_dynpro
                                                            im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_create_value ).

  ENDMETHOD.                    &quot;create_value_dynpro

  METHOD get_value_dyn.
*   RETURNING VALUE(rt_value_dyn) type lcl_ic_value_edit_dynpro_base

    rt_value_dyn = value_dynpro.
  ENDMETHOD.                    &quot;get_value_dyn

  METHOD create_component.
*  RETURNING value(rt_comp) TYPE REF TO zif_ic_component
    DATA: l_sub_type TYPE string,
          lo_value TYPE REF TO zcl_ic_value.

    IF value_type IS INITIAL.
      &quot;TODO throw error
      RETURN.
    ENDIF.

    l_sub_type = value_type.
    lo_value ?= zcl_ic_object=&gt;instance( i_obj_type = zcl_ic_object=&gt;c_value_type
                                         i_sub_type = l_sub_type ).

    IF value_holder IS BOUND
      AND lo_value IS BOUND.

      value_holder-&gt;set_ic_value( lo_value ).
    ELSE.
      &quot;TODO throw error
    ENDIF.

    rt_comp = lo_value.
  ENDMETHOD.                    &quot;create_component

  METHOD before_save_component.
    super-&gt;before_save_component( ).

    IF value_holder IS BOUND
      AND get_value( ) IS BOUND.

      value_dynpro-&gt;parse_value_to_comp( ).
    ENDIF.

  ENDMETHOD.                    &quot;before_save_component

  METHOD after_save_component.

    IF value_holder IS BOUND
      AND get_value( ) IS BOUND.

      zcl_ic_persist=&gt;save( value_holder ).
    ENDIF.

  ENDMETHOD.                    &quot;after_save_component

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF get_value( ) IS BOUND.
      value_type = get_value( )-&gt;get_value_type( ).

      value_dynpro-&gt;parse_value_to_dyn( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF get_value( ) IS BOUND
      AND value_dynpro IS BOUND.

      value_dynpro-&gt;parse_value_to_comp( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_value.
    rt_value ?= ic_component.
  ENDMETHOD.                    &quot;get_param

  METHOD get_value_holder.
*     RETURNING VALUE(rt_val_holder) type ref to zif_ic_component.
    rt_val_holder = value_holder.
  ENDMETHOD.                    &quot;get_value_holder

  METHOD show_ic_value.
*   IMPORTING im_path type zic_path.
    RAISE EVENT show_ic_comp EXPORTING ex_path = im_path.
  ENDMETHOD.                    &quot;show_ic_value

ENDCLASS.                    &quot;lcl_ic_create_value_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_subval_dyn_base IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_subval_dyn_base IMPLEMENTATION.

  METHOD create.
*  IMPORTING im_value_type TYPE zic_value_type
*            im_sub_scrn_area TYPE scrfname OPTIONAL
*            im_create_value_dynpro TYPE REF TO lcl_ic_create_value_dynpro
*  RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_subval_dyn_base.

    CASE im_value_type.
      WHEN zcl_ic_value=&gt;c_value_type_data.
        rt_dynpro ?= lcl_ic_create_data_sub_dyn=&gt;create_sub_dyn(
                                        im_sub_scrn_area = im_sub_scrn_area
                                        im_main_dynpro = im_create_value_dynpro ).
      WHEN zcl_ic_value=&gt;c_value_type_table.
        rt_dynpro ?= lcl_ic_create_table_sub_dyn=&gt;create_sub_dyn(
                                        im_sub_scrn_area = im_sub_scrn_area
                                        im_main_dynpro = im_create_value_dynpro ).
      WHEN zcl_ic_value=&gt;c_value_type_object.
        rt_dynpro ?= lcl_ic_create_object_sub_dyn=&gt;create_sub_dyn(
                                        im_sub_scrn_area = im_sub_scrn_area
                                        im_main_dynpro = im_create_value_dynpro ).
      WHEN zcl_ic_value=&gt;c_value_type_param.
        rt_dynpro ?= lcl_ic_create_param_sub_dyn=&gt;create_sub_dyn(
                                        im_sub_scrn_area = im_sub_scrn_area
                                        im_main_dynpro = im_create_value_dynpro ).
      WHEN zcl_ic_value=&gt;c_value_type_attrib.
        rt_dynpro ?= lcl_ic_create_attrib_sub_dyn=&gt;create_sub_dyn(
                                        im_sub_scrn_area = im_sub_scrn_area
                                        im_main_dynpro = im_create_value_dynpro ).
    ENDCASE.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*    IMPORTING im_dynpro_nr TYPE sydynnr
*              im_program_name TYPE syst-cprog
*              im_sub_scrn_area TYPE scrfname OPTIONAL
*              im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro.

    super-&gt;constructor( im_dynpro_nr = im_dynpro_nr
                        im_program_name = im_program_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro-&gt;get_main_dynpro( ) ).

    parent_dynpro = im_main_dynpro.
    set_screen_mode( zcl_ic_sub_edit_dyn_base=&gt;c_mode_add ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_value_to_comp.
    parse_sub_value_to_comp( ).
  ENDMETHOD.                    &quot;parse_value_to_comp

  METHOD parse_value_to_dyn.
    parse_sub_value_to_dyn( ).
  ENDMETHOD.                    &quot;parse_value_to_dyn

ENDCLASS.                    &quot;lcl_ic_create_subval_dyn_base IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_data_sub_dyn IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_data_sub_dyn IMPLEMENTATION.

  METHOD create_sub_dyn.
*  IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*            im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
*  RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_data_sub_dyn.

    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;DATA_TYPE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DATA_VALUE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*     importing im_sub_scrn_area type scrfname optional
*               im_main_dynpro type ref to lcl_ic_create_value_dynpro.
    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_sub_value_to_dyn.

    IF get_data_value( ) IS BOUND.
      data_type = get_data_value( )-&gt;get_data_type( ).
      data_value = get_data_value( )-&gt;get_data_value( ).
    ENDIF.
  ENDMETHOD.                    &quot;parse_sub_value_to_dyn

  METHOD parse_sub_value_to_comp.

    IF get_data_value( ) IS BOUND.
      get_data_value( )-&gt;set_data_type( data_type ).
      get_data_value( )-&gt;set_data_value( data_value ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_sub_value_to_comp

  METHOD get_data_value.
*   RETURNING VALUE(rt_value) type zcl_ic_data.
    rt_value ?= parent_dynpro-&gt;get_value( ).
  ENDMETHOD.                    &quot;get_data_value

ENDCLASS.                    &quot;lcl_ic_create_data_sub_dyn IMPLEMENTATION


*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_table_sub_dyn IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_table_sub_dyn IMPLEMENTATION.

  METHOD create_sub_dyn.
*  IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*            im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
*  RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_table_sub_dyn.

    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;TABLE_NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*     importing im_sub_scrn_area type scrfname optional
*               im_main_dynpro type ref to lcl_ic_create_value_dynpro.
    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_sub_value_to_dyn.

    IF get_table_value( ) IS BOUND.
      table_name = get_table_value( )-&gt;get_table_name( ).
    ENDIF.
  ENDMETHOD.                    &quot;parse_sub_value_to_dyn

  METHOD parse_sub_value_to_comp.

    IF get_table_value( ) IS BOUND.
      get_table_value( )-&gt;set_table_name( table_name ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_sub_value_to_comp

  METHOD get_table_value.
*   RETURNING VALUE(rt_value) type zcl_ic_table.
    rt_value ?= parent_dynpro-&gt;get_value( ).
  ENDMETHOD.                    &quot;get_data_value

ENDCLASS.                    &quot;lcl_ic_create_table_sub_dyn IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_object_sub_dyn IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_object_sub_dyn IMPLEMENTATION.

  METHOD create_sub_dyn.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_object_sub_dyn.

    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_CLASS_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*     importing im_sub_scrn_area TYPE scrfname OPTIONAL
*               im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro,
    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

    parse_sub_value_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD handle_pai.
    super-&gt;handle_pai( im_action ).

    CASE im_action.
      WHEN c_show_ic_class_action.

        IF selected_class IS BOUND.

          DATA l_path TYPE zic_path.
          l_path = selected_class-&gt;get_path( ).

          parent_dynpro-&gt;show_ic_value( l_path ).
        ENDIF.

      WHEN c_search_class_action.
*TODO weg        RAISE EVENT search_class. &quot;TODO event wegwerken doet niks, is voor knop op dynpro
      WHEN c_ic_class_combo.
        parse_sub_value_to_comp( ).
        parse_sub_value_to_dyn( ).
    ENDCASE.

  ENDMETHOD.                    &quot;handle_pai

  METHOD parse_sub_value_to_dyn.

    IF get_ic_class_value( ) IS BOUND
      AND get_ic_class_value( )-&gt;get_ic_class( ) IS BOUND.

      lcl_ic_dynpro_utils=&gt;parse_class_to_combo(
              EXPORTING im_impl_ctx = get_ic_class_value( )-&gt;get_ic_class( )-&gt;get_impl_ctx( )
                        im_class = get_ic_class_value( )-&gt;get_ic_class( )
                        im_class_combo_id = c_combo_class
              CHANGING  ch_class_combo_val =  ic_class_combo ).
    ELSE.
      IF parent_dynpro-&gt;get_value_holder( ) IS BOUND.
        DATA lo_impl_ctx TYPE REF TO zcl_ic_impl_context.

        lo_impl_ctx = zcl_ic_impl_context=&gt;search_impl_ctx( parent_dynpro-&gt;get_value_holder( ) ).

        lcl_ic_dynpro_utils=&gt;parse_class_to_combo(
          EXPORTING im_impl_ctx = lo_impl_ctx
                    im_class_combo_id = c_combo_class
          CHANGING  ch_class_combo_val =  ic_class_combo ).
      ENDIF.

    ENDIF.

  ENDMETHOD.                    &quot;parse_sub_value_to_dyn

  METHOD parse_sub_value_to_comp.
    DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_class TYPE zcl_ic_class=&gt;ty_class,
          l_class_nr TYPE zic_class_nr.

*   Change IC component
    IF parent_dynpro-&gt;get_value_holder( ) IS BOUND.

      lo_impl_ctx = zcl_ic_impl_context=&gt;search_impl_ctx( parent_dynpro-&gt;get_value_holder( ) ).

      IF ic_class_combo &lt;&gt; space.
        l_class_nr = ic_class_combo.

        selected_class = lo_impl_ctx-&gt;get_class( l_class_nr ).

        IF get_ic_class_value( ) IS BOUND
          AND selected_class IS BOUND.

          get_ic_class_value( )-&gt;set_ic_class( selected_class ).
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;parse_sub_value_to_comp

  METHOD get_ic_class_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_class_value
    rt_value ?= parent_dynpro-&gt;get_value( ).
  ENDMETHOD.                    &quot;get_data_value

ENDCLASS.                    &quot;lcl_ic_create_object_sub_dyn IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_param_sub_dyn IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_param_sub_dyn IMPLEMENTATION.

  METHOD create_sub_dyn.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_param_sub_dyn.

    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_CLASS_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_METHOD_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_PARAM_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*     importing im_sub_scrn_area type scrfname optional
*               im_main_dynpro type ref to lcl_ic_create_value_dynpro.
    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

    parse_sub_value_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD handle_pai.
    DATA l_path TYPE zic_path.

    super-&gt;handle_pai( im_action ).

    CLEAR l_path.

    CASE im_action.
      WHEN c_show_ic_class_action.

        IF selected_class IS BOUND.
          l_path = selected_class-&gt;get_path( ).
        ENDIF.
      WHEN c_show_ic_method_action.

        IF selected_method IS BOUND.
          l_path = selected_method-&gt;get_path( ).
        ENDIF.

      WHEN c_show_ic_param_action.

        IF selected_param IS BOUND.
          l_path = selected_param-&gt;get_path( ).
        ENDIF.
      WHEN c_search_class_action.
*TODO weg        RAISE EVENT search_class. &quot;TODO event wegwerken doet niks, is voor knop op dynpro
      WHEN c_ic_class_combo  OR c_ic_method_combo OR c_ic_param_combo.
        parse_sub_value_to_comp( ).
        parse_sub_value_to_dyn( ).
    ENDCASE.

    IF l_path IS NOT INITIAL.
      parent_dynpro-&gt;show_ic_value( l_path ).
    ENDIF.

  ENDMETHOD.                    &quot;handle_pai

  METHOD parse_sub_value_to_dyn.

    IF get_ic_param_value( ) IS BOUND
      AND get_ic_param_value( )-&gt;get_ic_method_param( ) IS BOUND.

      lcl_ic_dynpro_utils=&gt;parse_class_to_combo(
             EXPORTING im_impl_ctx = get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_class( )-&gt;get_impl_ctx( )
                       im_class = get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_class( )
                       im_method = get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_method( )
                       im_param  = get_ic_param_value( )-&gt;get_ic_method_param( )
                       im_class_combo_id = c_combo_class
                       im_method_combo_id = c_combo_method
                       im_param_combo_id = c_combo_param
             CHANGING  ch_class_combo_val =  ic_class_combo
                       ch_method_combo_val = ic_method_combo
                       ch_param_combo_val = ic_param_combo ).
    ELSE.
      IF parent_dynpro-&gt;get_value_holder( ) IS BOUND.
        DATA lo_impl_ctx TYPE REF TO zcl_ic_impl_context.

        lo_impl_ctx = zcl_ic_impl_context=&gt;search_impl_ctx( parent_dynpro-&gt;get_value_holder( ) ).

        lcl_ic_dynpro_utils=&gt;parse_class_to_combo(
                               EXPORTING im_impl_ctx = lo_impl_ctx
                                         im_class = selected_class
                                         im_method = selected_method
                                         im_param  = selected_param
                                         im_class_combo_id = c_combo_class
                                         im_method_combo_id = c_combo_method
                                         im_param_combo_id = c_combo_param
                               CHANGING  ch_class_combo_val =  ic_class_combo
                                         ch_method_combo_val = ic_method_combo
                                         ch_param_combo_val = ic_param_combo ).
      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;parse_sub_value_to_dyn

  METHOD parse_sub_value_to_comp.
    DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          l_class_nr TYPE zic_class_nr,
          l_method_nr TYPE zic_method_nr,
          l_param_nr TYPE zic_param_nr.

*   Change IC component
    IF parent_dynpro-&gt;get_value_holder( ) IS BOUND.

      lo_impl_ctx = zcl_ic_impl_context=&gt;search_impl_ctx( parent_dynpro-&gt;get_value_holder( ) ).

      IF ic_class_combo &lt;&gt; space.
        l_class_nr = ic_class_combo.
        l_method_nr = ic_method_combo.
        l_param_nr = ic_param_combo.

        selected_class = lo_impl_ctx-&gt;get_class( l_class_nr ).

        IF selected_class IS BOUND.
          selected_method = selected_class-&gt;get_method( l_method_nr ).
        ENDIF.

        IF selected_method IS BOUND.

          selected_param = selected_method-&gt;get_param( l_param_nr ).

          IF selected_param IS BOUND
            AND get_ic_param_value( ) IS BOUND.
            get_ic_param_value( )-&gt;set_ic_method_param( selected_param ).
          ENDIF.
        ENDIF.

      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;parse_sub_value_to_comp

  METHOD get_ic_param_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_method_param_value
    rt_value ?= parent_dynpro-&gt;get_value( ).
  ENDMETHOD.                    &quot;get_data_value

ENDCLASS.                    &quot;lcl_ic_create_param_sub_dyn IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_create_attrib_sub_dyn IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_create_attrib_sub_dyn IMPLEMENTATION.

  METHOD create_sub_dyn.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_create_value_dynpro
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_create_attrib_sub_dyn.

    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_CLASS_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_ATTRIB_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*     importing im_sub_scrn_area type scrfname optional
*               im_main_dynpro type ref to lcl_ic_create_value_dynpro.
    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro ).

    parse_sub_value_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD handle_pai.
    DATA l_path TYPE zic_path.

    super-&gt;handle_pai( im_action ).

    CLEAR l_path.

    CASE im_action.
      WHEN c_show_ic_class_action.

        IF selected_class IS BOUND.
          l_path = selected_class-&gt;get_path( ).
        ENDIF.
      WHEN c_show_ic_attrib_action.

        IF selected_attrib IS BOUND.
          l_path = selected_attrib-&gt;get_path( ).
        ENDIF.
      WHEN c_search_class_action.
*TODO weg        RAISE EVENT search_class. &quot;TODO event wegwerken doet niks, is voor knop op dynpro
      WHEN c_ic_class_combo  OR  c_ic_attrib_combo.
        parse_sub_value_to_comp( ).
        parse_sub_value_to_dyn( ).
    ENDCASE.

    IF l_path IS NOT INITIAL.
      parent_dynpro-&gt;show_ic_value( l_path ).
    ENDIF.

  ENDMETHOD.                    &quot;handle_pai

  METHOD parse_sub_value_to_dyn.

    IF get_ic_attrib_value( ) IS BOUND
      AND get_ic_attrib_value( )-&gt;get_ic_class_attrib( ) IS BOUND.

      lcl_ic_dynpro_utils=&gt;parse_class_to_combo(
             EXPORTING im_impl_ctx = get_ic_attrib_value( )-&gt;get_ic_class_attrib( )-&gt;get_class( )-&gt;get_impl_ctx( )
                       im_class = get_ic_attrib_value( )-&gt;get_ic_class_attrib( )-&gt;get_class( )
                       im_attrib = get_ic_attrib_value( )-&gt;get_ic_class_attrib( )
                       im_class_combo_id = c_combo_class
                       im_attrib_combo_id = c_combo_attrib
             CHANGING  ch_class_combo_val = ic_class_combo
                       ch_attrib_combo_val = ic_attrib_combo ).
    ELSE.
      IF parent_dynpro-&gt;get_value_holder( ) IS BOUND.
        DATA lo_impl_ctx TYPE REF TO zcl_ic_impl_context.

        lo_impl_ctx = zcl_ic_impl_context=&gt;search_impl_ctx( parent_dynpro-&gt;get_value_holder( ) ).

        lcl_ic_dynpro_utils=&gt;parse_class_to_combo(
                               EXPORTING im_impl_ctx = lo_impl_ctx
                                         im_class = selected_class
                                         im_attrib = selected_attrib
                                         im_class_combo_id = c_combo_class
                                         im_attrib_combo_id = c_combo_attrib
                               CHANGING  ch_class_combo_val =  ic_class_combo
                                         ch_attrib_combo_val = ic_attrib_combo ).
      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;parse_sub_value_to_dyn

  METHOD parse_sub_value_to_comp.
    DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          l_class_nr TYPE zic_class_nr,
          l_attrib_nr TYPE zic_attrib_nr.

*   Change IC component
    IF parent_dynpro-&gt;get_value_holder( ) IS BOUND.

      lo_impl_ctx = zcl_ic_impl_context=&gt;search_impl_ctx( parent_dynpro-&gt;get_value_holder( ) ).

      IF ic_class_combo &lt;&gt; space.
        l_class_nr = ic_class_combo.
        l_attrib_nr = ic_attrib_combo.

        selected_class = lo_impl_ctx-&gt;get_class( l_class_nr ).

        IF selected_class IS BOUND.
          selected_attrib = selected_class-&gt;get_attrib( l_attrib_nr ).

          IF selected_attrib IS BOUND
            AND get_ic_attrib_value( ) IS BOUND.
            get_ic_attrib_value( )-&gt;set_ic_class_attrib( selected_attrib ).
          ENDIF.
        ENDIF.

      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;parse_sub_value_to_comp

  METHOD get_ic_attrib_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_class_attrib_value.
    rt_value ?= parent_dynpro-&gt;get_value( ).
  ENDMETHOD.                    &quot;get_data_value

ENDCLASS.                    &quot;lcl_ic_create_attrib_sub_dyn IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_cont_ctx_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_cont_ctx_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_cont_context_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro
          im_ic_component  = im_ic_component.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      DATA lo_cont_ctx TYPE REF TO zcl_ic_cont_context.

      lo_cont_ctx ?= ic_component.
      &quot;TODO weg
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_cont_ctx.
*   RETURNING value(rt_cTX) TYPE REF TO zcl_ic_cont_context.

    IF ic_component IS BOUND.
      rt_ctx ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_cont_ctx

ENDCLASS.                    &quot;lcl_ic_cont_ctx_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_impl_ctx_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
&quot;lcl_ic_impl_ctx_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_impl_ctx_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_impl_ctx_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_impl_context_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro
          im_ic_component  = im_ic_component.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;INSERT_LINE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DELETE_LINE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_impl_context_type.
      parse_comp_to_dyn( ).
    ENDIF.
  ENDMETHOD.                    &quot;constructor

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).
    fill_alv_table( ).
    show_alv( ).
  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD fill_alv_table.
    DATA: lit_inj_obj TYPE zcl_ic_inj_object=&gt;ty_inj_objects,
          lo_inj_obj TYPE zcl_ic_inj_object=&gt;ty_inj_object,
          lwa_inj_obj TYPE ty_inj_alv,
          lo_cont TYPE REF TO zcl_ic_container.

    REFRESH inj_obj_tab.

    get_impl_ctx( )-&gt;get_inj_objects( IMPORTING ex_inj_objects = lit_inj_obj ).

    LOOP AT lit_inj_obj INTO lo_inj_obj.
      lwa_inj_obj-icon = icon_other_object.
      lwa_inj_obj-name = lo_inj_obj-&gt;get_name( ).
      lwa_inj_obj-type_name = lo_inj_obj-&gt;get_inj_type( )-&gt;get_name( ).
      lwa_inj_obj-description = lo_inj_obj-&gt;get_description( ).

      lo_cont = lo_inj_obj-&gt;get_inj_type( )-&gt;get_container( ).

      IF lo_cont IS BOUND.
        zcl_ic_persist=&gt;select( lo_cont ).
        lwa_inj_obj-type_cont_name = lo_cont-&gt;get_name( ).
      ENDIF.

      APPEND lwa_inj_obj TO inj_obj_tab.
    ENDLOOP.

  ENDMETHOD.                    &quot;fill_alv_table

  METHOD show_alv.
    DATA: l_cont_name TYPE scrfname,
          lo_error TYPE REF TO cx_salv_no_new_data_allowed.

    IF gui_cont IS NOT BOUND.
      l_cont_name = c_cont_name.

      CREATE OBJECT gui_cont
        EXPORTING
          container_name = l_cont_name.
    ENDIF.

    TRY.
        IF inj_obj_alv IS NOT BOUND.

          cl_salv_table=&gt;factory( EXPORTING r_container = gui_cont
                                  IMPORTING r_salv_table = inj_obj_alv
                                  CHANGING t_table = inj_obj_tab ).

          inj_obj_alv-&gt;get_columns( )-&gt;get_column( &apos;ICON&apos; )-&gt;set_alignment( cl_salv_column=&gt;centered ).
          inj_obj_alv-&gt;display( ).
        ELSE.
          TRY.
              inj_obj_alv-&gt;set_data( CHANGING t_table = inj_obj_tab ).
              inj_obj_alv-&gt;refresh( ).
            CATCH cx_salv_no_new_data_allowed INTO lo_error.
              MESSAGE lo_error TYPE zif_ic_validate=&gt;c_error.
          ENDTRY.
        ENDIF.
      CATCH cx_salv_msg.
        &quot;TODO error handling
    ENDTRY.

  ENDMETHOD.                    &quot;show_alv

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).
  ENDMETHOD.                    &quot;parse_dyn_to_comp
  METHOD handle_pbo.
    super-&gt;handle_pbo( ).

    IF inj_obj_dynpro = abap_true.
      inj_obj_dynpro = abap_false.

      CALL SCREEN lcl_ic_create_inj_obj_dynpro=&gt;c_dynpro_nr STARTING AT 10 10.
      create_inj_obj_dynpro-&gt;close( ).
    ENDIF.

  ENDMETHOD.                    &quot;handle_pbo
  METHOD handle_pai.
    super-&gt;handle_pai( im_action = im_action ).

    inj_obj_dynpro = abap_false.

    CASE im_action.
      WHEN c_cmd_inj_line_insert.

        create_inj_obj_dynpro = lcl_ic_create_inj_obj_dynpro=&gt;create( im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area
                                                                      im_main_dynpro = get_main_dynpro( )
                                                                      im_ic_parent = get_ctx( ) ).

        zcl_ic_dynpro_manager=&gt;instance( )-&gt;set_current_dynpro( im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area
                                                                im_dynpro = create_inj_obj_dynpro ).
        inj_obj_dynpro = abap_true.
    ENDCASE.
  ENDMETHOD.                    &quot;handle_pai

  METHOD get_ctx.
*   RETURNING VALUE(rt_ctx) type ref to zcl_ic_context,

    IF ic_component IS BOUND.
      rt_ctx ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_ctx

  METHOD get_impl_ctx.
*    RETURNING value(rt_cTX) TYPE REF TO zcl_ic_impl_context.

    IF ic_component IS BOUND.
      rt_ctx ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_impl_ctx

ENDCLASS.                    &quot;lcl_ic_impl_ctx_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_inj_type_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_inj_type_dynpro IMPLEMENTATION.
  METHOD create_inj_type_dynpro.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_inj_type_dynpro.

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_inj_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro
          im_ic_component  = im_ic_component.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;INSERT_LINE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DELETE_LINE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create_inj_type_dynpro

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component

    super-&gt;constructor( im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).

    parse_comp_to_dyn( ).

  ENDMETHOD.                    &quot;constructor

  METHOD adapt_screen.
    super-&gt;adapt_screen( CHANGING ch_screen = ch_screen ).

    IF ch_screen-name = &apos;BOX_IC_CONT_CTX&apos;.
      break bcuser.
    ENDIF.

  ENDMETHOD.                    &quot;adapt_screen

  METHOD fill_alv_table.
    DATA: lit_inj_obj TYPE zcl_ic_inj_object=&gt;ty_inj_objects,
          lo_inj_obj TYPE zcl_ic_inj_object=&gt;ty_inj_object,
          lwa_inj_obj TYPE ty_inj_alv,
          lo_cont TYPE REF TO zcl_ic_container.

    REFRESH inj_obj_tab.

    get_inj_type( )-&gt;get_inj_objects( IMPORTING ex_inj_objects = lit_inj_obj ).

    LOOP AT lit_inj_obj INTO lo_inj_obj.
      lwa_inj_obj-icon = icon_other_object.
      lwa_inj_obj-name = lo_inj_obj-&gt;get_name( ).
      lwa_inj_obj-type_name = lo_inj_obj-&gt;get_inj_type( )-&gt;get_name( ).
      lwa_inj_obj-description = lo_inj_obj-&gt;get_inj_type( )-&gt;get_description( ).

      lo_cont = lo_inj_obj-&gt;get_inj_type( )-&gt;get_container( ).

      IF lo_cont IS BOUND.
        zcl_ic_persist=&gt;select( lo_cont ).
        lwa_inj_obj-type_cont_name = lo_cont-&gt;get_name( ).
      ENDIF.

      APPEND lwa_inj_obj TO inj_obj_tab.
    ENDLOOP.

  ENDMETHOD.                    &quot;fill_alv_table

  METHOD get_inj_type.
*    RETURNING value(rt_ctx) TYPE REF TO zcl_ic_inj_type

    IF ic_component IS BOUND.
      rt_ctx ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_inj_type

ENDCLASS.                    &quot;lcl_ic_inj_type_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_class_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_class_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_class_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro
          im_ic_component  = im_ic_component.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;CLASS_NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;RETURN_CLASS_NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DEFAULT_CONSTR&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.
      class_name = get_class( )-&gt;get_class_name( ).
      return_class_name = get_class( )-&gt;get_return_class_name( ).
      default_constr = get_class( )-&gt;has_default_constructor( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      DATA lo_class TYPE REF TO zcl_ic_class.

      lo_class ?= ic_component.
      lo_class-&gt;set_class_name( class_name ).
      lo_class-&gt;set_return_class_name( return_class_name ).
      lo_class-&gt;set_default_constructor( default_constr ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_class.
    &quot;   RETURNING value(rt_cLASS) TYPE REF TO zcl_ic_class.

    IF ic_component IS BOUND.
      rt_class ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_class

ENDCLASS.                    &quot;lcl_ic_class_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_method_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_method_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_method_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro
          im_ic_component  = im_ic_component.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;METHOD_TYPE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DECLARE_LEVEL&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;ACTIVE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).
    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.

      method_type = get_method( )-&gt;get_method_type( ).
      declare_level = get_method( )-&gt;get_declare_level( ).
      active = get_method( )-&gt;is_active( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      DATA lo_method TYPE REF TO zcl_ic_method.

      lo_method ?= ic_component.

      lo_method-&gt;set_method_type( method_type ).
      lo_method-&gt;set_is_active( active ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_method.
    &quot;   RETURNING value(rt_method) TYPE REF TO zcl_ic_method.

    IF ic_component IS BOUND.
      rt_method ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_class

ENDCLASS.                    &quot;lcl_ic_method_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_class_attrib_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_class_attrib_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component
*   RETURNING value(rt_dynpro) TYPE zcl_ic_sub_dynpro_base.

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_class_attrib_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro
          im_ic_component  = im_ic_component.

    ELSE.
      &quot;TODO throw error
    ENDIF.

    IF rt_dynpro-&gt;get_class_attrib( ) IS BOUND
      AND rt_dynpro-&gt;get_class_attrib( )-&gt;get_ic_value( ) IS BOUND.

      rt_dynpro-&gt;value_dynpro =
              lcl_ic_value_edit_dynpro_base=&gt;create(
                   im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value
                   im_main_dynpro = rt_dynpro
                   im_ic_value = rt_dynpro-&gt;get_class_attrib( )-&gt;get_ic_value( ) ).

      zcl_ic_dynpro_manager=&gt;instance( )-&gt;set_current_dynpro(
                               im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value
                               im_dynpro = rt_dynpro-&gt;value_dynpro ).
    ELSE.
      zcl_ic_dynpro_manager=&gt;instance( )-&gt;clear_current_dynpro_nr( im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value ).
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;VALUE_TYPE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD set_screen_mode.
    super-&gt;set_screen_mode( im_screen_mode = im_screen_mode ).

    IF value_dynpro IS BOUND.
      value_dynpro-&gt;set_screen_mode( im_screen_mode = im_screen_mode ).
    ENDIF.
  ENDMETHOD.                    &quot;set_screen_mode

  METHOD handle_pbo.
    zcl_ic_dynpro_manager=&gt;instance( )-&gt;set_current_dynpro( im_dynpro = value_dynpro
                                                 im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value  ).
  ENDMETHOD.                    &quot;handle_pbo

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.

    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD before_save_component.
    super-&gt;before_save_component( ).

    IF  get_class_attrib( ) IS NOT BOUND
      OR get_class_attrib( )-&gt;get_ic_value( ) IS NOT BOUND.

      RETURN.
    ENDIF.

    value_dynpro-&gt;save_component( ).
  ENDMETHOD.                    &quot;before_save_component

  METHOD get_class_attrib.
*   RETURNING value(rt_CL_ATTRIB) TYPE REF TO zcl_ic_class_attribs.

    IF ic_component IS BOUND.
      rt_cl_attrib ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_class_attrib

ENDCLASS.                    &quot;lcl_ic_class_attrib_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_method_param_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_method_param_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_method_param_dynpro.

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_method_param_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro
          im_ic_component  = im_ic_component.

    ELSE.
      &quot;TODO throw error
    ENDIF.

    IF rt_dynpro-&gt;get_method_param( ) IS BOUND
      AND rt_dynpro-&gt;get_method_param( )-&gt;get_ic_value( ) IS BOUND.

      rt_dynpro-&gt;value_dynpro =
              lcl_ic_value_edit_dynpro_base=&gt;create(
                   im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value
                   im_main_dynpro = rt_dynpro
                   im_ic_value = rt_dynpro-&gt;get_method_param( )-&gt;get_ic_value( ) ).

      zcl_ic_dynpro_manager=&gt;instance( )-&gt;set_current_dynpro(
                               im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value
                               im_dynpro = rt_dynpro-&gt;value_dynpro ).
    ELSE.
      zcl_ic_dynpro_manager=&gt;instance( )-&gt;clear_current_dynpro_nr( im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value ).
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD set_screen_mode.
    super-&gt;set_screen_mode( im_screen_mode = im_screen_mode ).
    value_dynpro-&gt;set_screen_mode( im_screen_mode = im_screen_mode ).
  ENDMETHOD.                    &quot;set_screen_mode

  METHOD handle_pbo.
    zcl_ic_dynpro_manager=&gt;instance( )-&gt;set_current_dynpro( im_dynpro = value_dynpro
                                                 im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_value  ).
  ENDMETHOD.                    &quot;handle_pbo

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.

    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD before_save_component.
    super-&gt;before_save_component( ).

    IF  get_method_param( ) IS NOT BOUND
      OR get_method_param( )-&gt;get_ic_value( ) IS NOT BOUND.

      RETURN.
    ENDIF.

    value_dynpro-&gt;save_component( ).
  ENDMETHOD.                    &quot;before_save_component

  METHOD get_method_param.
*   RETURNING value(rt_METHOD_PARAM) TYPE REF TO zcl_ic_method_param.

    IF ic_component IS BOUND.
      rt_method_param ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_METHOD_PARAM
ENDCLASS.                    &quot;lcl_ic_method_param_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_inj_type_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_inj_obj_dynpro IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component
*   RETURNING value(rt_dynpro) TYPE lcl_ic_inj_obj_dynpro.

    IF im_ic_component-&gt;get_type( ) = zcl_ic_object=&gt;c_inj_obj_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro
          im_ic_component  = im_ic_component.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_component type ref to zif_ic_component

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD is_screen_edit.

    rt_is_field_adapt = c_is_screen_edit_no.

  ENDMETHOD.                    &quot;METHOD

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF get_inj_obj( ) IS BOUND.
      object_nr = get_inj_obj( )-&gt;get_inj_type( )-&gt;get_object_nr( ).
      name = get_inj_obj( )-&gt;get_inj_type( )-&gt;get_name( ).
      description = get_inj_obj( )-&gt;get_inj_type( )-&gt;get_description( ).
      rank = get_inj_obj( )-&gt;get_rank( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).
  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_inj_obj.
* RETURNING value(rt_inj_object) TYPE REF TO zcl_ic_inj_object.
    IF ic_component IS BOUND.
      rt_inj_object ?= ic_component.
    ENDIF.
  ENDMETHOD.                    &quot;get_inj_obj

ENDCLASS.                    &quot;lcl_ic_inj_obj_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_ic_method_param_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_value_edit_dynpro_base IMPLEMENTATION.
  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
*             im_ic_value TYPE REF TO zcl_ic_value
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_value_edit_dynpro_base.

    IF im_ic_value-&gt;get_type( ) = zcl_ic_object=&gt;c_value_type.

      CASE im_ic_value-&gt;get_value_type( ).
        WHEN zcl_ic_value=&gt;c_value_type_data.
          rt_dynpro ?= lcl_ic_data_dynpro=&gt;create_dynpro( im_ic_value = im_ic_value
                                                          im_main_dynpro = im_main_dynpro
                                                          im_sub_scrn_area = im_sub_scrn_area ).
        WHEN zcl_ic_value=&gt;c_value_type_table.
          rt_dynpro ?= lcl_ic_table_dynpro=&gt;create_dynpro( im_ic_value = im_ic_value
                                                           im_main_dynpro = im_main_dynpro
                                                           im_sub_scrn_area = im_sub_scrn_area ).
        WHEN zcl_ic_value=&gt;c_value_type_object.
          rt_dynpro ?= lcl_ic_class_value_dynpro=&gt;create_dynpro( im_ic_value = im_ic_value
                                                                 im_main_dynpro = im_main_dynpro
                                                                 im_sub_scrn_area = im_sub_scrn_area ).

        WHEN zcl_ic_value=&gt;c_value_type_param.
          rt_dynpro ?= lcl_ic_param_value_dynpro=&gt;create_dynpro( im_ic_value = im_ic_value
                                                                 im_main_dynpro = im_main_dynpro
                                                                 im_sub_scrn_area = im_sub_scrn_area ).
        WHEN zcl_ic_value=&gt;c_value_type_attrib.
          rt_dynpro ?= lcl_ic_attrib_value_dynpro=&gt;create_dynpro( im_ic_value = im_ic_value
                                                                  im_main_dynpro = im_main_dynpro
                                                                  im_sub_scrn_area = im_sub_scrn_area ).

        WHEN zcl_ic_value=&gt;c_value_type_inj_type.
          rt_dynpro ?= lcl_ic_type_value_dynpro=&gt;create_dynpro( im_ic_value = im_ic_value
                                                                  im_main_dynpro = im_main_dynpro
                                                                  im_sub_scrn_area = im_sub_scrn_area ).
      ENDCASE.
    ELSE.
      &quot;TODO throw error
    ENDIF.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_dynpro_nr TYPE sydynnr
*             im_program_name TYPE syst-cprog
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base
*             im_ic_value TYPE REF TO zcl_ic_value.

    super-&gt;constructor( im_dynpro_nr = im_dynpro_nr
                        im_program_name = im_program_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_value ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF ic_component IS BOUND.
      value_type = get_value( )-&gt;get_value_type( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
*     value type is set in construction of object
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_value.

    IF ic_component IS BOUND.
      rt_value ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_METHOD_PARAM
ENDCLASS.                    &quot;lcl_ic_value_edit_dynpro_base IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_data_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_data_dynpro IMPLEMENTATION.

  METHOD create_dynpro.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_data_dynpro.

    IF im_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_data.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_ic_value      = im_ic_value
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DATA_TYPE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DATA_VALUE&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    rt_dynpro-&gt;set_edit_table( lit_edit_fields ).

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value.
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base.

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro-&gt;get_main_dynpro( )
                        im_ic_value = im_ic_value ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF get_data_value( ) IS BOUND.
      data_type = get_data_value( )-&gt;get_data_type( ).
      data_value = get_data_value( )-&gt;get_data_value( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF data_type IS INITIAL.
      data_type = c_default_data_type.
    ENDIF.

    IF ic_component IS BOUND.
      DATA lo_data TYPE REF TO zcl_ic_data.

      lo_data ?= ic_component.

      lo_data-&gt;set_data_type( data_type ).
      lo_data-&gt;set_data_value( data_value ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_data_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_data

    IF ic_component IS BOUND.
      rt_value ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_METHOD_PARAM
ENDCLASS.                    &quot;lcl_ic_data_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_table_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_table_dynpro IMPLEMENTATION.

  METHOD create_dynpro.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_table_dynpro.

    IF im_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_table.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_ic_value      = im_ic_value
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;TABLE_NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    IF rt_dynpro IS NOT INITIAL.
      rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
    ELSE.
      &quot;TODO throw error
    ENDIF.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value.
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base.

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro-&gt;get_main_dynpro( )
                        im_ic_value = im_ic_value ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF get_table_value( ) IS BOUND.
      table_name = get_table_value( )-&gt;get_table_name( ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

    IF ic_component IS BOUND.
      DATA lo_table TYPE REF TO zcl_ic_table.

      lo_table ?= ic_component.

      IF table_name IS NOT INITIAL.
        lo_table-&gt;set_table_name( table_name ).
      ELSE.
        &quot;TODO throw error
      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_table_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_table.

    IF ic_component IS BOUND.
      rt_value ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_table_value
ENDCLASS.                    &quot;lcl_ic_table_dynpro IMPLEMENTATION
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_ic_class_value_dynpro
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_ic_class_value_dynpro IMPLEMENTATION.

  METHOD create_dynpro.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_class_value_dynpro.

    IF im_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_object.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_ic_value      = im_ic_value
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_CLASS_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    IF rt_dynpro IS NOT INITIAL.
      rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
    ELSE.
      &quot;TODO throw error
    ENDIF.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value.
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base.

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro-&gt;get_main_dynpro( )
                        im_ic_value = im_ic_value ).

    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD handle_pai.
    super-&gt;handle_pai( im_action ).

    CASE im_action.
      WHEN c_show_ic_class_action.

        IF  get_ic_class_value( ) IS BOUND
            AND get_ic_class_value( )-&gt;get_ic_class( ) IS BOUND.

          DATA l_path TYPE zic_path.
          l_path = get_ic_class_value( )-&gt;get_ic_class( )-&gt;get_path( ).

          RAISE EVENT show_ic_comp EXPORTING ex_path = l_path.
        ENDIF.

      WHEN c_search_class_action.
        RAISE EVENT search_class. &quot;TODO event wegwerken doet niks, is voor knop op dynpro
      WHEN c_ic_class_combo.
        parse_dyn_to_comp( ).
        parse_comp_to_dyn( ).
    ENDCASE.

  ENDMETHOD.                    &quot;handle_pai

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF get_ic_class_value( ) IS BOUND
      AND get_ic_class_value( )-&gt;get_ic_class( ) IS BOUND.

      lcl_ic_dynpro_utils=&gt;parse_class_to_combo(
             EXPORTING im_impl_ctx = get_ic_class_value( )-&gt;get_ic_class( )-&gt;get_impl_ctx( )
                       im_class = get_ic_class_value( )-&gt;get_ic_class( )
                       im_class_combo_id = c_combo_class
             CHANGING  ch_class_combo_val =  ic_class_combo ).
    ELSE.
      CLEAR ic_class_combo.
      RETURN.
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lit_classes TYPE zcl_ic_class=&gt;ty_classes,
          lo_class TYPE zcl_ic_class=&gt;ty_class.

    super-&gt;parse_dyn_to_comp( ).

*   Change IC component
    IF get_ic_class_value( ) IS NOT BOUND
     OR get_ic_class_value( )-&gt;get_ic_class( ) IS NOT BOUND.

      RETURN.
    ENDIF.

*   select new class and chang IC class value
    lo_impl_ctx = get_ic_class_value( )-&gt;get_ic_class( )-&gt;get_impl_ctx( ).

    DATA: l_class_nr TYPE zic_class_nr,
          lo_class_value TYPE REF TO zcl_ic_class_value.

    IF ic_class_combo &lt;&gt; space.
      l_class_nr = ic_class_combo.

      lo_class = lo_impl_ctx-&gt;get_class( l_class_nr ).
      lo_class_value ?= ic_component.
      lo_class_value-&gt;set_ic_class( lo_class ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD get_ic_class_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_class_value.

    IF ic_component IS BOUND.
      rt_value ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_table_value

ENDCLASS.               &quot;lcl_ic_class_value_dynpro

*----------------------------------------------------------------------*
*       CLASS lcl_ic_param_value_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_param_value_dynpro IMPLEMENTATION.

  METHOD create_dynpro.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
*   RETURNING RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_param_value_dynpro..

    IF im_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_param.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_ic_value      = im_ic_value
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_CLASS_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_METHOD_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_PARAM_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    IF rt_dynpro IS NOT INITIAL.
      rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
    ELSE.
      &quot;TODO throw error
    ENDIF.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value.
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base.

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro-&gt;get_main_dynpro( )
                        im_ic_value = im_ic_value ).

    impl_ctx = get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_method( )-&gt;get_class( )-&gt;get_impl_ctx( ).
    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD handle_pai.
    DATA l_path TYPE zic_path.

    super-&gt;handle_pai( im_action ).

    CLEAR l_path.

    CASE im_action.
      WHEN c_show_ic_class_action.

        IF  get_ic_param_value( ) IS BOUND
            AND get_ic_param_value( )-&gt;get_ic_method_param( ) IS BOUND
            AND get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_method( ) IS BOUND
            AND get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_method( )-&gt;get_class( ) IS BOUND.

          l_path = get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_method( )-&gt;get_class( )-&gt;get_path( ).
        ENDIF.

      WHEN c_show_ic_method_action.

        IF  get_ic_param_value( ) IS BOUND
            AND get_ic_param_value( )-&gt;get_ic_method_param( ) IS BOUND
            AND get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_method( ) IS BOUND.

          l_path = get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_method( )-&gt;get_path( ).
        ENDIF.

      WHEN c_show_ic_param_action.

        IF  get_ic_param_value( ) IS BOUND
            AND get_ic_param_value( )-&gt;get_ic_method_param( ) IS BOUND.

          l_path = get_ic_param_value( )-&gt;get_ic_method_param( )-&gt;get_path( ).
        ENDIF.


      WHEN c_ic_class_combo OR c_ic_method_combo OR c_ic_param_combo.
        parse_dyn_to_comp( ).
        fill_comp_selects( impl_ctx ).
    ENDCASE.

    IF l_path IS NOT INITIAL.
      RAISE EVENT show_ic_comp EXPORTING ex_path = l_path.
    ENDIF.

  ENDMETHOD.                    &quot;handle_pai

  METHOD fill_comp_selects.
*   IMPORTING im_implctx TYPE REF TO zcl_ic_impl_context
    DATA: lit_value  TYPE vrm_values,
       lwa_value TYPE vrm_value,
       lit_classes TYPE zcl_ic_class=&gt;ty_classes,
       lo_class TYPE zcl_ic_class=&gt;ty_class,
       lit_methods TYPE zcl_ic_method=&gt;ty_methods,
       lo_method TYPE zcl_ic_method=&gt;ty_method,
       lit_params TYPE zcl_ic_method_param=&gt;ty_method_params,
       lo_param TYPE zcl_ic_method_param=&gt;ty_method_param.

    im_implctx-&gt;get_classes( IMPORTING e_classes = lit_classes ).

*   class combo
    REFRESH lit_value.

    LOOP AT lit_classes INTO lo_class.
      lwa_value-key = lo_class-&gt;get_object_nr( ).
      lwa_value-text =  lo_class-&gt;get_name( ).

      APPEND lwa_value TO lit_value.
    ENDLOOP.

    CALL FUNCTION &apos;VRM_SET_VALUES&apos;
      EXPORTING
        id              = c_combo_class
        values          = lit_value
      EXCEPTIONS
        id_illegal_name = 1
        OTHERS          = 2.
    IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO Error
    ENDIF.

    IF class_select IS INITIAL.
      CLEAR: class_select, method_select, param_select.
      CLEAR: ic_method_combo, ic_param_combo.

      RETURN.
    ENDIF.

    ic_class_combo = class_select-&gt;get_object_nr( ).
    class_select-&gt;get_methods( IMPORTING e_methods = lit_methods ).

*   method combo
    REFRESH lit_value.

    LOOP AT lit_methods INTO lo_method.
      lwa_value-key = lo_method-&gt;get_object_nr( ).
      lwa_value-text =  lo_method-&gt;get_name( ).

      APPEND lwa_value TO lit_value.
    ENDLOOP.

    CALL FUNCTION &apos;VRM_SET_VALUES&apos;
      EXPORTING
        id              = c_combo_method
        values          = lit_value
      EXCEPTIONS
        id_illegal_name = 1
        OTHERS          = 2.
    IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO Error
    ENDIF.

    IF method_select IS INITIAL.
      CLEAR: method_select, param_select.
      CLEAR: ic_method_combo, ic_param_combo.

      RETURN.
    ENDIF.

    ic_method_combo = method_select-&gt;get_object_nr( ).
    method_select-&gt;get_params( IMPORTING e_method_params = lit_params ).

*   param combo
    REFRESH lit_value.

    LOOP AT lit_params INTO lo_param.
      lwa_value-key = lo_param-&gt;get_object_nr( ).
      lwa_value-text = lo_param-&gt;get_name( ).

      APPEND lwa_value TO lit_value.
    ENDLOOP.

    CALL FUNCTION &apos;VRM_SET_VALUES&apos;
      EXPORTING
        id              = c_combo_param
        values          = lit_value
      EXCEPTIONS
        id_illegal_name = 1
        OTHERS          = 2.
    IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO Error
    ENDIF.

    IF param_select IS NOT INITIAL.
      ic_param_combo = param_select-&gt;get_object_nr( ).
    ENDIF.

  ENDMETHOD.                    &quot;fill_comp_selects

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF get_ic_param_value( ) IS NOT BOUND
       AND get_ic_param_value( )-&gt;get_ic_method_param( ) IS NOT BOUND.

      CLEAR ic_class_combo.
      CLEAR ic_method_combo.
      CLEAR ic_param_combo.

      RETURN.
    ENDIF.

*   Fill combobox with class name
    param_select = get_ic_param_value( )-&gt;get_ic_method_param( ).
    method_select = param_select-&gt;get_method( ).
    class_select = method_select-&gt;get_class( ).

    fill_comp_selects( impl_ctx ).

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    DATA: lit_classes TYPE zcl_ic_class=&gt;ty_classes,
          lo_class TYPE zcl_ic_class=&gt;ty_class,
          lit_methods TYPE zcl_ic_method=&gt;ty_methods,
          lo_method TYPE zcl_ic_method=&gt;ty_method,
          lit_params TYPE zcl_ic_method_param=&gt;ty_method_params,
          lo_param TYPE zcl_ic_method_param=&gt;ty_method_param.

    CLEAR: class_select, method_select, param_select.

    super-&gt;parse_dyn_to_comp( ).

*   select new class
    impl_ctx-&gt;get_classes( IMPORTING e_classes = lit_classes ).

    LOOP AT lit_classes INTO lo_class.

      IF lo_class-&gt;get_object_nr( ) = ic_class_combo.
        class_select = lo_class.

        EXIT.
      ENDIF.
    ENDLOOP.

    IF class_select IS NOT BOUND.
      CLEAR: ic_method_combo, ic_param_combo.
      RETURN.
    ENDIF.

*   select new method
    class_select-&gt;get_methods( IMPORTING e_methods = lit_methods ).

    LOOP AT lit_methods INTO lo_method.

      IF lo_method-&gt;get_object_nr( ) = ic_method_combo.
        method_select = lo_method.

        EXIT.
      ENDIF.
    ENDLOOP.

    IF method_select IS NOT BOUND.
      CLEAR: ic_param_combo.
      RETURN.
    ENDIF.

*   select new param
    method_select-&gt;get_params( IMPORTING e_method_params = lit_params ).

    LOOP AT lit_params  INTO lo_param.

      IF lo_param-&gt;get_object_nr( ) = ic_param_combo.
        param_select = lo_param.

        EXIT.
      ENDIF.
    ENDLOOP.

    IF param_select IS NOT BOUND.
      CLEAR ic_param_combo.
    ELSE.

      get_ic_param_value( )-&gt;set_ic_method_param( param_select ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_com p

  METHOD get_ic_param_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_param_value.

    IF ic_component IS BOUND.
      rt_value ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_table_value

ENDCLASS.                    &quot;lcl_ic_param_value_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_attrib_value_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_attrib_value_dynpro IMPLEMENTATION.

  METHOD create_dynpro.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
*   RETURNING RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_attrib_value_dynpro.

    IF im_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_attrib.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_ic_value      = im_ic_value
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_CLASS_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_ATTRIB_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    IF rt_dynpro IS NOT INITIAL.
      rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
    ELSE.
      &quot;TODO throw error
    ENDIF.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value.
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base.

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro-&gt;get_main_dynpro( )
                        im_ic_value = im_ic_value ).

    impl_ctx = get_ic_attrib_value( )-&gt;get_ic_class_attrib( )-&gt;get_class( )-&gt;get_impl_ctx( ).
    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD handle_pai.
    DATA l_path TYPE zic_path.

    super-&gt;handle_pai( im_action ).

    CLEAR l_path.

    CASE im_action.
      WHEN c_show_ic_class_action.

        IF  get_ic_attrib_value( ) IS BOUND
            AND get_ic_attrib_value( )-&gt;get_ic_class_attrib( ) IS BOUND
            AND get_ic_attrib_value( )-&gt;get_ic_class_attrib( )-&gt;get_class( ) IS BOUND.

          l_path = get_ic_attrib_value( )-&gt;get_ic_class_attrib( )-&gt;get_class( )-&gt;get_path( ).
        ENDIF.

      WHEN c_show_ic_attrib_action.

        IF  get_ic_attrib_value( ) IS BOUND
            AND get_ic_attrib_value( )-&gt;get_ic_class_attrib( ) IS BOUND.

          l_path = get_ic_attrib_value( )-&gt;get_ic_class_attrib( )-&gt;get_path( ).
        ENDIF.

      WHEN c_ic_class_combo OR c_ic_attrib_combo.
        parse_dyn_to_comp( ).
        fill_comp_selects( impl_ctx ).
    ENDCASE.

    IF l_path IS NOT INITIAL.
      RAISE EVENT show_ic_comp EXPORTING ex_path = l_path.
    ENDIF.

  ENDMETHOD.                    &quot;handle_pai

  METHOD fill_comp_selects.
*   IMPORTING im_implctx TYPE REF TO zcl_ic_impl_context
    DATA: lit_value  TYPE vrm_values,
       lwa_value TYPE vrm_value,
       lit_classes TYPE zcl_ic_class=&gt;ty_classes,
       lo_class TYPE zcl_ic_class=&gt;ty_class,
       lit_attribs TYPE zcl_ic_class_attrib=&gt;ty_class_attribs,
       lo_attrib TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

    im_implctx-&gt;get_classes( IMPORTING e_classes = lit_classes ).

*   class combo
    REFRESH lit_value.

    LOOP AT lit_classes INTO lo_class.
      lwa_value-key = lo_class-&gt;get_object_nr( ).
      lwa_value-text =  lo_class-&gt;get_name( ).

      APPEND lwa_value TO lit_value.
    ENDLOOP.

    CALL FUNCTION &apos;VRM_SET_VALUES&apos;
      EXPORTING
        id              = c_combo_class
        values          = lit_value
      EXCEPTIONS
        id_illegal_name = 1
        OTHERS          = 2.
    IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO Error
    ENDIF.

    IF class_select IS INITIAL.
      CLEAR: class_select, attrib_select.
      CLEAR: ic_attrib_combo.

      RETURN.
    ENDIF.

    ic_class_combo = class_select-&gt;get_object_nr( ).
    class_select-&gt;get_attribs( IMPORTING e_attribs = lit_attribs ).

*   attrib combo
    REFRESH lit_value.

    LOOP AT lit_attribs INTO lo_attrib.
      lwa_value-key = lo_attrib-&gt;get_object_nr( ).
      lwa_value-text =  lo_attrib-&gt;get_name( ).

      APPEND lwa_value TO lit_value.
    ENDLOOP.

    CALL FUNCTION &apos;VRM_SET_VALUES&apos;
      EXPORTING
        id              = c_combo_attrib
        values          = lit_value
      EXCEPTIONS
        id_illegal_name = 1
        OTHERS          = 2.
    IF sy-subrc &lt;&gt; 0.
*     Implement suitable error handling here
*     TODO Error
    ENDIF.

    IF attrib_select IS INITIAL.
      CLEAR: attrib_select.
    ELSE.
      ic_attrib_combo = attrib_select-&gt;get_object_nr( ).
    ENDIF.

  ENDMETHOD.                    &quot;fill_comp_selects

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF get_ic_attrib_value( ) IS NOT BOUND
       AND get_ic_attrib_value( )-&gt;get_ic_class_attrib( ) IS NOT BOUND.

      CLEAR ic_class_combo.
      CLEAR ic_attrib_combo.

      RETURN.
    ENDIF.

*   Fill combobox with class name
    attrib_select = get_ic_attrib_value( )-&gt;get_ic_class_attrib( ).
    class_select = attrib_select-&gt;get_class( ).

    fill_comp_selects( impl_ctx ).

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    DATA: lit_classes TYPE zcl_ic_class=&gt;ty_classes,
          lo_class TYPE zcl_ic_class=&gt;ty_class,
          lit_attribs TYPE zcl_ic_class_attrib=&gt;ty_class_attribs,
          lo_attrib TYPE zcl_ic_class_attrib=&gt;ty_class_attrib.

    CLEAR: class_select, attrib_select.

    super-&gt;parse_dyn_to_comp( ).

*   select new class
    impl_ctx-&gt;get_classes( IMPORTING e_classes = lit_classes ).

    LOOP AT lit_classes INTO lo_class.

      IF lo_class-&gt;get_object_nr( ) = ic_class_combo.
        class_select = lo_class.

        EXIT.
      ENDIF.
    ENDLOOP.

    IF class_select IS NOT BOUND.
      CLEAR: ic_attrib_combo.
      RETURN.
    ENDIF.

*   select new attribute
    class_select-&gt;get_attribs( IMPORTING e_attribs = lit_attribs ).

    LOOP AT lit_attribs INTO lo_attrib.

      IF lo_attrib-&gt;get_object_nr( ) = ic_attrib_combo.
        attrib_select = lo_attrib.

        EXIT.
      ENDIF.
    ENDLOOP.

    IF attrib_select IS NOT BOUND.
      CLEAR: ic_attrib_combo.
    ELSE.
      get_ic_attrib_value( )-&gt;set_ic_class_attrib( attrib_select ).
    ENDIF.

  ENDMETHOD.                    &quot;parse_dyn_to_com p

  METHOD get_ic_attrib_value.
*   RETURNING value(rt_value) TYPE REF TO zcl_ic_attrib_value.

    IF ic_component IS BOUND.
      rt_value ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_ic_attrib_value

ENDCLASS.                    &quot;lcl_ic_attrib_value_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_select_inj_obj_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_select_inj_obj_dynpro IMPLEMENTATION.

  METHOD create.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro type refl_ic_select_inj_obj_dynpro.
*             im_ic_inj_object TYPE REF TO zcl_ic_inj_object,
*   RETURNING TYPE REF TO lcl_ic_select_inj_obj_dynpro.
    DATA lo_comp TYPE REF TO zif_ic_component.

    lo_comp = im_ic_inj_object.

    CREATE OBJECT rt_dynpro
      EXPORTING
        im_sub_scrn_area = im_sub_scrn_area
        im_main_dynpro   = im_main_dynpro
        im_ic_component  = lo_comp.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_sub_scrn_area TYPE scrfname OPTIONAL,
*             im_main_dynpro type ref to zcl_ic_main_dynpro_base
*             im_ic_parent TYPE REF TO zif_ic_component,

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro
                        im_ic_component = im_ic_component ).

  ENDMETHOD.                    &quot;constructor

  METHOD handle_pbo.
*   set in parse_comp_to_dyn + delete this method
    super-&gt;handle_pbo( ).
    create_container( ).
  ENDMETHOD.                    &quot;handle_pbo

  METHOD create_container.
    CONSTANTS: lc_tabstruct TYPE x030l-tabname VALUE &apos;MTREEITM&apos;,
               lc_column1_comp TYPE tv_itmname VALUE &apos;Column1&apos;.
    DATA: lwa_hierarchy_header TYPE treev_hhdr,
          lit_node_table TYPE treev_ntab,
          lit_item_table TYPE lcl_ic_application=&gt;t_column_tree_item_tab,
          lo_tree_dyn TYPE REF TO lcl_tree_dynpro,
          lit_node TYPE tv_nodekey,
          lo_app TYPE REF TO lcl_ic_application.

    IF ic_tree IS BOUND.
      RETURN.
    ENDIF.

    CREATE OBJECT ic_tree_container
      EXPORTING
        container_name = &apos;IC_INJ_TYPE_VALUE&apos;
        dynnr          = get_dynpro_nr( )
        repid          = sy-cprog.

    CREATE OBJECT ic_tree
      EXPORTING
        parent                      = ic_tree_container
        node_selection_mode         = cl_gui_column_tree=&gt;node_sel_mode_single
        item_selection              = abap_true
        hierarchy_column_name       = lc_column1_comp
        hierarchy_header            = lwa_hierarchy_header
      EXCEPTIONS
        cntl_system_error           = 1
        create_error                = 2
        failed                      = 3
        illegal_node_selection_mode = 4
        lifetime_error              = 5.
    IF sy-subrc &lt;&gt; 0.
      &quot;TODO errorhandling.
    ENDIF.

*   register events
    DATA: lwa_event        TYPE cntl_simple_event,
              lit_events       TYPE cntl_simple_events.

    lwa_event-eventid = cl_gui_column_tree=&gt;eventid_node_double_click.
    APPEND lwa_event TO lit_events.

    lwa_event-eventid = cl_gui_column_tree=&gt;eventid_item_double_click.
    APPEND lwa_event TO lit_events.

    ic_tree-&gt;set_registered_events( lit_events ).

    lo_app = lcl_ic_application=&gt;create( ).

    ic_tree-&gt;delete_all_nodes( ).

    lo_app-&gt;create_ic_tree( EXPORTING im_ic_comp = ic_component
                            CHANGING ch_tree = ic_tree ).

    ic_tree-&gt;set_visible( cl_gui_control=&gt;visible_true ).

*   tree handlers
    SET HANDLER on_node_double_click FOR ic_tree.
    SET HANDLER on_item_double_click FOR ic_tree.
  ENDMETHOD.                    &quot;create_container

  METHOD          on_node_double_click.
*     FOR EVENT node_double_click OF cl_gui_column_tree
*                                  IMPORTING node_key,
    break bcuser.
  ENDMETHOD.                  &quot;on_node_double_click
  METHOD           on_item_double_click.
*      FOR EVENT item_double_click OF cl_gui_column_tree
*                                  IMPORTING node_key,
    break bcuser.
  ENDMETHOD.                    &quot;on_node_double_click

  METHOD get_inj_obj.
*  RETURNING value(rt_inj_obj) TYPE REF TO zcl_ic_inj_obj.

    IF ic_component IS BOUND.
      rt_inj_obj ?= ic_component.
    ENDIF.

  ENDMETHOD.                    &quot;get_cont_ctx

  METHOD get_selected_value.
*   RETURNING value(rt_value) type ref to zcl_ic_value.
    rt_value = selected_value.
  ENDMETHOD.                    &quot;get_selected_value

ENDCLASS.                    &quot;lcl_ic_select_inj_obj_dynpro IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_ic_type_value_dynpro IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_ic_type_value_dynpro IMPLEMENTATION.

  METHOD create_dynpro.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO lcl_ic_sub_dynpro_comp_base
*   RETURNING value(rt_dynpro) TYPE REF TO lcl_ic_type_value_dynpro.

    IF im_ic_value-&gt;get_value_type( ) = zcl_ic_value=&gt;c_value_type_inj_type.

      CREATE OBJECT rt_dynpro
        EXPORTING
          im_ic_value      = im_ic_value
          im_sub_scrn_area = im_sub_scrn_area
          im_main_dynpro   = im_main_dynpro.

    ELSE.
      &quot;TODO throw error
    ENDIF.

*   editable fields
    DATA: l_edit_field TYPE string,
          lit_edit_fields TYPE string_table.

    l_edit_field = &apos;NAME&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;DESCRIPTION&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    l_edit_field = &apos;IC_INJ_OBJ_COMBO&apos;.
    APPEND l_edit_field TO lit_edit_fields.

    IF rt_dynpro IS NOT INITIAL.
      rt_dynpro-&gt;set_edit_table( lit_edit_fields ).
    ELSE.
      &quot;TODO throw error
    ENDIF.

  ENDMETHOD.                    &quot;create

  METHOD constructor.
*   IMPORTING im_ic_value TYPE REF TO zcl_ic_value.
*             im_sub_scrn_area TYPE scrfname OPTIONAL
*             im_main_dynpro TYPE REF TO zcl_ic_main_dynpro_base.

    super-&gt;constructor( im_dynpro_nr = c_dynpro_nr
                        im_program_name = c_prog_name
                        im_sub_scrn_area = im_sub_scrn_area
                        im_main_dynpro = im_main_dynpro-&gt;get_main_dynpro( )
                        im_ic_value = im_ic_value ).

    &quot;todo WEG   impl_ctx = get_ic_attrib_value( )-&gt;get_ic_class_attrib( )-&gt;get_class( )-&gt;get_impl_ctx( ).
    parse_comp_to_dyn( ).
  ENDMETHOD.                    &quot;constructor

  METHOD handle_pbo.
    super-&gt;handle_pbo( ).

    IF inj_obj_dynpro = abap_true.
      inj_obj_dynpro = abap_false.

      CALL SCREEN lcl_ic_select_inj_obj_dynpro=&gt;c_dynpro_nr STARTING AT 10 10.
      select_inj_obj_dynpro-&gt;close( ).
    ENDIF.

  ENDMETHOD.                    &quot;handle_pbo

  METHOD handle_pai.
    DATA l_path TYPE zic_path.

    super-&gt;handle_pai( im_action ).

    CLEAR l_path.

    CASE im_action.
      WHEN c_show_ic_inj_obj_action.

        IF get_ic_inj_object( ) IS BOUND.

          l_path = get_ic_inj_object( )-&gt;get_path( ).
        ENDIF.

      WHEN c_select_ic_inj_obj_action.
        select_inj_obj_dynpro = lcl_ic_select_inj_obj_dynpro=&gt;create( im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area
                                                                       im_main_dynpro = get_main_dynpro( )
                                                                       im_ic_inj_object = get_ic_inj_object( ) ).

        zcl_ic_dynpro_manager=&gt;instance( )-&gt;set_current_dynpro( im_sub_scrn_area = lcl_ic_application=&gt;c_subscr_no_screen_area
                                                                im_dynpro = select_inj_obj_dynpro ).
        inj_obj_dynpro = abap_true.
*      WHEN c_show_ic_attrib_action.
*
*        IF  get_ic_attrib_value( ) IS BOUND
*            AND get_ic_attrib_value( )-&gt;get_ic_class_attrib( ) IS BOUND.
*
*          l_path = get_ic_attrib_value( )-&gt;get_ic_class_attrib( )-&gt;get_path( ).
*        ENDIF.
*
*      WHEN c_ic_class_combo OR c_ic_attrib_combo.
*        parse_dyn_to_comp( ).
*        fill_comp_selects( impl_ctx ).
    ENDCASE.
*
    IF l_path IS NOT INITIAL.
      RAISE EVENT show_ic_comp EXPORTING ex_path = l_path.
    ENDIF.

  ENDMETHOD.                    &quot;handle_pai

  METHOD parse_comp_to_dyn.
    super-&gt;parse_comp_to_dyn( ).

    IF get_ic_inj_object( ) IS BOUND.
      DATA lo_inj_obj TYPE REF TO zcl_ic_inj_object.

      refresh_inj_obj( ).

      lo_inj_obj = get_ic_inj_object( ).

      lcl_ic_dynpro_utils=&gt;parse_inj_obj_to_combo(
          EXPORTING im_inj_obj = lo_inj_obj
                    im_inj_obj_id = c_combo_inj_obj
          CHANGING  ch_inj_obj_val = ic_inj_obj_combo ).
    ELSE.
      CLEAR ic_inj_obj_combo.
    ENDIF.

    IF get_ic_type_value( ) IS BOUND
      AND get_ic_type_value( )-&gt;get_inj_ic_value( ) IS BOUND.
      RETURN.
    ENDIF.

  ENDMETHOD.                    &quot;parse_comp_to_dyn

  METHOD parse_dyn_to_comp.
    super-&gt;parse_dyn_to_comp( ).

*   Change IC component
    IF get_ic_inj_object( ) IS NOT BOUND.
      RETURN.
    ENDIF.

*   select new inj obj
    DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          l_inj_obj_nr TYPE zic_inj_obj_nr,
          lo_inj_obj TYPE REF TO zcl_ic_inj_object.

    lo_impl_ctx = get_ic_inj_object( )-&gt;get_impl_ctx( ).

    IF lo_impl_ctx IS BOUND
       AND ic_inj_obj_combo &lt;&gt; space.

      l_inj_obj_nr = ic_inj_obj_combo.

      lo_inj_obj = lo_impl_ctx-&gt;get_inj_object( l_inj_obj_nr ).
      get_ic_type_value( )-&gt;set_ic_inj_obj( lo_inj_obj  ).
    ENDIF.

    IF get_ic_type_value( ) IS NOT BOUND
     AND get_ic_type_value( )-&gt;get_inj_ic_value( ) IS NOT BOUND.
      RETURN.
    ENDIF.

*   change IC inj object value

*       TODO assign value from inj-obj to inj.type value
*      lo_class_value ?= ic_component.
*      lo_class_value-&gt;set_ic_class( lo_class ).

  ENDMETHOD.                    &quot;parse_dyn_to_comp

  METHOD refresh_inj_obj.  &quot;TODO may be try to load automatically via persistent class or extra mapping?
    DATA: lo_impl_ctx TYPE REF TO zcl_ic_impl_context,
          lo_inj_obj TYPE REF TO zcl_ic_inj_object.

    IF get_ic_inj_object( ) IS NOT BOUND.
      RETURN.
    ENDIF.

    lo_impl_ctx = get_ic_inj_object( )-&gt;get_impl_ctx( ).

    IF lo_impl_ctx IS BOUND.
      lo_inj_obj = lo_impl_ctx-&gt;get_inj_object( get_ic_inj_object( )-&gt;get_object_nr( ) ).

      IF lo_inj_obj IS BOUND.
        get_ic_type_value( )-&gt;set_ic_inj_obj( im_ic_inj_object = lo_inj_obj  ).
      ENDIF.
    ENDIF.

  ENDMETHOD.                    &quot;refresh_inj_obj

  METHOD get_ic_inj_object.
*   RETURNING value(rt_inj_obj) TYPE REF TO zcl_ic_inj_object,

    IF get_ic_type_value( ) IS BOUND
      AND get_ic_type_value( )-&gt;get_ic_inj_obj( ) IS BOUND.

      rt_inj_obj ?= get_ic_type_value( )-&gt;get_ic_inj_obj( ).
    ENDIF.

  ENDMETHOD.                    &quot;get_ic_inj_type_object

  METHOD get_ic_type_value.
* RETURNING VALUE(rt_type_value) type ref to zcl_ic_type_value,

    IF ic_component IS BOUND.
      rt_type_value ?= ic_component.
    ENDIF.
  ENDMETHOD.                    &quot;get_ic_type_value

ENDCLASS.                    &quot;lcl_ic_type_value_dynpro IMPLEMENTATION</source>
 </PROG>
 <PROG NAME="ZIC_APP_GUI" VARCL="X" SUBC="1" RMAND="001" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Program ZIC_APP_GUI" LENGTH="19 "/>
   </language>
  </textPool>
  <dynpros>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0100" FNUM="0100" BZMX="29 " BZBR="167 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="29 " NOCO="169 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC main screen 100">
    <dynprofield FNAM="IC_SUB_SCR_SEARCH" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="38" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="01" ADEZ="01"/>
    <dynprofield FNAM="IC_SUB_SCR_CENTER" DIDX="0017" FLG1="00" FLG2="00" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="6A" LINE="01" COLN="3F" LANF="00" LBLK="00" LREP="00" AUTH="102" AGLT="01" ADEZ="01"/>
    <dynprofield FNAM="IC_SUB_SCR_TREE" DIDX="0014" FLG1="00" FLG2="00" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="38" LINE="0A" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="103" AGLT="01" ADEZ="01"/>
    <dynprofield FNAM="IC_SUB_SCR_ERRORS" DIDX="0006" FLG1="00" FLG2="F0" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="6A" LINE="18" COLN="3F" LANF="00" LBLK="00" LREP="00" AUTH="104" AGLT="03" ADEZ="35"/>
    <dynprofield FNAM="G_OKCODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE object_mapping.
  MODULE status.
  MODULE navigation.

  CALL SUBSCREEN ic_sub_scr_search
      INCLUDING sy-repid g_subscr_search_dynnr.

  CALL SUBSCREEN ic_sub_scr_tree
   INCLUDING sy-repid g_subscr_cont_tree_dynnr.

  CALL SUBSCREEN ic_sub_scr_center
    INCLUDING sy-repid g_subscr_center_dynnr.

  CALL SUBSCREEN ic_sub_scr_errors
    INCLUDING sy-repid g_subscr_errors_dynnr.

PROCESS AFTER INPUT.
  MODULE s0100_exit AT EXIT-COMMAND.

  CALL SUBSCREEN ic_sub_scr_search.
  CALL SUBSCREEN ic_sub_scr_tree.
  CALL SUBSCREEN ic_sub_scr_center.

  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0200" TYPE="I" FNUM="0200" BZMX="8 " BZBR="56 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Search locator">
    <dynprofield FNAM="BOX_SEARCH" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="38" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Search"/>
    <dynprofield FNAM="CMD_RETRIEVE" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="06" LINE="02" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@41@" RES1="                                                                                                                                                                        RETRIEVE_CONT"/>
    <dynprofield FNAM="CMD_NEW_CONT" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="06" LINE="02" COLN="09" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="@0Y@" RES1="                                                                                                                                                                        CREATE_CONT"/>
    <dynprofield FNAM="GO_SEARCH_DYNPRO-&gt;CONT_NR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="04" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="iContainer number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_SEARCH_DYNPRO-&gt;CONT_NR" DIDX="0000" FLG1="80" FLG2="0C" FLG3="80" FMB1="00" FMB2="08" LENG="08" LINE="04" COLN="17" LANF="00" LBLK="00" LREP="00" PAID="CONT_NR" TYPE="NUMC" DMAC="ZIC_CONTAINER" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GO_SEARCH_DYNPRO-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Container name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_SEARCH_DYNPRO-&gt;NAME" DIDX="0000" FLG1="80" FLG2="0C" FLG3="80" FMB1="00" FMB2="08" LENG="1A" LINE="05" COLN="17" LANF="00" LBLK="00" LREP="00" PAID="NAME" TYPE="CHAR" DMAC="ZIC_CONTAINER" ITYP="C" AGLT="00" ADEZ="00" STXT="__________________________" RES1="X"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0300" TYPE="I" FNUM="0300" BZMX="27 " BZBR="56 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC container tree dynpro">
    <dynprofield FNAM="BOX_OVERVIEW" DIDX="001B" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="38" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Overview"/>
    <dynprofield FNAM="CMD_EXECUTE" DIDX="0004" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="02" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@15@__" RES1="                                                                                                                                                                        RETRIEVE_CONT"/>
    <dynprofield FNAM="IC_CONT_TREE" DIDX="0017" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="32" LINE="04" COLN="04" LANF="00" LBLK="00" LREP="00" AUTH="103" AGLT="01" ADEZ="01"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0400" TYPE="I" FNUM="0400" BZMX="16 " BZBR="114 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Center screen">
    <dynprofield FNAM="IC_SUB_SCR_CENTER_TOP" DIDX="0010" FLG1="00" FLG2="00" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="71" LINE="01" COLN="03" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="01" ADEZ="01"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE navigation.

  CALL SUBSCREEN ic_sub_scr_center_top
    INCLUDING sy-repid g_subscr_center_top_dynnr.

PROCESS AFTER INPUT.
  CALL SUBSCREEN ic_sub_scr_center_top.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0410" TYPE="I" FNUM="0410" BZMX="16 " BZBR="114 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="17 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Error screen">
    <dynprofield FNAM="IC_ALV_ERRORS" DIDX="0010" FLG1="00" FLG2="10" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="71" LINE="01" COLN="03" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="01" ADEZ="05"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0500" TYPE="I" FNUM="0500" BZMX="8 " BZBR="85 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC container dynpro">
    <dynprofield FNAM="BOX_IC_CONT" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Container"/>
    <dynprofield FNAM="GO_CONTAINER_DYN-&gt;NUMBER" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="iContainer number" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CONTAINER_DYN-&gt;NUMBER" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="08" LINE="03" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X                                      00"/>
    <dynprofield FNAM="GO_CONTAINER_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="04" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Container name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CONTAINER_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="04" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1="X                                      00"/>
    <dynprofield FNAM="GO_CONTAINER_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="05" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CONTAINER_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="05" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="GO_CONTAINER_DYN-&gt;CONT_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Container type" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CONTAINER_DYN-&gt;CONT_TYPE" DIDX="000E" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="01" LINE="06" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" RES1="XDL K                                  00"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0501" TYPE="I" FNUM="0501" BZMX="8 " BZBR="85 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create IC container dynpro">
    <dynprofield FNAM="BOX_IC_CONT" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Container"/>
    <dynprofield FNAM="GO_CREATE_CONT_DYN-&gt;NUMBER" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="iContainer number" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_CONT_DYN-&gt;NUMBER" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="03" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X                                      00"/>
    <dynprofield FNAM="GO_CREATE_CONT_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="04" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Container name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_CONT_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="04" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1="X                                      00"/>
    <dynprofield FNAM="GO_CREATE_CONT_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="05" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_CONT_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="05" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="GO_CREATE_CONT_DYN-&gt;CONT_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Container type" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_CONT_DYN-&gt;CONT_TYPE" DIDX="000E" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="01" LINE="06" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" RES1="XDL K                                  00"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0505" TYPE="I" FNUM="0505" BZMX="8 " BZBR="85 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC Container Context">
    <dynprofield FNAM="BOX_IC_CONT_CTX" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Container context"/>
    <dynprofield FNAM="GO_CONT_CTX_DYN-&gt;PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CONT_CTX_DYN-&gt;PATH" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="X"/>
    <dynprofield FNAM="GO_CONT_CTX_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Context name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CONT_CTX_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CONT_CTX_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CONT_CTX_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0506" TYPE="I" FNUM="0506" BZMX="7 " BZBR="85 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create IC Container Context">
    <dynprofield FNAM="BOX_IC_CONT_CTX" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Container context"/>
    <dynprofield FNAM="GO_CREATE_CONT_CTX_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0B" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Parent Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_CONT_CTX_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_CONT_CTX_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Context name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_CONT_CTX_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_CONT_CTX_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_CONT_CTX_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0510" TYPE="I" FNUM="0510" BZMX="18 " BZBR="87 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="19 " NOCO="91 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC Injection context">
    <dynprofield FNAM="BOX_IC_INJ_CTX" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="57" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Injection Context"/>
    <dynprofield FNAM="GO_IMPL_CTX_DYN-&gt;PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="03" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_IMPL_CTX_DYN-&gt;PATH" DIDX="003B" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="X"/>
    <dynprofield FNAM="GO_IMPL_CTX_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="05" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Context name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_IMPL_CTX_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_IMPL_CTX_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="06" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_IMPL_CTX_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="INSERT_LINE" DIDX="0002" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="0A" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" GRP1="INP" AGLT="00" ADEZ="00" STXT="@17@" RES1="                                                                                                                                                                        INJ_LINE_INSERT"/>
    <dynprofield FNAM="DELETE_LINE" DIDX="0002" FLG1="00" FLG2="00" FLG3="08" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="0A" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" GRP1="INP" AGLT="00" ADEZ="00" STXT="@18@" RES1="                                                                                                                                                                        INJ_LINE_DELETE"/>
    <dynprofield FNAM="INJ_OBJECT_CONT" DIDX="0008" FLG1="00" FLG2="10" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="55" LINE="0B" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="104" AGLT="01" ADEZ="03"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0511" TYPE="I" FNUM="0511" BZMX="18 " BZBR="84 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create IC Injection context">
    <dynprofield FNAM="BOX_IC_CONT_CTX" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Injection context"/>
    <dynprofield FNAM="GO_CREATE_INJ_CTX_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0B" LINE="03" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Parent Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_CTX_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_INJ_CTX_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="05" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Context name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_CTX_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_INJ_CTX_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="06" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_CTX_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0515" TYPE="I" FNUM="0515" BZMX="12 " BZBR="85 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC Class Implementation">
    <dynprofield FNAM="BOX_IC_CLASS" DIDX="000C" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Class"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;PATH" DIDX="0000" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3A" LINE="03" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="__________________________________________________________" RES1="X"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="05" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Class Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3A" LINE="06" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="__________________________________________________________"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;CLASS_NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="08" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Class name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;CLASS_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="08" LENG="1E" LINE="08" COLN="14" LANF="00" LBLK="00" LREP="00" PAID="CLASS" TYPE="CHAR" DMAC="DD_CLASS" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;RETURN_CLASS_NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="09" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Return-class" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;RETURN_CLASS_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="08" LENG="1E" LINE="09" COLN="14" LANF="00" LBLK="00" LREP="00" PAID="CLASS" TYPE="CHAR" DMAC="DD_CLASS" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;DEFAULT_CONSTR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="30" FMB2="00" LENG="01" LINE="0B" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="C" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="GO_CLASS_DYN-&gt;DEFAULT_CONSTR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="C" FMB1="30" FMB2="00" LENG="13" LINE="0B" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="2" AGLT="00" ADEZ="00" STXT="Default constructor"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0516" TYPE="I" FNUM="0516" BZMX="14 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="14 " NOCO="87 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create IC Class Implementation">
    <dynprofield FNAM="BOX_IC_CLASS" DIDX="000C" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Class"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0B" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Parent Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="05" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Class Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;CLASS_NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="08" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Class name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;CLASS_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="08" COLN="14" LANF="00" LBLK="00" LREP="00" PAID="CLASS" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;RETURN_CLASS_NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="09" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Return-class" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;RETURN_CLASS_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="09" COLN="14" LANF="00" LBLK="00" LREP="00" PAID="CLASS" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;DEFAULT_CONSTR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="30" FMB2="00" LENG="01" LINE="0B" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="C" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="GO_CREATE_CLASS_DYN-&gt;DEFAULT_CONSTR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="C" FMB1="30" FMB2="00" LENG="13" LINE="0B" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="2" AGLT="00" ADEZ="00" STXT="Default constructor"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0520" TYPE="I" FNUM="0520" BZMX="12 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC Method implementation">
    <dynprofield FNAM="BOX_IC_METHOD" DIDX="000C" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Method"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;PATH" DIDX="003B" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="X"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Method" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="3D" LINE="05" COLN="15" LANF="00" LBLK="00" LREP="00" PAID="MTDNAME" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________________________________________________"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3D" LINE="06" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________________________________________________"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;METHOD_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="08" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Method Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;METHOD_TYPE" DIDX="0014" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="01" LINE="08" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" RES1="XDL"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;DECLARE_LEVEL" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="09" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Mth. Dec. level" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;DECLARE_LEVEL" DIDX="0014" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="01" LINE="09" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" RES1="XDL"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;ACTIVE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="30" FMB2="00" LENG="01" LINE="0B" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="C" AGLT="00" ADEZ="00" RES1="X"/>
    <dynprofield FNAM="GO_METHOD_DYN-&gt;ACTIVE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="C" FMB1="30" FMB2="00" LENG="10" LINE="0B" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="2" AGLT="00" ADEZ="00" STXT="Method is active"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0521" TYPE="I" FNUM="0521" BZMX="12 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create IC Method implementation">
    <dynprofield FNAM="BOX_IC_METHOD" DIDX="000C" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Method"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0B" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Parent Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Method" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="3D" LINE="05" COLN="15" LANF="00" LBLK="00" LREP="00" PAID="MTDNAME" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3D" LINE="06" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;METHOD_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="08" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Method Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;METHOD_TYPE" DIDX="0014" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="01" LINE="08" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" RES1="XDL"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;DECLARE_LEVEL" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="09" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Mth. Dec. level" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;DECLARE_LEVEL" DIDX="0014" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="01" LINE="09" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" RES1="XDL"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;ACTIVE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FILL="C" FMB1="30" FMB2="00" LENG="01" LINE="0B" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="C" AGLT="00" ADEZ="00" RES1="X"/>
    <dynprofield FNAM="GO_CREATE_METHOD_DYN-&gt;ACTIVE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="C" FMB1="30" FMB2="00" LENG="10" LINE="0B" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" ITYP="2" AGLT="00" ADEZ="00" STXT="Method is active"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0525" TYPE="I" FNUM="0525" BZMX="20 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="130 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC Class Attribute">
    <dynprofield FNAM="BOX_IC_CLASS_ATTRIB" DIDX="0009" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Class attribute"/>
    <dynprofield FNAM="GO_CLASS_ATTRIB_DYN-&gt;PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CLASS_ATTRIB_DYN-&gt;PATH" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3B" LINE="03" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="___________________________________________________________" RES1="X"/>
    <dynprofield FNAM="GO_CLASS_ATTRIB_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Interface Comp." RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CLASS_ATTRIB_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="3B" LINE="05" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________________________________"/>
    <dynprofield FNAM="GO_CLASS_ATTRIB_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CLASS_ATTRIB_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3B" LINE="06" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___________________________________________________________"/>
    <dynprofield FNAM="IC_SUB_SCR_VALUE" DIDX="000A" FLG1="00" FLG2="00" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="78" LINE="0B" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="102" AGLT="04" ADEZ="38"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.
  MODULE navigation.

  CALL SUBSCREEN ic_sub_scr_value
    INCLUDING sy-repid g_subscr_classval_dynnr.

PROCESS AFTER INPUT.

  CALL SUBSCREEN ic_sub_scr_value.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0526" TYPE="I" FNUM="0526" BZMX="17 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="89 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create IC Class Attribute">
    <dynprofield FNAM="BOX_IC_CLASS_ATTRIB" DIDX="0011" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Class attribute"/>
    <dynprofield FNAM="GO_CREATE_ATTRIB_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0B" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Parent Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_ATTRIB_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_ATTRIB_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Interface Comp." RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_ATTRIB_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="05" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_ATTRIB_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_ATTRIB_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_ATTRIB_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="08" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Value Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_ATTRIB_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="03" LINE="08" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___" RES1="X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-DATA_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="09" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Associated Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-DATA_TYPE" DIDX="0000" FLG1="81" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="3D" LINE="09" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________________________________________________"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-DATA_VALUE" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0A" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Initial value" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-DATA_VALUE" DIDX="0000" FLG1="81" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3D" LINE="0A" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_____________________________________________________________"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-TABLE_NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0B" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Table Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-TABLE_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="0B" COLN="15" LANF="00" LBLK="00" LREP="00" PAID="DTB" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-IC_CLASS" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0C" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC class number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-IC_CLASS" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="0C" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-IC_PARAM_CLASS" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0D" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC class number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-IC_PARAM_CLASS" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="0D" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-IC_PARAM_METHOD" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="10" LINE="0E" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC method number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-IC_PARAM_METHOD" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="0E" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-IC_PARAM" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="0F" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Parameter nr." RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GWA_IC_CLASS_ATTRIB-IC_PARAM" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="0F" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0530" TYPE="I" FNUM="0530" BZMX="20 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="21 " NOCO="121 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC Method parameter">
    <dynprofield FNAM="BOX_IC_METHOD_PARAM" DIDX="0009" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Method parameter"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="06" LINE="04" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;PATH" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="04" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="06" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="07" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="07" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="IC_SUB_SCR_VALUE" DIDX="000A" FLG1="00" FLG2="00" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="78" LINE="0B" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="102" AGLT="04" ADEZ="38"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.
  MODULE navigation.


  CALL SUBSCREEN ic_sub_scr_value
    INCLUDING sy-repid g_subscr_value_dynnr.



PROCESS AFTER INPUT.

  CALL SUBSCREEN ic_sub_scr_value.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0531" TYPE="I" FNUM="0531" BZMX="20 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create IC Method parameter">
    <dynprofield FNAM="BOX_IC_METHOD_PARAM" DIDX="0014" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Method parameter"/>
    <dynprofield FNAM="GO_CREATE_PARAM_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="04" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Parent Path" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_PARAM_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="04" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="GO_CREATE_PARAM_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_PARAM_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="06" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
    <dynprofield FNAM="GO_CREATE_PARAM_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="07" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_PARAM_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="07" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="09" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Value Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="03" LINE="09" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___" RES1="X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;DATA_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0A" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Associated Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;DATA_TYPE" DIDX="0061" FLG1="81" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="84" LINE="0A" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________________________________________________________________________________"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;DATA_VALUE" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0B" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Initial value" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;DATA_VALUE" DIDX="0061" FLG1="81" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="84" LINE="0B" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________________________________________________________________________________"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;TABLE_NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0C" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Table Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;TABLE_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="0C" COLN="18" LANF="00" LBLK="00" LREP="00" PAID="DTB" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_CLASS" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0D" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC class number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_CLASS" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="0D" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_PARAM_CLASS" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0E" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC class number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_PARAM_CLASS" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="0E" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_PARAM_METHOD" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="10" LINE="0F" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC method number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_PARAM_METHOD" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="0F" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_PARAM" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="10" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Parameter nr." RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_PARAM" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="08" LINE="10" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_SQL_QUERY" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="11" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="String" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;IC_SQL_QUERY" DIDX="0061" FLG1="81" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="FF" LINE="11" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="STRG" ITYP="g" AGLT="00" ADEZ="00" STXT="____________________________________________________________________________________________________________________________________"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;SQL_RESULT_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="12" LINE="12" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC SQL result type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_METHOD_PAR_DYN-&gt;SQL_RESULT_TYPE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="03" LINE="12" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___" RES1="X"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0535" TYPE="I" FNUM="0535" BZMX="8 " BZBR="85 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="9 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="IC Injection Type">
    <dynprofield FNAM="BOX_IC_CONT_CTX" DIDX="0008" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="55" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Injection Type"/>
    <dynprofield FNAM="GO_INJ_TYPE_DYN-&gt;PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="03" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Path" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_INJ_TYPE_DYN-&gt;PATH" DIDX="003B" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="X                                      00"/>
    <dynprofield FNAM="GO_INJ_TYPE_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="05" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_INJ_TYPE_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
    <dynprofield FNAM="GO_INJ_TYPE_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="06" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_INJ_TYPE_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="                                       00"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0537" TYPE="M" FNUM="0000" BZMX="20 " BZBR="140 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="20 " NOCO="141 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create IC Injection Type Object">
    <dynprofield FNAM="BOX_IC_CONT_CTX" DIDX="0014" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="8C" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Injection Object Type"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0B" LINE="03" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Parent Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;PARENT_PATH" DIDX="0000" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="13" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="05" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="06" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="INJ_TYPE_BOX" DIDX="0006" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="73" LINE="09" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="Injection Type"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CONT_NR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="0A" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="iContainer number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CONT_NR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="08" LINE="0A" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CONT_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="0A" COLN="22" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1="X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CTX_NR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="0B" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Context number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CTX_NR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="08" LINE="0B" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_CTX_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="0B" COLN="22" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_ICTX_NR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="0C" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Injection Context" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_ICTX_NR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="08" LINE="0C" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="________" RES1="X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_ICTX_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="1E" LINE="0C" COLN="22" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_ICTX_PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="04" LINE="0D" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_INJ_OBJ_DYN-&gt;INJ_TYPE_ICTX_PATH" DIDX="005B" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="78" LINE="0D" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="________________________________________________________________________________________________________________________"/>
    <dynprofield FNAM="CONT_INJ_OBJECT" DIDX="0005" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="2B" LINE="0F" COLN="04" LANF="00" LBLK="00" LREP="00" AUTH="103" AGLT="01" ADEZ="01"/>
    <dynprofield FNAM="G_OKCODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE object_mapping.
  MODULE status.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.

PROCESS ON VALUE-REQUEST.
  FIELD go_create_inj_obj_dyn-&gt;inj_type_ictx_nr MODULE value_inj_type.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0540" TYPE="I" FNUM="0540" BZMX="15 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="30 " NOCO="121 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create IC value Main screen">
    <dynprofield FNAM="BOX_IC_VALUE_HOLDER" DIDX="0007" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Holder"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;HOLDER_PATH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="06" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Path" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;HOLDER_PATH" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="3C" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="X"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;HOLDER_NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;HOLDER_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;HOLDER_DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;HOLDER_DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="BOX_IC_VALUE_CREATE" DIDX="0007" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="09" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="IC Value Header"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="0B" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Value Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;VALUE_TYPE" DIDX="0017" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="03" LINE="0B" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___" RES1="XDL K                                                                                                                                                                   VALUE_BOX"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="0D" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="0D" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="0E" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_VALUE_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="0E" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="IC_SUB_SCR_CREATE_VALUE" DIDX="000E" FLG1="00" FLG2="00" FLG3="00" FILL="B" FMB1="30" FMB2="00" LENG="78" LINE="11" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="103" AGLT="04" ADEZ="38"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

  CALL SUBSCREEN ic_sub_scr_create_value
    INCLUDING sy-repid g_subscr_create_val_dynnr.

PROCESS AFTER INPUT.

  CALL SUBSCREEN ic_sub_scr_create_value.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0542" TYPE="I" FNUM="0542" BZMX="11 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="12 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create value header screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="000B" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Data"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0550" TYPE="I" FNUM="0550" BZMX="11 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="12 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Data value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="000B" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Data"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Value Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;VALUE_TYPE" DIDX="0017" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="03" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="___" RES1="XDL K"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;DATA_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="08" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Associated Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;DATA_TYPE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="08" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;DATA_VALUE" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="09" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Initial value" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_DATA_DYN-&gt;DATA_VALUE" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="61" LINE="09" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_________________________________________________________________________________________________"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0551" TYPE="I" FNUM="0551" BZMX="9 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="10 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Table value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="0009" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Data"/>
    <dynprofield FNAM="GO_VALUE_TABLE_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Value Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_TABLE_DYN-&gt;VALUE_TYPE" DIDX="0019" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="17" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_______________________" RES1="XDL K"/>
    <dynprofield FNAM="GO_VALUE_TABLE_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_TABLE_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_VALUE_TABLE_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_TABLE_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_VALUE_TABLE_DYN-&gt;TABLE_NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="08" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Table Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_TABLE_DYN-&gt;TABLE_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="08" COLN="18" LANF="00" LBLK="00" LREP="00" PAID="DTB" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0552" TYPE="I" FNUM="0552" BZMX="10 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="10 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Class value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="000A" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Class"/>
    <dynprofield FNAM="GO_VALUE_CLASS_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Value Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_CLASS_DYN-&gt;VALUE_TYPE" DIDX="0019" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="17" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_______________________" RES1="XDL K"/>
    <dynprofield FNAM="GO_VALUE_CLASS_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_CLASS_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_VALUE_CLASS_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_CLASS_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_VALUE_CLASS_DYN-&gt;IC_CLASS_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="08" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Class Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_CLASS_DYN-&gt;IC_CLASS_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="08" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1=" DL                                                                                                                                                                     IC_CLASS_COMBO"/>
    <dynprofield FNAM="CMD_GET_CLASS" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="08" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_CLASS"/>
    <dynprofield FNAM="CMD_CHOOSE" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="07" LINE="08" COLN="3E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="@2Q@" RES1="                                                                                                                                                                        SEARCH_CLASS"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0553" TYPE="I" FNUM="0553" BZMX="11 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="11 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Param value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="000B" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Parameter"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Value Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;VALUE_TYPE" DIDX="0019" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="17" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_______________________" RES1="XDL K"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;IC_CLASS_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="08" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Class Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;IC_CLASS_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="08" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1=" DL                                                                                                                                                                     IC_CLASS_COMBO"/>
    <dynprofield FNAM="CMD_GET_CLASS" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="08" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_CLASS"/>
    <dynprofield FNAM="CMD_CHOOSE" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="07" LINE="08" COLN="3E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="@2Q@" RES1="                                                                                                                                                                        SEARCH_CLASS"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;IC_METHOD_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="09" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Method Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;IC_METHOD_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="21" LINE="09" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_________________________________" RES1=" DL                                                                                                                                                                     IC_METHOD_COMBO"/>
    <dynprofield FNAM="CMD_GET_METHOD" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="09" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_METHOD"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;IC_PARAM_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="0A" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Param Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_PARAM_DYN-&gt;IC_PARAM_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="0A" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1=" DL                                                                                                                                                                     IC_PARAM_COMBO"/>
    <dynprofield FNAM="CMD_GET_PARAM" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="0A" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="105" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_PARAM"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.

  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0554" TYPE="I" FNUM="0554" BZMX="11 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="11 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Attribute value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="000B" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Parameter"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Value Type" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;VALUE_TYPE" DIDX="0019" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="17" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_______________________" RES1="XDL K                                  00"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1="                                       00"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;IC_CLASS_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="08" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Class Name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;IC_CLASS_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="08" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1=" DL                                    00                                                                                                                               IC_CLASS_COMBO"/>
    <dynprofield FNAM="CMD_GET_CLASS" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="08" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_CLASS"/>
    <dynprofield FNAM="CMD_CHOOSE" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="07" LINE="08" COLN="3E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="@2Q@" RES1="                                                                                                                                                                        SEARCH_CLASS"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;IC_ATTRIB_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="09" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Attrib Name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_VALUE_ATTRIB_DYN-&gt;IC_ATTRIB_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="21" LINE="09" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_________________________________" RES1=" DL                                    00                                                                                                                               IC_ATTRIB_COMBO"/>
    <dynprofield FNAM="CMD_GET_ATTRIB" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="09" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_ATTRIB"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.

  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0555" TYPE="I" FNUM="0555" BZMX="11 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="11 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Type value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="000B" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Parameter"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;VALUE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0A" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Value Type" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;VALUE_TYPE" DIDX="0019" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="17" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_______________________" RES1="XDL K"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;OBJECT_NR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="04" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC value number" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;OBJECT_NR" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="07" LINE="04" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="N" AGLT="00" ADEZ="00" STXT="_______"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Subcomponent" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="05" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="06" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC description" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;DESCRIPTION" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="06" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;IC_INJ_OBJ_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="14" LINE="08" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Inj object name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_VALUE_TYPE_DYN-&gt;IC_INJ_OBJ_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="08" COLN="1A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1=" DL"/>
    <dynprofield FNAM="CMD_GET_CLASS" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="08" COLN="3C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_INJ_OBJ"/>
    <dynprofield FNAM="CMD_CHOOSE" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="07" LINE="08" COLN="40" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="@2Q@" RES1="                                                                                                                                                                        SEARCH_CLASS"/>
    <dynprofield FNAM="CMD_SELECT_VALUE" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="09" COLN="3C" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00" STXT="@9S@" RES1="                                                                                                                                                                        SELECT_IC_INJ_OBJ"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.

  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0556" FNUM="0000" BZMX="19 " BZBR="74 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Select Injection Object Value">
    <dynprofield FNAM="BOX_SELECT_TYPE_VALUE" DIDX="0013" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="4A" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="Select Type Value"/>
    <dynprofield FNAM="IC_INJ_TYPE_VALUE" DIDX="0010" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="46" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" AUTH="102" AGLT="01" ADEZ="01"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE object_mapping.
  MODULE status.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0600" TYPE="I" FNUM="0600" BZMX="6 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="7 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create Data value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="0006" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Data"/>
    <dynprofield FNAM="GO_CREATE_DATA_DYN-&gt;DATA_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Associated Type" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_DATA_DYN-&gt;DATA_TYPE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="3C" LINE="03" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________________________________________________" RES1="                                       00"/>
    <dynprofield FNAM="GO_CREATE_DATA_DYN-&gt;DATA_VALUE" DIDX="0000" FLG1="00" FLG2="02" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="04" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Initial value" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_DATA_DYN-&gt;DATA_VALUE" DIDX="0000" FLG1="80" FLG2="02" FLG3="80" FMB1="30" FMB2="00" LENG="61" LINE="04" COLN="17" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_________________________________________________________________________________________________"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0601" TYPE="I" FNUM="0601" BZMX="5 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="5 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create Table value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="0005" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Table"/>
    <dynprofield FNAM="GO_CREATE_TAB_DYN-&gt;TABLE_NAME" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="03" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Table Name" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="GO_CREATE_TAB_DYN-&gt;TABLE_NAME" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="30" FMB2="00" LENG="1E" LINE="03" COLN="17" LANF="00" LBLK="00" LREP="00" PAID="DTB" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0602" TYPE="I" FNUM="0602" BZMX="5 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="5 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create Class value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="0005" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Class"/>
    <dynprofield FNAM="GO_CREATE_OBJECT_DYN-&gt;IC_CLASS_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Class Name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_OBJECT_DYN-&gt;IC_CLASS_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1=" DL                                    00                                                                                                                               IC_CLASS_COMBO"/>
    <dynprofield FNAM="CMD_GET_CLASS" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="03" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_CLASS"/>
    <dynprofield FNAM="CMD_CHOOSE" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="07" LINE="03" COLN="3E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="@2Q@" RES1="                                                                                                                                                                        SEARCH_CLASS"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0603" TYPE="I" FNUM="0603" BZMX="7 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="7 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create Method Param value screen">
    <dynprofield FNAM="BOX_IC_VALUE_PARAM" DIDX="0007" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Method Parameter"/>
    <dynprofield FNAM="GO_CREATE_PARAMVAL_DYN-&gt;IC_CLASS_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Class Name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_PARAMVAL_DYN-&gt;IC_CLASS_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1=" DL                                    00                                                                                                                               IC_CLASS_COMBO"/>
    <dynprofield FNAM="CMD_GET_CLASS" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="03" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_CLASS"/>
    <dynprofield FNAM="CMD_CHOOSE" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="07" LINE="03" COLN="3E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="@2Q@" RES1="                                                                                                                                                                        SEARCH_CLASS"/>
    <dynprofield FNAM="GO_CREATE_PARAMVAL_DYN-&gt;IC_METHOD_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="04" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Method Name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_PARAMVAL_DYN-&gt;IC_METHOD_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="21" LINE="04" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_________________________________" RES1=" DL                                    00                                                                                                                               IC_METHOD_COMBO"/>
    <dynprofield FNAM="CMD_GET_METHOD" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="04" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_METHOD"/>
    <dynprofield FNAM="GO_CREATE_PARAMVAL_DYN-&gt;IC_PARAM_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="05" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Param Name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_PARAMVAL_DYN-&gt;IC_PARAM_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="05" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1=" DL                                    00                                                                                                                               IC_PARAM_COMBO"/>
    <dynprofield FNAM="CMD_GET_PARAM" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="05" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="105" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_PARAM"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0604" TYPE="I" FNUM="0604" BZMX="6 " BZBR="120 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="6 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Create Class Attrib value screen">
    <dynprofield FNAM="BOX_IC_VALUE_ATTRIB" DIDX="0006" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="78" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00" STXT="IC Value Class Attribute"/>
    <dynprofield FNAM="GO_CREATE_ATTRIBVAL_DYN-&gt;IC_CLASS_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Class Name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_ATTRIBVAL_DYN-&gt;IC_CLASS_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="03" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="______________________________" RES1=" DL                                    00                                                                                                                               IC_CLASS_COMBO"/>
    <dynprofield FNAM="CMD_GET_CLASS" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="03" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_CLASS"/>
    <dynprofield FNAM="CMD_CHOOSE" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="07" LINE="03" COLN="3E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="@2Q@" RES1="                                                                                                                                                                        SEARCH_CLASS"/>
    <dynprofield FNAM="GO_CREATE_ATTRIBVAL_DYN-&gt;IC_ATTRIB_COMBO" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0E" LINE="04" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="IC Attrib Name" RES1="                                       00                                                                                                                                                                                                               X"/>
    <dynprofield FNAM="GO_CREATE_ATTRIBVAL_DYN-&gt;IC_ATTRIB_COMBO" DIDX="0020" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="21" LINE="04" COLN="18" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="_________________________________" RES1=" DL                                    00                                                                                                                               IC_ATTRIB_COMBO"/>
    <dynprofield FNAM="CMD_GET_ATTRIB" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="04" LINE="04" COLN="3A" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00" STXT="@10@" RES1="                                                                                                                                                                        SHOW_IC_ATTRIB"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE do_pbo.

PROCESS AFTER INPUT.
  MODULE do_pai.</dynproflowsource>
   </dynpro>
   <dynpro PROG="ZIC_APP_GUI" DNUM="0999" TYPE="I" FNUM="0999" BZMX="0 " BZBR="0 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="120 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Empty screen.">
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.


PROCESS AFTER INPUT.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="EDIT_STATUS" MODAL="D" ACTCODE="000002" PFKCODE="000002" BUTCODE="0001" INT_NOTE="Status for editable components"/>
   <pfstatus_sta CODE="IMPL_CTX_STATUS" MODAL="D" ACTCODE="000003" PFKCODE="000003" BUTCODE="0001" INT_NOTE="Status for Implementation components"/>
   <pfstatus_sta CODE="MAIN_STATUS" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Main status"/>
   <pfstatus_sta CODE="MODAL_STATUS" MODAL="D" ACTCODE="000004" PFKCODE="000004" BUTCODE="0001" INT_NOTE="Status for a modal screen"/>
   <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Back"/>
   <pfstatus_fun CODE="CANCEL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancel"/>
   <pfstatus_fun CODE="CTRL-F1" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TOGGLE_DISPLAY_CHANGE" ICON_ID="@3I@" FUN_TEXT="EDIT"/>
   <pfstatus_fun CODE="EDIT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TOGGLE_DISPLAY_CHANGE" ICON_ID="@3I@" FUN_TEXT="EDIT" INFO_TEXT="Display&lt;-&gt;change (Ctrl+F1)"/>
   <pfstatus_fun CODE="EXIT" TEXTNO="001" TYPE="E" TEXT_TYPE="S" FUN_TEXT="Exit"/>
   <pfstatus_fun CODE="IC_CHECK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CHECK" ICON_ID="@38@" FUN_TEXT="CHECK"/>
   <pfstatus_fun CODE="IC_DEBUC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DEBUGGER_STEP_INTO" ICON_ID="@73@" FUN_TEXT="Debug" INFO_TEXT="Debug injection component"/>
   <pfstatus_fun CODE="IC_DEBUG" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DEBUGGER_STEP_INTO" ICON_ID="@73@" FUN_TEXT="Debug" INFO_TEXT="Debug injection component"/>
   <pfstatus_fun CODE="IC_EDIT" TEXTNO="001" TEXT_TYPE="S" ICON_ID="@3I@" FUN_TEXT="EDIT"/>
   <pfstatus_fun CODE="IC_EXEC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TEST" ICON_ID="@12@" FUN_TEXT="Direct processing" INFO_TEXT="Test IC component"/>
   <pfstatus_fun CODE="IC_TEST" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TEST" ICON_ID="@12@" FUN_TEXT="Direct processing" INFO_TEXT="Direct processing (F8)"/>
   <pfstatus_fun CODE="SAVE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_SAVE" ICON_ID="@2L@" FUN_TEXT="Save"/>
   <pfstatus_fun CODE="TEST" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_PASTE" ICON_ID="@2V@" FUN_TEXT="Te"/>
   <pfstatus_mtx CODE="000011" TEXT_TYPE="S" TEXT="Save"/>
   <pfstatus_but PFK_CODE="000002" CODE="0001" NO="01" PFNO="25"/>
   <pfstatus_but PFK_CODE="000002" CODE="0001" NO="02" PFNO="26"/>
   <pfstatus_but PFK_CODE="000003" CODE="0001" NO="01" PFNO="25"/>
   <pfstatus_but PFK_CODE="000003" CODE="0001" NO="02" PFNO="26"/>
   <pfstatus_but PFK_CODE="000003" CODE="0001" NO="03" PFNO="08"/>
   <pfstatus_but PFK_CODE="000003" CODE="0001" NO="04" PFNO="05"/>
   <pfstatus_but PFK_CODE="000004" CODE="0001" NO="01" PFNO="38"/>
   <pfstatus_but PFK_CODE="000004" CODE="0001" NO="02" PFNO="39"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="08" FUNCODE="IC_EXEC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="11" FUNCODE="SAVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="CANCEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="EXIT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="25" FUNCODE="EDIT" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="11" FUNCODE="SAVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="12" FUNCODE="CANCEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="15" FUNCODE="EXIT" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="25" FUNCODE="IC_EDIT" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="26" FUNCODE="IC_CHECK" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="05" FUNCODE="IC_DEBUG" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="08" FUNCODE="IC_EXEC" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="11" FUNCODE="SAVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="12" FUNCODE="CANCEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="15" FUNCODE="EXIT" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="25" FUNCODE="IC_EDIT" FUNNO="001"/>
   <pfstatus_pfk CODE="000003" PFNO="26" FUNCODE="IC_CHECK" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="38" FUNCODE="SAVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000004" PFNO="39" FUNCODE="CANCEL" FUNNO="001"/>
   <pfstatus_set STATUS="EDIT_STATUS" FUNCTION="BACK"/>
   <pfstatus_set STATUS="EDIT_STATUS" FUNCTION="CANCEL"/>
   <pfstatus_set STATUS="EDIT_STATUS" FUNCTION="CTRL-F1"/>
   <pfstatus_set STATUS="EDIT_STATUS" FUNCTION="EDIT"/>
   <pfstatus_set STATUS="EDIT_STATUS" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="EDIT_STATUS" FUNCTION="IC_CHECK"/>
   <pfstatus_set STATUS="EDIT_STATUS" FUNCTION="IC_EDIT"/>
   <pfstatus_set STATUS="EDIT_STATUS" FUNCTION="SAVE"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="BACK"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="CANCEL"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="EDIT"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="IC_CHECK"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="IC_DEBUC"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="IC_DEBUG"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="IC_EDIT"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="IC_EXEC"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="IC_TEST"/>
   <pfstatus_set STATUS="IMPL_CTX_STATUS" FUNCTION="SAVE"/>
   <pfstatus_set STATUS="MAIN_STATUS" FUNCTION="BACK"/>
   <pfstatus_set STATUS="MAIN_STATUS" FUNCTION="CANCEL"/>
   <pfstatus_set STATUS="MAIN_STATUS" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="MAIN_STATUS" FUNCTION="SAVE"/>
   <pfstatus_set STATUS="MODAL_STATUS" FUNCTION="CANCEL"/>
   <pfstatus_set STATUS="MODAL_STATUS" FUNCTION="SAVE"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="Status screen 510"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="Main status"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Main status"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000002" MODAL="D" INT_NOTE="Status for editable components"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000002" MODAL="D" INT_NOTE="Status for editable components"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000002" SUB_CODE="0001" MODAL="D" INT_NOTE="Status for editable components"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000003" MODAL="D" INT_NOTE="Status for Implementation components"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000003" MODAL="D" INT_NOTE="Status for Implementation components"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000003" SUB_CODE="0001" MODAL="D" INT_NOTE="Status for Implementation components"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000004" MODAL="D" INT_NOTE="Status for a modal screen"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000004" MODAL="D" INT_NOTE="Status for a modal screen"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000004" SUB_CODE="0001" MODAL="D" INT_NOTE="Status for a modal screen"/>
   <pfstatus_tit CODE="MAIN" TEXT="Intelligent Container"/>
  </pfstatus>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZIC_APP_GUI
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*


INCLUDE zic_app_gui_top                         .    &quot; global Data
INCLUDE zic_app_gui_cls.
INCLUDE zic_app_gui_o01                         .  &quot; PBO-Modules
INCLUDE zic_app_gui_i01                         .  &quot; PAI-Modules
* INCLUDE ZIC_APP_GUI_F01                         .  &quot; FORM-Routines


*------------------------------------------------------------*
* START-OF-SELECTION
*------------------------------------------------------------*
START-OF-SELECTION.
  CALL SCREEN 100.


*TODO


*GENERAL
*  assign_object is now only on same SET-method + TODO type comparison or member comparison
*  change name from impl to injection context
*  constructors: make all private
*  Object validations
*  transport
*  name conventions
*  delete + delete_tree
*  attribute value  *1
*TABLES
*      - zic_value oprommelen =&gt; value as foreign key *2
*IC classes
*      - zic_value oprommelen =&gt; value as foreign key *2
*      - me-&gt;zif_ic_composite~get_child_by_name(
*                       i_path_name  = im_class_name  ).  =&gt; also by type i_type
*      - change impl context to injection context
*      - attribute value  *1
*      - see in code persistent: TODO weg 01/2016
*        may be delete ZCL_IC_INJ_OBJECT-&gt;load_ctx and change code somehow

*ormapping
*	    - table with values
*    	- wegwerken private members???
*     - attribute value  *1
*     - context in alle tables verwerken in de Selects
*     - IS_PASSIVE_SELECT weg werken in table ZIC_OR_MAPPING
*UI
*	 SCREENS
*    - Wegwerken PAI/PBO...
*    - CONFIG: EDIT FIELDS IN TABLE
*	   - SCREEN: KNOP FOR SHOW_IN_TREE
*    - attribute value  *1
*  DE-INTERFACING
*     - interface ZIF_IC_META_INFO + COMP/COMPOSITE wegwerken met wrapper + meta


*inject
*     - Infinite loop in wire impl ctx  =&gt; End of life + TTL</source>
 </PROG>
 <SHLP SHLPNAME="ZIC_CONTAINER" DDLANGUAGE="E" DDTEXT="Container key search help" ISSIMPLE="X" SELMETHOD="ZIC_CONTAINER" SELMTYPE="T" DIALOGTYPE="D">
  <dd32p SHLPNAME="ZIC_CONTAINER" FIELDNAME="CONT_NR" FLPOSITION="0001" ROLLNAME="ZIC_CONT_NR" SHLPINPUT="X" SHLPOUTPUT="X" SHLPSELPOS="01" SHLPLISPOS="01" DOMNAME="ZIC_CONT_NR" HEADLEN="17" SCRLEN1="09" SCRLEN2="17" SCRLEN3="17" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000"/>
  <dd32p SHLPNAME="ZIC_CONTAINER" FIELDNAME="NAME" FLPOSITION="0002" ROLLNAME="ZIC_CONT_NAME" SHLPINPUT="X" SHLPOUTPUT="X" SHLPSELPOS="02" SHLPLISPOS="02" DOMNAME="ZIC_CONT_NAME" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000"/>
 </SHLP>
 <SICF ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICFNODGUID="0YD1RQ1864BNFQ0JDG7HNR0ZT" ICFCHILDNO="0 " ICFALIASNO="0 " ICF_OPTION="0 " ICF_TIME="000000" ICF_CUSER="BCUSER" ICF_CDATE="20140812" ICF_MUSER="BCUSER" ICF_MDATE="20140812" ICF_AUTHRC="0" ICF_CCLNT="001" ICF_MCLNT="001" ORIG_NAME="NSP0011" ICFALTNME="ZIC_CONTAINER_WD_APP" ICFALTNME_ORIG="zic_container_wd_app">
  <icfdocu ICF_NAME="NSP0011" ICFPARGUID="BPXI9KP2BASOTAFYZA1IQQI7C" ICF_LANGU="E" ICF_DOCU="IC Container application"/>
 </SICF>
 <TABL TABNAME="ZIC_VALUE" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Intelligent Container Method Parameter" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_VALUE" AS4LOCAL="A" AS4VERS="0000" TABKAT="2" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="VALUE_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_VALUE_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_VALUE_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_VALUE" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC value number" REPTEXT="IC value number" SCRTEXT_S="IC valuenr" SCRTEXT_M="IC value number" SCRTEXT_L="IC value number" DOMNAME3L="ZIC_VALUE_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="VALUE_NAME" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZIC_VALUE_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="ZIC_VALUE_NAME" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="08" SCRLEN2="13" SCRLEN3="13" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC value name" REPTEXT="IC value name" SCRTEXT_S="IC value" SCRTEXT_M="IC value name" SCRTEXT_L="IC value name" DOMNAME3L="ZIC_VALUE_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="RANK" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_RANK" ADMINFIELD="0" INTTYPE="N" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" DOMNAME3L="ZIC_RANK" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="VALUE_TYPE" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_VALUE_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="ZIC_VALUE_TYPE" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="10" SCRLEN3="10" DTELMASTER="E" DATATYPE="CHAR" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Value Type" REPTEXT="Value Type" SCRTEXT_S="Value Type" SCRTEXT_M="Value Type" SCRTEXT_L="Value Type" DOMNAME3L="ZIC_VALUE_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="DATA_TYPE" DDLANGUAGE="E" POSITION="0007" ROLLNAME="RS38L_TYP" ADMINFIELD="0" INTTYPE="C" INTLEN="000264" NOTNULL="X" DOMNAME="RS38L_TYP" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000132" OUTPUTLEN="000132" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Associated Type of an Interface Parameter" REPTEXT="Associated Type" SCRTEXT_S="Assoc.Type" SCRTEXT_M="Associated Type" SCRTEXT_L="Associated Type" DOMNAME3L="RS38L_TYP" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="DATA_VALUE" DDLANGUAGE="E" POSITION="0008" ROLLNAME="SEOVALUE" ADMINFIELD="0" INTTYPE="C" INTLEN="000264" NOTNULL="X" DOMNAME="TEXT132" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000132" OUTPUTLEN="000132" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Initial value" REPTEXT="Initial value" SCRTEXT_S="Initial" SCRTEXT_M="Initial value" SCRTEXT_L="Initial value" DOMNAME3L="TEXT132" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="TABLE_NAME" DDLANGUAGE="E" POSITION="0009" ROLLNAME="TABNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="AS4TAB" ROUTPUTLEN="000000" MEMORYID="DTB" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Table Name" REPTEXT="Table Name" SCRTEXT_S="Table" SCRTEXT_M="Table Name" SCRTEXT_L="Table Name" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" DEFFDNAME="TABNAME" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="IC_CLASS" DDLANGUAGE="E" POSITION="0010" ROLLNAME="ZIC_CLASS_NR" CHECKTABLE="ZIC_CLASS" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="IC_ATTRIB_CLASS" DDLANGUAGE="E" POSITION="0011" ROLLNAME="ZIC_CLASS_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="IC_ATTRIB" DDLANGUAGE="E" POSITION="0012" ROLLNAME="ZIC_ATTRIB_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_ATTRIB_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS_ATTRIB" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class attribute number" REPTEXT="Attribute number" SCRTEXT_S="Attrib nr." SCRTEXT_M="Attribute number" SCRTEXT_L="Attribute number" DOMNAME3L="ZIC_ATTRIB_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM_CLASS" DDLANGUAGE="E" POSITION="0013" ROLLNAME="ZIC_CLASS_NR" CHECKTABLE="ZIC_CLASS" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM_METHOD" DDLANGUAGE="E" POSITION="0014" ROLLNAME="ZIC_METHOD_NR" CHECKTABLE="ZIC_METHOD" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_METHOD_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method number" REPTEXT="IC method number" SCRTEXT_S="IC meth nr" SCRTEXT_M="IC method number" SCRTEXT_L="IC method number" DOMNAME3L="ZIC_METHOD_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM" DDLANGUAGE="E" POSITION="0015" ROLLNAME="ZIC_PARAM_NR" CHECKTABLE="ZIC_METHOD_PARAM" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_PARAM_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="09" SCRLEN2="13" SCRLEN3="16" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD_PARAM" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method parameter number" REPTEXT="Parameter number" SCRTEXT_S="Param nr." SCRTEXT_M="Parameter nr." SCRTEXT_L="Parameter number" DOMNAME3L="ZIC_PARAM_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="IC_TYPE_OBJ" DDLANGUAGE="E" POSITION="0016" ROLLNAME="ZIC_INJ_OBJ_NR" CHECKTABLE="ZIC_INJ_OBJECT" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_INJ_OBJ_NR" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_INJ_OBJECT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC injection object number" REPTEXT="Inj object number" SCRTEXT_S="I.Obj. nr." SCRTEXT_M="Inj object number" SCRTEXT_L="Inj object number" DOMNAME3L="ZIC_INJ_OBJ_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_VALUE" FIELDNAME="IC_TYPE_VALUE" DDLANGUAGE="E" POSITION="0017" ROLLNAME="ZIC_VALUE_NR" CHECKTABLE="ZIC_VALUE" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_VALUE_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_VALUE" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC value number" REPTEXT="IC value number" SCRTEXT_S="IC valuenr" SCRTEXT_M="IC value number" SCRTEXT_L="IC value number" DOMNAME3L="ZIC_VALUE_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_CLASS" FORTABLE="ZIC_VALUE" FORKEY="MANDT" CHECKTABLE="ZIC_CLASS" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_CLASS" FORTABLE="ZIC_VALUE" FORKEY="IC_CLASS" CHECKTABLE="ZIC_CLASS" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM" FORTABLE="ZIC_VALUE" FORKEY="MANDT" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM" FORTABLE="ZIC_VALUE" FORKEY="IC_PARAM_CLASS" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM" FORTABLE="ZIC_VALUE" FORKEY="IC_PARAM_METHOD" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="METHOD_NR" PRIMPOS="0003" DOMNAME="ZIC_METHOD_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM" FORTABLE="ZIC_VALUE" FORKEY="IC_PARAM" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="PARAM_NR" PRIMPOS="0004" DOMNAME="ZIC_PARAM_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM_CLASS" FORTABLE="ZIC_VALUE" FORKEY="MANDT" CHECKTABLE="ZIC_CLASS" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM_CLASS" FORTABLE="ZIC_VALUE" FORKEY="IC_PARAM_CLASS" CHECKTABLE="ZIC_CLASS" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM_METHOD" FORTABLE="ZIC_VALUE" FORKEY="MANDT" CHECKTABLE="ZIC_METHOD" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM_METHOD" FORTABLE="ZIC_VALUE" FORKEY="IC_PARAM_CLASS" CHECKTABLE="ZIC_METHOD" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM_METHOD" FORTABLE="ZIC_VALUE" FORKEY="IC_PARAM_METHOD" CHECKTABLE="ZIC_METHOD" CHECKFIELD="METHOD_NR" PRIMPOS="0003" DOMNAME="ZIC_METHOD_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_TYPE_OBJ" FORTABLE="ZIC_VALUE" FORKEY="MANDT" CHECKTABLE="ZIC_INJ_OBJECT" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_TYPE_OBJ" FORTABLE="ZIC_VALUE" FORKEY="IC_TYPE_OBJ" CHECKTABLE="ZIC_INJ_OBJECT" CHECKFIELD="INJ_OBJ_NR" PRIMPOS="0002" DOMNAME="ZIC_INJ_OBJ_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_TYPE_VALUE" FORTABLE="ZIC_VALUE" FORKEY="MANDT" CHECKTABLE="ZIC_VALUE" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_VALUE" FIELDNAME="IC_TYPE_VALUE" FORTABLE="ZIC_VALUE" FORKEY="IC_TYPE_VALUE" CHECKTABLE="ZIC_VALUE" CHECKFIELD="VALUE_NR" PRIMPOS="0002" DOMNAME="ZIC_VALUE_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd08v TABNAME="ZIC_VALUE" FIELDNAME="IC_CLASS" DDLANGUAGE="E" CHECKTABLE="ZIC_CLASS" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM" DDLANGUAGE="E" CHECKTABLE="ZIC_METHOD_PARAM" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM_CLASS" DDLANGUAGE="E" CHECKTABLE="ZIC_CLASS" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_VALUE" FIELDNAME="IC_PARAM_METHOD" DDLANGUAGE="E" CHECKTABLE="ZIC_METHOD" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_VALUE" FIELDNAME="IC_TYPE_OBJ" DDLANGUAGE="E" CHECKTABLE="ZIC_INJ_OBJECT" FRKART="REF" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_VALUE" FIELDNAME="IC_TYPE_VALUE" DDLANGUAGE="E" CHECKTABLE="ZIC_VALUE" FRKART="REF" CARD="CN" CARDLEFT="C"/>
 </TABL>
 <TABL TABNAME="ZIC_OR_TYPES" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="IC object relational mapping" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="C" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_OR_TYPES" AS4LOCAL="A" AS4VERS="0000" TABKAT="1" TABART="APPL2" SCHFELDANZ="000" PROTOKOLL="X" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_OR_TYPES" FIELDNAME="CONTEXT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="ZIC_OR_CTX_NAME" CHECKTABLE="ZIC_OR_CONTEXT" ADMINFIELD="0" INTTYPE="C" INTLEN="000040" NOTNULL="X" DOMNAME="ZIC_OR_CTX_NAME" ROUTPUTLEN="000000" HEADLEN="28" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" ENTITYTAB="ZIC_OR_CONTEXT" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Object relational context" REPTEXT="IC object relational context" SCRTEXT_S="OR-context" SCRTEXT_M="OR-context" SCRTEXT_L="OR-context" DOMNAME3L="ZIC_OR_CTX_NAME" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_TYPES" FIELDNAME="TYPE" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_OR_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_OR_TYPE" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" ENTITYTAB="ZIC_OR_TYPES" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational type" REPTEXT="Type" SCRTEXT_S="Type" SCRTEXT_M="Type" SCRTEXT_L="Type" DOMNAME3L="ZIC_OR_TYPE" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_TYPES" FIELDNAME="NAME" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZIC_OR_TYPE_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="CHAR30" ROUTPUTLEN="000000" HEADLEN="09" SCRLEN1="09" SCRLEN2="09" SCRLEN3="09" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="OR Type name" REPTEXT="Type name" SCRTEXT_S="Type name" SCRTEXT_M="Type name" SCRTEXT_L="Type name" DOMNAME3L="CHAR30" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_TYPES" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZIC_OR_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000100" NOTNULL="X" DOMNAME="TEXT50" ROUTPUTLEN="000000" HEADLEN="32" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000050" OUTPUTLEN="000050" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC context object relational descrition" REPTEXT="Description" SCRTEXT_S="Descr" SCRTEXT_M="Description" SCRTEXT_L="Description" DOMNAME3L="TEXT50" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_TYPES" FIELDNAME="SUB_TYPE_FIELD" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_OR_SUB_TYPE_FIELD" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational subtype field" REPTEXT="Subtype field" SCRTEXT_S="SubTField" SCRTEXT_M="Subtype field" SCRTEXT_L="Subtype field" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_TYPES" FIELDNAME="CLASS_NAME" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_OR_CLASS_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="SEOCLSNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational class name" REPTEXT="Class name" SCRTEXT_S="Class" SCRTEXT_M="Class name" SCRTEXT_L="Class name" DOMNAME3L="SEOCLSNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_TYPES" FIELDNAME="TABLE_NAME" DDLANGUAGE="E" POSITION="0007" ROLLNAME="TABNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="AS4TAB" ROUTPUTLEN="000000" MEMORYID="DTB" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Table Name" REPTEXT="Table Name" SCRTEXT_S="Table" SCRTEXT_M="Table Name" SCRTEXT_L="Table Name" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" DEFFDNAME="TABNAME" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_TYPES" FIELDNAME="OR_IDENTITY" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZIC_OR_IDENTITY" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational identity field" REPTEXT="Identity" SCRTEXT_S="Id" SCRTEXT_M="Identity" SCRTEXT_L="Identity" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZIC_OR_TYPES" FIELDNAME="CONTEXT" FORTABLE="ZIC_OR_TYPES" FORKEY="CONTEXT" CHECKTABLE="ZIC_OR_CONTEXT" CHECKFIELD="CONTEXT" PRIMPOS="0001" DOMNAME="ZIC_OR_CTX_NAME" DATATYPE="CHAR" LENG="000020"/>
  <dd08v TABNAME="ZIC_OR_TYPES" FIELDNAME="CONTEXT" DDLANGUAGE="E" CHECKTABLE="ZIC_OR_CONTEXT" FRKART="KEY" CARD="CN" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZIC_OR_MAPPING" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="IC object relational mapping" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="C" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_OR_MAPPING" AS4LOCAL="A" AS4VERS="0000" TABKAT="1" TABART="APPL2" SCHFELDANZ="000" PROTOKOLL="X" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="CONTEXT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="ZIC_OR_CTX_NAME" CHECKTABLE="ZIC_OR_CONTEXT" ADMINFIELD="0" INTTYPE="C" INTLEN="000040" NOTNULL="X" DOMNAME="ZIC_OR_CTX_NAME" ROUTPUTLEN="000000" HEADLEN="28" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" ENTITYTAB="ZIC_OR_CONTEXT" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Object relational context" REPTEXT="IC object relational context" SCRTEXT_S="OR-context" SCRTEXT_M="OR-context" SCRTEXT_L="OR-context" DOMNAME3L="ZIC_OR_CTX_NAME" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="PARENT" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_OR_PARENT" CHECKTABLE="ZIC_OR_TYPES" ADMINFIELD="0" INTTYPE="C" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_OR_TYPE" ROUTPUTLEN="000000" HEADLEN="11" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" ENTITYTAB="ZIC_OR_TYPES" MASK="  CHARE" MASKLEN="0000" DDTEXT="OR parent type" REPTEXT="Parent type" SCRTEXT_S="Parent" SCRTEXT_M="Parent type" SCRTEXT_L="Parent type" DOMNAME3L="ZIC_OR_TYPE" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="CHILD" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZIC_OR_CHILD" CHECKTABLE="ZIC_OR_TYPES" ADMINFIELD="0" INTTYPE="C" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_OR_TYPE" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" ENTITYTAB="ZIC_OR_TYPES" MASK="  CHARE" MASKLEN="0000" DDTEXT="OR child type" REPTEXT="Child type" SCRTEXT_S="Child type" SCRTEXT_M="Child type" SCRTEXT_L="Child type" DOMNAME3L="ZIC_OR_TYPE" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="REL_NUMBER" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="ZIC_OR_REL_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_OR_REL_NR" ROUTPUTLEN="000000" HEADLEN="27" SCRLEN1="09" SCRLEN2="09" SCRLEN3="09" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_OR_MAPPING" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC Object relational number" REPTEXT="IC object relational number" SCRTEXT_S="OR-number" SCRTEXT_M="OR-number" SCRTEXT_L="OR-number" DOMNAME3L="ZIC_OR_REL_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="REL_TYPE" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_REL_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000004" DOMNAME="ZIC_REL_TYPE" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="08" SCRLEN2="13" SCRLEN3="13" DTELMASTER="E" DATATYPE="CHAR" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC  Relation Type" REPTEXT="Relation Type" SCRTEXT_S="Rel Type" SCRTEXT_M="Relation Type" SCRTEXT_L="Relation Type" DOMNAME3L="ZIC_REL_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="INNER_KEY" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_OR_INNER_TYPE_FIELD" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="16" SCRLEN3="16" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational inner type field" REPTEXT="Inner type field" SCRTEXT_S="InnTField" SCRTEXT_M="Inner type field" SCRTEXT_L="Inner type field" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="LINK_TABLE" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZIC_OR_LINK_TABLE" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="AS4TAB" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="07" SCRLEN2="10" SCRLEN3="10" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational link table" REPTEXT="Link table" SCRTEXT_S="Linktab" SCRTEXT_M="Link table" SCRTEXT_L="Link table" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="LINK_KEY_FIELD" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZIC_OR_LINK_KEY_FIELD" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational link key field" REPTEXT="Link key field" SCRTEXT_S="Link field" SCRTEXT_M="Link key field" SCRTEXT_L="Link key field" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="LINK_TYPE_FIELD" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZIC_OR_LINK_TYPE_FIELD" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational link type Field" REPTEXT="Link type field" SCRTEXT_S="LinkTypeF" SCRTEXT_M="Link type field" SCRTEXT_L="Link type field" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="LINK_KEYMAP_FIELD" DDLANGUAGE="E" POSITION="0010" ROLLNAME="ZIC_OR_LINK_KEYMAP_FIELD" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational link keymap field" REPTEXT="Link keymap field" SCRTEXT_S="LinkKeymap" SCRTEXT_M="Link keymap field" SCRTEXT_L="Link keymap field" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="FOREIGN_KEY" DDLANGUAGE="E" POSITION="0011" ROLLNAME="ZIC_OR_FOREIGN_KEY" ADMINFIELD="0" INTTYPE="C" INTLEN="000122" DOMNAME="CHAR61" ROUTPUTLEN="000000" HEADLEN="11" SCRLEN1="10" SCRLEN2="11" SCRLEN3="11" DTELMASTER="E" DATATYPE="CHAR" LENG="000061" OUTPUTLEN="000061" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational foreign key" REPTEXT="Foreign key" SCRTEXT_S="ForeignKey" SCRTEXT_M="Foreign key" SCRTEXT_L="Foreign key" DOMNAME3L="CHAR61" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="FK_MAPPING" DDLANGUAGE="E" POSITION="0012" ROLLNAME="ZIC_OR_KEY_MAP_NAME" CHECKTABLE="ZIC_OR_FK_MAP" ADMINFIELD="0" INTTYPE="C" INTLEN="000050" DOMNAME="ZIC_OR_KEY_MAP_NAME" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000025" OUTPUTLEN="000025" DECIMALS="000000" ENTITYTAB="ZIC_OR_FK_MAP" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational key name" REPTEXT="Key mapping" SCRTEXT_S="Key map" SCRTEXT_M="Key mapping" SCRTEXT_L="Key mapping" DOMNAME3L="ZIC_OR_KEY_MAP_NAME" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_MAPPING" FIELDNAME="IS_PASSIVE_SELECT" DDLANGUAGE="E" POSITION="0013" ROLLNAME="ZIC_OR_PASS_SELECT" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" DOMNAME="YESNO" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational is passive select" REPTEXT="Is passive select" SCRTEXT_S="PassSelect" SCRTEXT_M="Is passive select" SCRTEXT_L="Is passive select" DOMNAME3L="YESNO" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZIC_OR_MAPPING" FIELDNAME="CHILD" FORTABLE="ZIC_OR_MAPPING" FORKEY="CONTEXT" CHECKTABLE="ZIC_OR_TYPES" CHECKFIELD="CONTEXT" PRIMPOS="0001" DOMNAME="ZIC_OR_CTX_NAME" DATATYPE="CHAR" LENG="000020"/>
  <dd05m TABNAME="ZIC_OR_MAPPING" FIELDNAME="CHILD" FORTABLE="ZIC_OR_MAPPING" FORKEY="CHILD" CHECKTABLE="ZIC_OR_TYPES" CHECKFIELD="TYPE" PRIMPOS="0002" DOMNAME="ZIC_OR_TYPE" DATATYPE="CHAR" LENG="000005"/>
  <dd05m TABNAME="ZIC_OR_MAPPING" FIELDNAME="CONTEXT" FORTABLE="ZIC_OR_MAPPING" FORKEY="CONTEXT" CHECKTABLE="ZIC_OR_CONTEXT" CHECKFIELD="CONTEXT" PRIMPOS="0001" DOMNAME="ZIC_OR_CTX_NAME" DATATYPE="CHAR" LENG="000020"/>
  <dd05m TABNAME="ZIC_OR_MAPPING" FIELDNAME="FK_MAPPING" FORTABLE="*" CHECKTABLE="ZIC_OR_FK_MAP" CHECKFIELD="CONTEXT" PRIMPOS="0001" DOMNAME="ZIC_OR_CTX_NAME" DATATYPE="CHAR" LENG="000020"/>
  <dd05m TABNAME="ZIC_OR_MAPPING" FIELDNAME="FK_MAPPING" FORTABLE="ZIC_OR_MAPPING" FORKEY="FK_MAPPING" CHECKTABLE="ZIC_OR_FK_MAP" CHECKFIELD="KEY_NAME" PRIMPOS="0002" DOMNAME="ZIC_OR_KEY_MAP_NAME" DATATYPE="CHAR" LENG="000025"/>
  <dd05m TABNAME="ZIC_OR_MAPPING" FIELDNAME="FK_MAPPING" FORTABLE="*" CHECKTABLE="ZIC_OR_FK_MAP" CHECKFIELD="KEY_NUMBER" PRIMPOS="0003" DOMNAME="NUMC2" DATATYPE="NUMC" LENG="000002"/>
  <dd05m TABNAME="ZIC_OR_MAPPING" FIELDNAME="PARENT" FORTABLE="ZIC_OR_MAPPING" FORKEY="CONTEXT" CHECKTABLE="ZIC_OR_TYPES" CHECKFIELD="CONTEXT" PRIMPOS="0001" DOMNAME="ZIC_OR_CTX_NAME" DATATYPE="CHAR" LENG="000020"/>
  <dd05m TABNAME="ZIC_OR_MAPPING" FIELDNAME="PARENT" FORTABLE="ZIC_OR_MAPPING" FORKEY="PARENT" CHECKTABLE="ZIC_OR_TYPES" CHECKFIELD="TYPE" PRIMPOS="0002" DOMNAME="ZIC_OR_TYPE" DATATYPE="CHAR" LENG="000005"/>
  <dd08v TABNAME="ZIC_OR_MAPPING" FIELDNAME="CHILD" DDLANGUAGE="E" CHECKTABLE="ZIC_OR_TYPES" FRKART="KEY" CARD="CN" CARDLEFT="1"/>
  <dd08v TABNAME="ZIC_OR_MAPPING" FIELDNAME="CONTEXT" DDLANGUAGE="E" CHECKTABLE="ZIC_OR_CONTEXT" FRKART="KEY" CARD="CN" CARDLEFT="1"/>
  <dd08v TABNAME="ZIC_OR_MAPPING" FIELDNAME="FK_MAPPING" DDLANGUAGE="E" CHECKTABLE="ZIC_OR_FK_MAP" CLASFIELD="*" CARD="CN" CARDLEFT="1"/>
  <dd08v TABNAME="ZIC_OR_MAPPING" FIELDNAME="PARENT" DDLANGUAGE="E" CHECKTABLE="ZIC_OR_TYPES" FRKART="KEY" CARD="CN" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZIC_OR_FK_MAP" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Foreign key mapping" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="C" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_OR_FK_MAP" AS4LOCAL="A" AS4VERS="0000" TABKAT="0" TABART="APPL2" SCHFELDANZ="000" PROTOKOLL="X" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_OR_FK_MAP" FIELDNAME="CONTEXT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="ZIC_OR_CTX_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000040" NOTNULL="X" DOMNAME="ZIC_OR_CTX_NAME" ROUTPUTLEN="000000" HEADLEN="28" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" ENTITYTAB="ZIC_OR_CONTEXT" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Object relational context" REPTEXT="IC object relational context" SCRTEXT_S="OR-context" SCRTEXT_M="OR-context" SCRTEXT_L="OR-context" DOMNAME3L="ZIC_OR_CTX_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_FK_MAP" FIELDNAME="KEY_NAME" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_OR_KEY_MAP_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000050" NOTNULL="X" DOMNAME="ZIC_OR_KEY_MAP_NAME" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000025" OUTPUTLEN="000025" DECIMALS="000000" ENTITYTAB="ZIC_OR_FK_MAP" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC object relational key name" REPTEXT="Key mapping" SCRTEXT_S="Key map" SCRTEXT_M="Key mapping" SCRTEXT_L="Key mapping" DOMNAME3L="ZIC_OR_KEY_MAP_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_FK_MAP" FIELDNAME="KEY_NUMBER" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZIC_OR_KEY_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000004" NOTNULL="X" DOMNAME="NUMC2" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="06" SCRLEN2="10" SCRLEN3="10" DTELMASTER="E" DATATYPE="NUMC" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Object Relational key number" REPTEXT="Key number" SCRTEXT_S="Key nr" SCRTEXT_M="Key number" SCRTEXT_L="Key number" DOMNAME3L="NUMC2" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_FK_MAP" FIELDNAME="KEY_PARENT" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZIC_OR_KEY_PARENT" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="10" SCRLEN3="10" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object relational key parent" REPTEXT="Key parent" SCRTEXT_S="Key parent" SCRTEXT_M="Key parent" SCRTEXT_L="Key parent" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_FK_MAP" FIELDNAME="KEY_CHILD" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_OR_KEY_CHILD" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="FDNAME" ROUTPUTLEN="000000" HEADLEN="09" SCRLEN1="09" SCRLEN2="09" SCRLEN3="09" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object relational key child" REPTEXT="Key child" SCRTEXT_S="Key child" SCRTEXT_M="Key child" SCRTEXT_L="Key child" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZIC_OR_CONTEXT" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="IC object relational mapping" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="C" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_OR_CONTEXT" AS4LOCAL="A" AS4VERS="0000" TABKAT="1" TABART="APPL2" SCHFELDANZ="000" PROTOKOLL="X" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_OR_CONTEXT" FIELDNAME="CONTEXT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="ZIC_OR_CTX_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000040" NOTNULL="X" DOMNAME="ZIC_OR_CTX_NAME" ROUTPUTLEN="000000" HEADLEN="28" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" ENTITYTAB="ZIC_OR_CONTEXT" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Object relational context" REPTEXT="IC object relational context" SCRTEXT_S="OR-context" SCRTEXT_M="OR-context" SCRTEXT_L="OR-context" DOMNAME3L="ZIC_OR_CTX_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_OR_CONTEXT" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0002" ROLLNAME="ZIC_OR_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000100" NOTNULL="X" DOMNAME="TEXT50" ROUTPUTLEN="000000" HEADLEN="32" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000050" OUTPUTLEN="000050" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC context object relational descrition" REPTEXT="Description" SCRTEXT_S="Descr" SCRTEXT_M="Description" SCRTEXT_L="Description" DOMNAME3L="TEXT50" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZIC_METHOD_PARAM" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Intelligent Container Method Parameter" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_METHOD_PARAM" AS4LOCAL="A" AS4VERS="0000" TABKAT="2" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="CLASS_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_CLASS_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="METHOD_NR" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZIC_METHOD_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_METHOD_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method number" REPTEXT="IC method number" SCRTEXT_S="IC meth nr" SCRTEXT_M="IC method number" SCRTEXT_L="IC method number" DOMNAME3L="ZIC_METHOD_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="PARAM_NR" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="ZIC_PARAM_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_PARAM_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="09" SCRLEN2="13" SCRLEN3="16" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD_PARAM" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method parameter number" REPTEXT="Parameter number" SCRTEXT_S="Param nr." SCRTEXT_M="Parameter nr." SCRTEXT_L="Parameter number" DOMNAME3L="ZIC_PARAM_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="PARAM_NAME" DDLANGUAGE="E" POSITION="0005" ROLLNAME="SEOSCONAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="CHAR30" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Subcomponent name" REPTEXT="Subcomponent" SCRTEXT_S="Subcomp." SCRTEXT_M="Subcomponent" SCRTEXT_L="Subcomponent" DOMNAME3L="CHAR30" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="RANK" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZIC_RANK" ADMINFIELD="0" INTTYPE="N" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" DOMNAME3L="ZIC_RANK" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_VALUE" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZIC_VALUE_NR" CHECKTABLE="ZIC_VALUE" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_VALUE_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_VALUE" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC value number" REPTEXT="IC value number" SCRTEXT_S="IC valuenr" SCRTEXT_M="IC value number" SCRTEXT_L="IC value number" DOMNAME3L="ZIC_VALUE_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="VALUE_TYPE" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZIC_VALUE_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="ZIC_VALUE_TYPE" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="10" SCRLEN3="10" DTELMASTER="E" DATATYPE="CHAR" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Value Type" REPTEXT="Value Type" SCRTEXT_S="Value Type" SCRTEXT_M="Value Type" SCRTEXT_L="Value Type" DOMNAME3L="ZIC_VALUE_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="DATA_TYPE" DDLANGUAGE="E" POSITION="0010" ROLLNAME="RS38L_TYP" ADMINFIELD="0" INTTYPE="C" INTLEN="000264" NOTNULL="X" DOMNAME="RS38L_TYP" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000132" OUTPUTLEN="000132" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Associated Type of an Interface Parameter" REPTEXT="Associated Type" SCRTEXT_S="Assoc.Type" SCRTEXT_M="Associated Type" SCRTEXT_L="Associated Type" DOMNAME3L="RS38L_TYP" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="DATA_VALUE" DDLANGUAGE="E" POSITION="0011" ROLLNAME="SEOVALUE" ADMINFIELD="0" INTTYPE="C" INTLEN="000264" NOTNULL="X" DOMNAME="TEXT132" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000132" OUTPUTLEN="000132" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Initial value" REPTEXT="Initial value" SCRTEXT_S="Initial" SCRTEXT_M="Initial value" SCRTEXT_L="Initial value" DOMNAME3L="TEXT132" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="TABLE_NAME" DDLANGUAGE="E" POSITION="0012" ROLLNAME="TABNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="AS4TAB" ROUTPUTLEN="000000" MEMORYID="DTB" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Table Name" REPTEXT="Table Name" SCRTEXT_S="Table" SCRTEXT_M="Table Name" SCRTEXT_L="Table Name" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" DEFFDNAME="TABNAME" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_CLASS" DDLANGUAGE="E" POSITION="0013" ROLLNAME="ZIC_CLASS_NR" CHECKTABLE="ZIC_CLASS" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM_CLASS" DDLANGUAGE="E" POSITION="0014" ROLLNAME="ZIC_CLASS_NR" CHECKTABLE="ZIC_CLASS" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM_METHOD" DDLANGUAGE="E" POSITION="0015" ROLLNAME="ZIC_METHOD_NR" CHECKTABLE="ZIC_METHOD" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_METHOD_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method number" REPTEXT="IC method number" SCRTEXT_S="IC meth nr" SCRTEXT_M="IC method number" SCRTEXT_L="IC method number" DOMNAME3L="ZIC_METHOD_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM" DDLANGUAGE="E" POSITION="0016" ROLLNAME="ZIC_PARAM_NR" CHECKTABLE="ZIC_METHOD_PARAM" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_PARAM_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="09" SCRLEN2="13" SCRLEN3="16" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD_PARAM" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method parameter number" REPTEXT="Parameter number" SCRTEXT_S="Param nr." SCRTEXT_M="Parameter nr." SCRTEXT_L="Parameter number" DOMNAME3L="ZIC_PARAM_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_SQL_QUERY" DDLANGUAGE="E" POSITION="0017" ROLLNAME="STRINGVAL" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" NOTNULL="X" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="String" REPTEXT="String" SCRTEXT_S="String" SCRTEXT_M="String" SCRTEXT_L="String" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD_PARAM" FIELDNAME="SQL_RESULT_TYPE" DDLANGUAGE="E" POSITION="0018" ROLLNAME="ZIC_SQL_RESULT_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="ZIC_SQL_RESULT_TYPE" ROUTPUTLEN="000000" HEADLEN="18" SCRLEN1="10" SCRLEN2="18" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC SQL result type" REPTEXT="IC SQL result type" SCRTEXT_S="Sql Result" SCRTEXT_M="IC SQL result type" SCRTEXT_L="IC SQL result type" DOMNAME3L="ZIC_SQL_RESULT_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_CLASS" FORTABLE="ZIC_METHOD_PARAM" FORKEY="MANDT" CHECKTABLE="ZIC_CLASS" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_CLASS" FORTABLE="ZIC_METHOD_PARAM" FORKEY="IC_CLASS" CHECKTABLE="ZIC_CLASS" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM" FORTABLE="ZIC_METHOD_PARAM" FORKEY="MANDT" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM" FORTABLE="ZIC_METHOD_PARAM" FORKEY="IC_PARAM_CLASS" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM" FORTABLE="ZIC_METHOD_PARAM" FORKEY="IC_PARAM_METHOD" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="METHOD_NR" PRIMPOS="0003" DOMNAME="ZIC_METHOD_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM" FORTABLE="ZIC_METHOD_PARAM" FORKEY="IC_PARAM" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="PARAM_NR" PRIMPOS="0004" DOMNAME="ZIC_PARAM_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM_CLASS" FORTABLE="ZIC_METHOD_PARAM" FORKEY="MANDT" CHECKTABLE="ZIC_CLASS" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM_CLASS" FORTABLE="ZIC_METHOD_PARAM" FORKEY="IC_PARAM_CLASS" CHECKTABLE="ZIC_CLASS" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM_METHOD" FORTABLE="ZIC_METHOD_PARAM" FORKEY="MANDT" CHECKTABLE="ZIC_METHOD" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM_METHOD" FORTABLE="ZIC_METHOD_PARAM" FORKEY="IC_PARAM_CLASS" CHECKTABLE="ZIC_METHOD" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM_METHOD" FORTABLE="ZIC_METHOD_PARAM" FORKEY="IC_PARAM_METHOD" CHECKTABLE="ZIC_METHOD" CHECKFIELD="METHOD_NR" PRIMPOS="0003" DOMNAME="ZIC_METHOD_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_VALUE" FORTABLE="ZIC_METHOD_PARAM" FORKEY="MANDT" CHECKTABLE="ZIC_VALUE" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_VALUE" FORTABLE="ZIC_METHOD_PARAM" FORKEY="IC_VALUE" CHECKTABLE="ZIC_VALUE" CHECKFIELD="VALUE_NR" PRIMPOS="0002" DOMNAME="ZIC_VALUE_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd08v TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_CLASS" DDLANGUAGE="E" CHECKTABLE="ZIC_CLASS" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM" DDLANGUAGE="E" CHECKTABLE="ZIC_METHOD_PARAM" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM_CLASS" DDLANGUAGE="E" CHECKTABLE="ZIC_CLASS" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_PARAM_METHOD" DDLANGUAGE="E" CHECKTABLE="ZIC_METHOD" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_METHOD_PARAM" FIELDNAME="IC_VALUE" DDLANGUAGE="E" CHECKTABLE="ZIC_VALUE"/>
 </TABL>
 <TABL TABNAME="ZIC_METHOD" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Intelligent Container Method" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_METHOD" AS4LOCAL="A" AS4VERS="0000" TABKAT="2" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_METHOD" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD" FIELDNAME="CLASS_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_CLASS_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD" FIELDNAME="METHOD_NR" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZIC_METHOD_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_METHOD_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method number" REPTEXT="IC method number" SCRTEXT_S="IC meth nr" SCRTEXT_M="IC method number" SCRTEXT_L="IC method number" DOMNAME3L="ZIC_METHOD_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD" FIELDNAME="METHOD_NAME" DDLANGUAGE="E" POSITION="0004" ROLLNAME="SEOMTDNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000122" NOTNULL="X" DOMNAME="CHAR61" ROUTPUTLEN="000000" MEMORYID="MTDNAME" HEADLEN="61" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000061" OUTPUTLEN="000061" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Method name" REPTEXT="Method" SCRTEXT_S="Method" SCRTEXT_M="Method" SCRTEXT_L="Method" DOMNAME3L="CHAR61" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD" FIELDNAME="RANK" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_RANK" ADMINFIELD="0" INTTYPE="N" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" DOMNAME3L="ZIC_RANK" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD" FIELDNAME="METHOD_TYPE" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZIC_METHOD_TYPE" ADMINFIELD="0" INTTYPE="N" INTLEN="000002" NOTNULL="X" DOMNAME="ZIC_METHOD_TYPE" ROUTPUTLEN="000000" HEADLEN="11" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method type" REPTEXT="Method Type" SCRTEXT_S="MethodType" SCRTEXT_M="Method Type" SCRTEXT_L="Method Type" DOMNAME3L="ZIC_METHOD_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD" FIELDNAME="DECLARE_LEVEL" DDLANGUAGE="E" POSITION="0008" ROLLNAME="SEOMTDDECL" ADMINFIELD="0" INTTYPE="N" INTLEN="000002" NOTNULL="X" DOMNAME="SEOMTDDECL" ROUTPUTLEN="000000" HEADLEN="01" SCRLEN1="10" SCRLEN2="15" SCRLEN3="27" DTELMASTER="D" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Method declaration level" REPTEXT="D" SCRTEXT_S="Level" SCRTEXT_M="Mth. Dec. level" SCRTEXT_L="Method declaration level" DOMNAME3L="SEOMTDDECL" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_METHOD" FIELDNAME="ACTIVE" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZIC_METHOD_ACTIVE" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" NOTNULL="X" DOMNAME="YESNO" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="06" SCRLEN2="16" SCRLEN3="16" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Method is active or passive" REPTEXT="Method is active" SCRTEXT_S="Active" SCRTEXT_M="Method is active" SCRTEXT_L="Method is active" DOMNAME3L="YESNO" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZIC_INJ_OBJECT" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="IC injection type object implementation component" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_INJ_OBJECT" AS4LOCAL="A" AS4VERS="0000" TABKAT="2" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_INJ_OBJECT" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_OBJ_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_INJ_OBJ_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_INJ_OBJ_NR" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_INJ_OBJECT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC injection object number" REPTEXT="Inj object number" SCRTEXT_S="I.Obj. nr." SCRTEXT_M="Inj object number" SCRTEXT_L="Inj object number" DOMNAME3L="ZIC_INJ_OBJ_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_INJ_OBJECT" FIELDNAME="IMPL_NAME" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZIC_INJ_OBJ_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="ZIC_INJ_OBJ_NAME" ROUTPUTLEN="000000" HEADLEN="26" SCRLEN1="10" SCRLEN2="20" SCRLEN3="26" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC injection object name" REPTEXT="Injection object name" SCRTEXT_S="InjObjName" SCRTEXT_M="Inj object name" SCRTEXT_L="Injection object name" DOMNAME3L="ZIC_INJ_OBJ_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_INJ_OBJECT" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_INJ_OBJECT" FIELDNAME="RANK" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_RANK" ADMINFIELD="0" INTTYPE="N" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" DOMNAME3L="ZIC_RANK" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_INJ_OBJECT" FIELDNAME="PATH" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_PATH" ADMINFIELD="0" INTTYPE="C" INTLEN="000240" NOTNULL="X" DOMNAME="ZIC_PATH" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" DTELMASTER="E" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container Path" REPTEXT="Path" SCRTEXT_S="Path" SCRTEXT_M="Path" SCRTEXT_L="Path" DOMNAME3L="ZIC_PATH" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_CONT" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZIC_CONT_NR" CHECKTABLE="ZIC_CONTAINER" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CONT_NR" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="09" SCRLEN2="17" SCRLEN3="17" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONTAINER" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container number" REPTEXT="iContainer number" SCRTEXT_S="iC number" SCRTEXT_M="iContainer number" SCRTEXT_L="iContainer number" DOMNAME3L="ZIC_CONT_NR" SHLPORIGIN="P" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="CONT_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_CTX" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZIC_CTX_NR" CHECKTABLE="ZIC_CONT_CONTEXT" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CTX_NR" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONT_CONTEXT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container context number" REPTEXT="Context number" SCRTEXT_S="Ctx number" SCRTEXT_M="Context number" SCRTEXT_L="Context number" DOMNAME3L="ZIC_CTX_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_ICTX" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZIC_IMPL_CTX_NR" CHECKTABLE="ZIC_IMPL_CONTEXT" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_IMPL_CTX_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_IMPL_CONTEXT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container implementation context number" REPTEXT="impl ctx number" SCRTEXT_S="impl ctxnr" SCRTEXT_M="impl ctx number" SCRTEXT_L="impl ctx number" DOMNAME3L="ZIC_IMPL_CTX_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_CONT" FORTABLE="ZIC_INJ_OBJECT" FORKEY="MANDT" CHECKTABLE="ZIC_CONTAINER" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_CONT" FORTABLE="ZIC_INJ_OBJECT" FORKEY="INJ_TYPE_CONT" CHECKTABLE="ZIC_CONTAINER" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_CTX" FORTABLE="ZIC_INJ_OBJECT" FORKEY="MANDT" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_CTX" FORTABLE="ZIC_INJ_OBJECT" FORKEY="INJ_TYPE_CONT" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_CTX" FORTABLE="ZIC_INJ_OBJECT" FORKEY="INJ_TYPE_CTX" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="CTX_NR" PRIMPOS="0003" DOMNAME="ZIC_CTX_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_ICTX" FORTABLE="ZIC_INJ_OBJECT" FORKEY="MANDT" CHECKTABLE="ZIC_IMPL_CONTEXT" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_ICTX" FORTABLE="ZIC_INJ_OBJECT" FORKEY="INJ_TYPE_CONT" CHECKTABLE="ZIC_IMPL_CONTEXT" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_ICTX" FORTABLE="ZIC_INJ_OBJECT" FORKEY="INJ_TYPE_CTX" CHECKTABLE="ZIC_IMPL_CONTEXT" CHECKFIELD="CTX_NR" PRIMPOS="0003" DOMNAME="ZIC_CTX_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_ICTX" FORTABLE="ZIC_INJ_OBJECT" FORKEY="INJ_TYPE_ICTX" CHECKTABLE="ZIC_IMPL_CONTEXT" CHECKFIELD="IMPL_CTX_NR" PRIMPOS="0004" DOMNAME="ZIC_IMPL_CTX_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd08v TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_CONT" DDLANGUAGE="E" CHECKTABLE="ZIC_CONTAINER"/>
  <dd08v TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_CTX" DDLANGUAGE="E" CHECKTABLE="ZIC_CONT_CONTEXT"/>
  <dd08v TABNAME="ZIC_INJ_OBJECT" FIELDNAME="INJ_TYPE_ICTX" DDLANGUAGE="E" CHECKTABLE="ZIC_IMPL_CONTEXT" FRKART="KEY" CARD="CN" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZIC_IMPL_CONTEXT" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Intelligent Container Context" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_IMPL_CONTEXT" AS4LOCAL="A" AS4VERS="0000" TABKAT="2" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CONT_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_CONT_NR" CHECKTABLE="ZIC_CONTAINER" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CONT_NR" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="09" SCRLEN2="17" SCRLEN3="17" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONTAINER" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container number" REPTEXT="iContainer number" SCRTEXT_S="iC number" SCRTEXT_M="iContainer number" SCRTEXT_L="iContainer number" DOMNAME3L="ZIC_CONT_NR" SHLPORIGIN="P" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="CONT_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CTX_NR" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZIC_CTX_NR" CHECKTABLE="ZIC_CONT_CONTEXT" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CTX_NR" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONT_CONTEXT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container context number" REPTEXT="Context number" SCRTEXT_S="Ctx number" SCRTEXT_M="Context number" SCRTEXT_L="Context number" DOMNAME3L="ZIC_CTX_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="IMPL_CTX_NR" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="ZIC_IMPL_CTX_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_IMPL_CTX_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_IMPL_CONTEXT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container implementation context number" REPTEXT="impl ctx number" SCRTEXT_S="impl ctxnr" SCRTEXT_M="impl ctx number" SCRTEXT_L="impl ctx number" DOMNAME3L="ZIC_IMPL_CTX_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CTX_NAME" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_CTX_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="ZIC_CTX_NAME" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="08" SCRLEN2="12" SCRLEN3="12" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container context name" REPTEXT="Context name" SCRTEXT_S="Ctx name" SCRTEXT_M="Context name" SCRTEXT_L="Context name" DOMNAME3L="ZIC_CTX_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CTX_TYPE" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_CTX_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" NOTNULL="X" DOMNAME="ZIC_CTX_TYPE" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="08" SCRLEN2="12" SCRLEN3="12" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container Context Type" REPTEXT="Context type" SCRTEXT_S="Ctx type" SCRTEXT_M="Context type" SCRTEXT_L="Context type" DOMNAME3L="ZIC_CTX_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="RANK" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZIC_RANK" ADMINFIELD="0" INTTYPE="N" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" DOMNAME3L="ZIC_RANK" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="PATH" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZIC_PATH" ADMINFIELD="0" INTTYPE="C" INTLEN="000240" NOTNULL="X" DOMNAME="ZIC_PATH" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" DTELMASTER="E" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container Path" REPTEXT="Path" SCRTEXT_S="Path" SCRTEXT_M="Path" SCRTEXT_L="Path" DOMNAME3L="ZIC_PATH" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CONT_NR" FORTABLE="ZIC_IMPL_CONTEXT" FORKEY="MANDT" CHECKTABLE="ZIC_CONTAINER" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CONT_NR" FORTABLE="ZIC_IMPL_CONTEXT" FORKEY="CONT_NR" CHECKTABLE="ZIC_CONTAINER" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CTX_NR" FORTABLE="ZIC_IMPL_CONTEXT" FORKEY="MANDT" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CTX_NR" FORTABLE="ZIC_IMPL_CONTEXT" FORKEY="CONT_NR" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CTX_NR" FORTABLE="ZIC_IMPL_CONTEXT" FORKEY="CTX_NR" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="CTX_NR" PRIMPOS="0003" DOMNAME="ZIC_CTX_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd08v TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CONT_NR" DDLANGUAGE="E" CHECKTABLE="ZIC_CONTAINER" FRKART="KEY" CARD="N" CARDLEFT="1"/>
  <dd08v TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CTX_NR" DDLANGUAGE="E" CHECKTABLE="ZIC_CONT_CONTEXT" FRKART="KEY" CARD="N" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZIC_IMPL_COMP" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Intelligent Container Implementation Component" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_IMPL_COMP" AS4LOCAL="A" AS4VERS="0000" TABKAT="2" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_IMPL_COMP" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_COMP" FIELDNAME="CONT_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_CONT_NR" CHECKTABLE="ZIC_CONTAINER" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CONT_NR" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="09" SCRLEN2="17" SCRLEN3="17" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONTAINER" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container number" REPTEXT="iContainer number" SCRTEXT_S="iC number" SCRTEXT_M="iContainer number" SCRTEXT_L="iContainer number" DOMNAME3L="ZIC_CONT_NR" SHLPORIGIN="P" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="CONT_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_COMP" FIELDNAME="CTX_NR" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZIC_CTX_NR" CHECKTABLE="ZIC_CONT_CONTEXT" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CTX_NR" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONT_CONTEXT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container context number" REPTEXT="Context number" SCRTEXT_S="Ctx number" SCRTEXT_M="Context number" SCRTEXT_L="Context number" DOMNAME3L="ZIC_CTX_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_COMP" FIELDNAME="IMPL_CTX_NR" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="ZIC_IMPL_CTX_NR" CHECKTABLE="ZIC_IMPL_CONTEXT" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_IMPL_CTX_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_IMPL_CONTEXT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container implementation context number" REPTEXT="impl ctx number" SCRTEXT_S="impl ctxnr" SCRTEXT_M="impl ctx number" SCRTEXT_L="impl ctx number" DOMNAME3L="ZIC_IMPL_CTX_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_COMP" FIELDNAME="IMPL_COMP_NR" DDLANGUAGE="E" POSITION="0005" KEYFLAG="X" ROLLNAME="ZIC_IMPL_COMP_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_IMPL_COMP_NR" ROUTPUTLEN="000000" HEADLEN="31" SCRLEN1="10" SCRLEN2="17" SCRLEN3="31" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_IMPL_COMP" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container Implementation Component number" REPTEXT="Implementation Component number" SCRTEXT_S="ImpComp nr" SCRTEXT_M="Impl component nr" SCRTEXT_L="Implementation Component number" DOMNAME3L="ZIC_IMPL_COMP_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_COMP" FIELDNAME="IMPL_TYPE" DDLANGUAGE="E" POSITION="0006" KEYFLAG="X" ROLLNAME="ZIC_IMPL_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000004" NOTNULL="X" DOMNAME="ZIC_IMPL_TYPE" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="09" SCRLEN2="19" SCRLEN3="19" DTELMASTER="E" DATATYPE="CHAR" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container implementation type" REPTEXT="Implementation type" SCRTEXT_S="Impl type" SCRTEXT_M="Implementation type" SCRTEXT_L="Implementation type" DOMNAME3L="ZIC_IMPL_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_COMP" FIELDNAME="IMPL_NAME" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZIC_IMPL_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="ZIC_IMPL_NAME" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="09" SCRLEN2="19" SCRLEN3="19" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container implementation name" REPTEXT="Implementation name" SCRTEXT_S="Impl name" SCRTEXT_M="Implementation name" SCRTEXT_L="Implementation name" DOMNAME3L="ZIC_IMPL_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_COMP" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_IMPL_COMP" FIELDNAME="RANK" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZIC_RANK" ADMINFIELD="0" INTTYPE="N" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" DOMNAME3L="ZIC_RANK" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZIC_IMPL_COMP" FIELDNAME="CONT_NR" FORTABLE="ZIC_IMPL_COMP" FORKEY="MANDT" CHECKTABLE="ZIC_CONTAINER" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_IMPL_COMP" FIELDNAME="CONT_NR" FORTABLE="ZIC_IMPL_COMP" FORKEY="CONT_NR" CHECKTABLE="ZIC_CONTAINER" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_IMPL_COMP" FIELDNAME="CTX_NR" FORTABLE="ZIC_IMPL_COMP" FORKEY="MANDT" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_IMPL_COMP" FIELDNAME="CTX_NR" FORTABLE="ZIC_IMPL_COMP" FORKEY="CONT_NR" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_IMPL_COMP" FIELDNAME="CTX_NR" FORTABLE="ZIC_IMPL_COMP" FORKEY="CTX_NR" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="CTX_NR" PRIMPOS="0003" DOMNAME="ZIC_CTX_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_IMPL_COMP" FIELDNAME="IMPL_CTX_NR" FORTABLE="ZIC_IMPL_COMP" FORKEY="MANDT" CHECKTABLE="ZIC_IMPL_CONTEXT" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_IMPL_COMP" FIELDNAME="IMPL_CTX_NR" FORTABLE="ZIC_IMPL_COMP" FORKEY="CONT_NR" CHECKTABLE="ZIC_IMPL_CONTEXT" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_IMPL_COMP" FIELDNAME="IMPL_CTX_NR" FORTABLE="ZIC_IMPL_COMP" FORKEY="CTX_NR" CHECKTABLE="ZIC_IMPL_CONTEXT" CHECKFIELD="CTX_NR" PRIMPOS="0003" DOMNAME="ZIC_CTX_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_IMPL_COMP" FIELDNAME="IMPL_CTX_NR" FORTABLE="ZIC_IMPL_COMP" FORKEY="IMPL_CTX_NR" CHECKTABLE="ZIC_IMPL_CONTEXT" CHECKFIELD="IMPL_CTX_NR" PRIMPOS="0004" DOMNAME="ZIC_IMPL_CTX_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd08v TABNAME="ZIC_IMPL_COMP" FIELDNAME="CONT_NR" DDLANGUAGE="E" CHECKTABLE="ZIC_CONTAINER" CARD="CN" CARDLEFT="1"/>
  <dd08v TABNAME="ZIC_IMPL_COMP" FIELDNAME="CTX_NR" DDLANGUAGE="E" CHECKTABLE="ZIC_CONT_CONTEXT" CARD="CN" CARDLEFT="1"/>
  <dd08v TABNAME="ZIC_IMPL_COMP" FIELDNAME="IMPL_CTX_NR" DDLANGUAGE="E" CHECKTABLE="ZIC_IMPL_CONTEXT" CARD="CN" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZIC_CONT_CONTEXT" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Intelligent Container Context" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_CONT_CONTEXT" AS4LOCAL="A" AS4VERS="0000" TABKAT="2" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="CONT_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_CONT_NR" CHECKTABLE="ZIC_CONTAINER" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CONT_NR" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="09" SCRLEN2="17" SCRLEN3="17" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONTAINER" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container number" REPTEXT="iContainer number" SCRTEXT_S="iC number" SCRTEXT_M="iContainer number" SCRTEXT_L="iContainer number" DOMNAME3L="ZIC_CONT_NR" SHLPORIGIN="P" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="CONT_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="CTX_NR" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZIC_CTX_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CTX_NR" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONT_CONTEXT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container context number" REPTEXT="Context number" SCRTEXT_S="Ctx number" SCRTEXT_M="Context number" SCRTEXT_L="Context number" DOMNAME3L="ZIC_CTX_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="CTX_NAME" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZIC_CTX_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="ZIC_CTX_NAME" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="08" SCRLEN2="12" SCRLEN3="12" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container context name" REPTEXT="Context name" SCRTEXT_S="Ctx name" SCRTEXT_M="Context name" SCRTEXT_L="Context name" DOMNAME3L="ZIC_CTX_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="CTX_TYPE" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_CTX_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" NOTNULL="X" DOMNAME="ZIC_CTX_TYPE" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="08" SCRLEN2="12" SCRLEN3="12" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container Context Type" REPTEXT="Context type" SCRTEXT_S="Ctx type" SCRTEXT_M="Context type" SCRTEXT_L="Context type" DOMNAME3L="ZIC_CTX_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="PARENT_CTX" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_CTX_NR" CHECKTABLE="ZIC_CONT_CONTEXT" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" DOMNAME="ZIC_CTX_NR" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONT_CONTEXT" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container context number" REPTEXT="Context number" SCRTEXT_S="Ctx number" SCRTEXT_M="Context number" SCRTEXT_L="Context number" DOMNAME3L="ZIC_CTX_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="RANK" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZIC_RANK" ADMINFIELD="0" INTTYPE="N" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" DOMNAME3L="ZIC_RANK" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="CONT_NR" FORTABLE="ZIC_CONT_CONTEXT" FORKEY="MANDT" CHECKTABLE="ZIC_CONTAINER" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="CONT_NR" FORTABLE="ZIC_CONT_CONTEXT" FORKEY="CONT_NR" CHECKTABLE="ZIC_CONTAINER" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="PARENT_CTX" FORTABLE="ZIC_CONT_CONTEXT" FORKEY="MANDT" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="PARENT_CTX" FORTABLE="ZIC_CONT_CONTEXT" FORKEY="CONT_NR" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="CONT_NR" PRIMPOS="0002" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="PARENT_CTX" FORTABLE="ZIC_CONT_CONTEXT" FORKEY="PARENT_CTX" CHECKTABLE="ZIC_CONT_CONTEXT" CHECKFIELD="CTX_NR" PRIMPOS="0003" DOMNAME="ZIC_CTX_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd08v TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="CONT_NR" DDLANGUAGE="E" CHECKTABLE="ZIC_CONTAINER" FRKART="KEY" CARD="N" CARDLEFT="1"/>
  <dd08v TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="PARENT_CTX" DDLANGUAGE="E" CHECKTABLE="ZIC_CONT_CONTEXT"/>
 </TABL>
 <TABL TABNAME="ZIC_CONTAINER" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Intelligent Container" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_CONTAINER" AS4LOCAL="A" AS4VERS="0000" TABKAT="1" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_CONTAINER" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONTAINER" FIELDNAME="CONT_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_CONT_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CONT_NR" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="09" SCRLEN2="17" SCRLEN3="17" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CONTAINER" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container number" REPTEXT="iContainer number" SCRTEXT_S="iC number" SCRTEXT_M="iContainer number" SCRTEXT_L="iContainer number" DOMNAME3L="ZIC_CONT_NR" SHLPORIGIN="D" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="CONT_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONTAINER" FIELDNAME="NAME" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZIC_CONT_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="ZIC_CONT_NAME" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container Name" REPTEXT="Container name" SCRTEXT_S="Cont. name" SCRTEXT_M="Container name" SCRTEXT_L="Container name" DOMNAME3L="ZIC_CONT_NAME" SHLPORIGIN="D" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONTAINER" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CONTAINER" FIELDNAME="CONT_TYPE" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_CONT_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" NOTNULL="X" DOMNAME="ZIC_CONT_TYPE" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="09" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container type" REPTEXT="Container type" SCRTEXT_S="Cont type" SCRTEXT_M="Container type" SCRTEXT_L="Container type" DOMNAME3L="ZIC_CONT_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZIC_CLASS_ATTRIB" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Intelligent Container Class Attribute" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_CLASS_ATTRIB" AS4LOCAL="A" AS4VERS="0000" TABKAT="2" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="CLASS_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_CLASS_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="ATTRIB_NR" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZIC_ATTRIB_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_ATTRIB_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS_ATTRIB" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class attribute number" REPTEXT="Attribute number" SCRTEXT_S="Attrib nr." SCRTEXT_M="Attribute number" SCRTEXT_L="Attribute number" DOMNAME3L="ZIC_ATTRIB_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="ATTRIB_NAME" DDLANGUAGE="E" POSITION="0004" ROLLNAME="SEOCPDNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000122" NOTNULL="X" DOMNAME="CHAR61" ROUTPUTLEN="000000" HEADLEN="61" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000061" OUTPUTLEN="000061" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Full Component Name" REPTEXT="Interface Component" SCRTEXT_S="Int. Comp." SCRTEXT_M="Interface Comp." SCRTEXT_L="Interface Component" DOMNAME3L="CHAR61" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="RANK" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_RANK" ADMINFIELD="0" INTTYPE="N" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" DOMNAME3L="ZIC_RANK" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_VALUE" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZIC_VALUE_NR" CHECKTABLE="ZIC_VALUE" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_VALUE_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_VALUE" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC value number" REPTEXT="IC value number" SCRTEXT_S="IC valuenr" SCRTEXT_M="IC value number" SCRTEXT_L="IC value number" DOMNAME3L="ZIC_VALUE_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="VALUE_TYPE" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZIC_VALUE_TYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="ZIC_VALUE_TYPE" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="10" SCRLEN3="10" DTELMASTER="E" DATATYPE="CHAR" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Value Type" REPTEXT="Value Type" SCRTEXT_S="Value Type" SCRTEXT_M="Value Type" SCRTEXT_L="Value Type" DOMNAME3L="ZIC_VALUE_TYPE" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="DATA_TYPE" DDLANGUAGE="E" POSITION="0009" ROLLNAME="RS38L_TYP" ADMINFIELD="0" INTTYPE="C" INTLEN="000264" NOTNULL="X" DOMNAME="RS38L_TYP" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000132" OUTPUTLEN="000132" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Associated Type of an Interface Parameter" REPTEXT="Associated Type" SCRTEXT_S="Assoc.Type" SCRTEXT_M="Associated Type" SCRTEXT_L="Associated Type" DOMNAME3L="RS38L_TYP" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="DATA_VALUE" DDLANGUAGE="E" POSITION="0010" ROLLNAME="SEOVALUE" ADMINFIELD="0" INTTYPE="C" INTLEN="000264" NOTNULL="X" DOMNAME="TEXT132" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000132" OUTPUTLEN="000132" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Initial value" REPTEXT="Initial value" SCRTEXT_S="Initial" SCRTEXT_M="Initial value" SCRTEXT_L="Initial value" DOMNAME3L="TEXT132" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="TABLE_NAME" DDLANGUAGE="E" POSITION="0011" ROLLNAME="TABNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="AS4TAB" ROUTPUTLEN="000000" MEMORYID="DTB" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Table Name" REPTEXT="Table Name" SCRTEXT_S="Table" SCRTEXT_M="Table Name" SCRTEXT_L="Table Name" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" DEFFDNAME="TABNAME" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_CLASS" DDLANGUAGE="E" POSITION="0012" ROLLNAME="ZIC_CLASS_NR" CHECKTABLE="ZIC_CLASS" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM_CLASS" DDLANGUAGE="E" POSITION="0013" ROLLNAME="ZIC_CLASS_NR" CHECKTABLE="ZIC_CLASS" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM_METHOD" DDLANGUAGE="E" POSITION="0014" ROLLNAME="ZIC_METHOD_NR" CHECKTABLE="ZIC_METHOD" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_METHOD_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method number" REPTEXT="IC method number" SCRTEXT_S="IC meth nr" SCRTEXT_M="IC method number" SCRTEXT_L="IC method number" DOMNAME3L="ZIC_METHOD_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM" DDLANGUAGE="E" POSITION="0015" ROLLNAME="ZIC_PARAM_NR" CHECKTABLE="ZIC_METHOD_PARAM" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_PARAM_NR" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="09" SCRLEN2="13" SCRLEN3="16" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_METHOD_PARAM" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC method parameter number" REPTEXT="Parameter number" SCRTEXT_S="Param nr." SCRTEXT_M="Parameter nr." SCRTEXT_L="Parameter number" DOMNAME3L="ZIC_PARAM_NR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_CLASS" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="MANDT" CHECKTABLE="ZIC_CLASS" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_CLASS" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="IC_CLASS" CHECKTABLE="ZIC_CLASS" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="MANDT" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="IC_PARAM_CLASS" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="IC_PARAM_METHOD" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="METHOD_NR" PRIMPOS="0003" DOMNAME="ZIC_METHOD_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="IC_PARAM" CHECKTABLE="ZIC_METHOD_PARAM" CHECKFIELD="PARAM_NR" PRIMPOS="0004" DOMNAME="ZIC_PARAM_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM_CLASS" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="MANDT" CHECKTABLE="ZIC_CLASS" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM_CLASS" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="IC_PARAM_CLASS" CHECKTABLE="ZIC_CLASS" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM_METHOD" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="MANDT" CHECKTABLE="ZIC_METHOD" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM_METHOD" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="IC_PARAM_CLASS" CHECKTABLE="ZIC_METHOD" CHECKFIELD="CLASS_NR" PRIMPOS="0002" DOMNAME="ZIC_CLASS_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM_METHOD" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="IC_PARAM_METHOD" CHECKTABLE="ZIC_METHOD" CHECKFIELD="METHOD_NR" PRIMPOS="0003" DOMNAME="ZIC_METHOD_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_VALUE" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="MANDT" CHECKTABLE="ZIC_VALUE" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_VALUE" FORTABLE="ZIC_CLASS_ATTRIB" FORKEY="IC_VALUE" CHECKTABLE="ZIC_VALUE" CHECKFIELD="VALUE_NR" PRIMPOS="0002" DOMNAME="ZIC_VALUE_NR" DATATYPE="NUMC" LENG="000008"/>
  <dd08v TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_CLASS" DDLANGUAGE="E" CHECKTABLE="ZIC_CLASS" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM" DDLANGUAGE="E" CHECKTABLE="ZIC_METHOD_PARAM" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM_CLASS" DDLANGUAGE="E" CHECKTABLE="ZIC_CLASS" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_PARAM_METHOD" DDLANGUAGE="E" CHECKTABLE="ZIC_METHOD" FRKART="KEY" CARD="CN" CARDLEFT="C"/>
  <dd08v TABNAME="ZIC_CLASS_ATTRIB" FIELDNAME="IC_VALUE" DDLANGUAGE="E" CHECKTABLE="ZIC_VALUE"/>
 </TABL>
 <TABL TABNAME="ZIC_CLASS" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Intelligent Container class implementation component" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZIC_CLASS" AS4LOCAL="A" AS4VERS="0000" TABKAT="2" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZIC_CLASS" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS" FIELDNAME="CLASS_NR" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZIC_CLASS_NR" ADMINFIELD="0" INTTYPE="N" INTLEN="000016" NOTNULL="X" DOMNAME="ZIC_CLASS_NR" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="NUMC" LENG="000008" OUTPUTLEN="000008" DECIMALS="000000" ENTITYTAB="ZIC_CLASS" MASK="  NUMCE" MASKLEN="0000" DDTEXT="IC class number" REPTEXT="IC class number" SCRTEXT_S="IC classnr" SCRTEXT_M="IC class number" SCRTEXT_L="IC class number" DOMNAME3L="ZIC_CLASS_NR" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS" FIELDNAME="IMPL_NAME" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZIC_CLASS_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="ZIC_CLASS_NAME" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="08" SCRLEN2="13" SCRLEN3="13" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC class name" REPTEXT="IC Class Name" SCRTEXT_S="IC Class" SCRTEXT_M="IC Class Name" SCRTEXT_L="IC Class Name" DOMNAME3L="ZIC_CLASS_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS" FIELDNAME="DESCRIPTION" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZIC_DESCRIPTION" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="ZIC_DESCRIPTION" ROUTPUTLEN="000000" HEADLEN="33" SCRLEN1="08" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container description" REPTEXT="Intelligent Container description" SCRTEXT_S="IC descr" SCRTEXT_M="IC description" SCRTEXT_L="IC description" DOMNAME3L="ZIC_DESCRIPTION" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS" FIELDNAME="RANK" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZIC_RANK" ADMINFIELD="0" INTTYPE="N" INTLEN="000010" NOTNULL="X" DOMNAME="ZIC_RANK" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="07" SCRLEN2="07" SCRLEN3="07" DTELMASTER="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Intelligent Container rank" REPTEXT="IC rank" SCRTEXT_S="IC rank" SCRTEXT_M="IC rank" SCRTEXT_L="IC rank" DOMNAME3L="ZIC_RANK" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS" FIELDNAME="CLASS_NAME" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZIC_CLSNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000240" NOTNULL="X" DOMNAME="ZIC_CLSNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Class name" REPTEXT="Class name" SCRTEXT_S="Class name" SCRTEXT_M="Class name" SCRTEXT_L="Class name" DOMNAME3L="ZIC_CLSNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS" FIELDNAME="RETURN_CLASS_NAME" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZIC_CLSNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000240" NOTNULL="X" DOMNAME="ZIC_CLSNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Class name" REPTEXT="Class name" SCRTEXT_S="Class name" SCRTEXT_M="Class name" SCRTEXT_L="Class name" DOMNAME3L="ZIC_CLSNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS" FIELDNAME="DEFAULT_CONSTR" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZIC_CLASS_DEFCONSTR" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" NOTNULL="X" DOMNAME="YESNO" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="10" SCRLEN2="19" SCRLEN3="19" DTELMASTER="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="IC Default Constructor" REPTEXT="Default constructor" SCRTEXT_S="Def contsr" SCRTEXT_M="Default constructor" SCRTEXT_L="Default constructor" DOMNAME3L="YESNO" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZIC_CLASS" FIELDNAME="PATH" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZIC_PATH" ADMINFIELD="0" INTTYPE="C" INTLEN="000240" NOTNULL="X" DOMNAME="ZIC_PATH" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" DTELMASTER="E" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Intelligent Container Path" REPTEXT="Path" SCRTEXT_S="Path" SCRTEXT_M="Path" SCRTEXT_L="Path" DOMNAME3L="ZIC_PATH" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <VIEW VIEWNAME="ZIC_V_INJ_TYPE" AS4LOCAL="A" AS4VERS="0000" DDLANGUAGE="E" AGGTYPE="V" AUTHCLASS="00" ROOTTAB="ZIC_CONTAINER" DDTEXT="IC inject type view" VIEWCLASS="D" VIEWGRANT="R">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd26v VIEWNAME="ZIC_V_INJ_TYPE" TABNAME="ZIC_CONTAINER" TABPOS="0001" FORTABNAME="ZIC_CONTAINER"/>
  <dd26v VIEWNAME="ZIC_V_INJ_TYPE" TABNAME="ZIC_CONT_CONTEXT" TABPOS="0002"/>
  <dd26v VIEWNAME="ZIC_V_INJ_TYPE" TABNAME="ZIC_IMPL_CONTEXT" TABPOS="0003"/>
  <dd27p VIEWNAME="ZIC_V_INJ_TYPE" OBJPOS="0001" DDLANGUAGE="E" VIEWFIELD="MANDT" TABNAME="ZIC_CONTAINER" FIELDNAME="MANDT" KEYFLAG="X" ROLLNAME="MANDT" ROLLNAMEVI="MANDT" DOMNAME="MANDT" DATATYPE="CLNT" FLENGTH="000003" ENTITYTAB="T000" INTTYPE="C" INTLEN="000006" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000003" DECIMALS="000000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" OUTPUTSTYLE="00"/>
  <dd27p VIEWNAME="ZIC_V_INJ_TYPE" OBJPOS="0002" DDLANGUAGE="E" VIEWFIELD="CONT_NR" TABNAME="ZIC_CONTAINER" FIELDNAME="CONT_NR" KEYFLAG="X" ROLLNAME="ZIC_CONT_NR" ROLLNAMEVI="ZIC_CONT_NR" DOMNAME="ZIC_CONT_NR" DATATYPE="NUMC" FLENGTH="000008" SHLPORIGIN="D" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="CONT_NR" ENTITYTAB="ZIC_CONTAINER" INTTYPE="N" INTLEN="000016" HEADLEN="17" SCRLEN1="09" SCRLEN2="17" SCRLEN3="17" OUTPUTLEN="000008" DECIMALS="000000" DDTEXT="Intelligent Container number" REPTEXT="iContainer number" SCRTEXT_S="iC number" SCRTEXT_M="iContainer number" SCRTEXT_L="iContainer number" OUTPUTSTYLE="00"/>
  <dd27p VIEWNAME="ZIC_V_INJ_TYPE" OBJPOS="0003" DDLANGUAGE="E" VIEWFIELD="CONT_NAME" TABNAME="ZIC_CONTAINER" FIELDNAME="NAME" KEYFLAG="X" ROLLNAME="ZIC_CONT_NAME" ROLLNAMEVI="ZIC_CONT_NAME" DOMNAME="ZIC_CONT_NAME" DATATYPE="CHAR" FLENGTH="000030" SHLPORIGIN="D" SHLPNAME="ZIC_CONTAINER" SHLPFIELD="NAME" INTTYPE="C" INTLEN="000060" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" OUTPUTLEN="000030" DECIMALS="000000" DDTEXT="Intelligent Container Name" REPTEXT="Container name" SCRTEXT_S="Cont. name" SCRTEXT_M="Container name" SCRTEXT_L="Container name" OUTPUTSTYLE="00"/>
  <dd27p VIEWNAME="ZIC_V_INJ_TYPE" OBJPOS="0004" DDLANGUAGE="E" VIEWFIELD="CONT_TYPE" TABNAME="ZIC_CONTAINER" FIELDNAME="CONT_TYPE" KEYFLAG="X" ROLLNAME="ZIC_CONT_TYPE" ROLLNAMEVI="ZIC_CONT_TYPE" DOMNAME="ZIC_CONT_TYPE" DATATYPE="CHAR" FLENGTH="000001" SHLPORIGIN="F" INTTYPE="C" INTLEN="000002" HEADLEN="14" SCRLEN1="09" SCRLEN2="14" SCRLEN3="14" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" DDTEXT="Intelligent Container type" REPTEXT="Container type" SCRTEXT_S="Cont type" SCRTEXT_M="Container type" SCRTEXT_L="Container type" OUTPUTSTYLE="00"/>
  <dd27p VIEWNAME="ZIC_V_INJ_TYPE" OBJPOS="0005" DDLANGUAGE="E" VIEWFIELD="CONT_CTX_NR" TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="CTX_NR" KEYFLAG="X" ROLLNAME="ZIC_CTX_NR" ROLLNAMEVI="ZIC_CTX_NR" DOMNAME="ZIC_CTX_NR" DATATYPE="NUMC" FLENGTH="000008" ENTITYTAB="ZIC_CONT_CONTEXT" INTTYPE="N" INTLEN="000016" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" OUTPUTLEN="000008" DECIMALS="000000" DDTEXT="Intelligent Container context number" REPTEXT="Context number" SCRTEXT_S="Ctx number" SCRTEXT_M="Context number" SCRTEXT_L="Context number" OUTPUTSTYLE="00"/>
  <dd27p VIEWNAME="ZIC_V_INJ_TYPE" OBJPOS="0006" DDLANGUAGE="E" VIEWFIELD="CONT_CTX_NAME" TABNAME="ZIC_CONT_CONTEXT" FIELDNAME="CTX_NAME" KEYFLAG="X" ROLLNAME="ZIC_CTX_NAME" ROLLNAMEVI="ZIC_CTX_NAME" DOMNAME="ZIC_CTX_NAME" DATATYPE="CHAR" FLENGTH="000030" INTTYPE="C" INTLEN="000060" HEADLEN="12" SCRLEN1="08" SCRLEN2="12" SCRLEN3="12" OUTPUTLEN="000030" DECIMALS="000000" DDTEXT="Intelligent Container context name" REPTEXT="Context name" SCRTEXT_S="Ctx name" SCRTEXT_M="Context name" SCRTEXT_L="Context name" OUTPUTSTYLE="00"/>
  <dd27p VIEWNAME="ZIC_V_INJ_TYPE" OBJPOS="0007" DDLANGUAGE="E" VIEWFIELD="INJ_CTX_NR" TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="IMPL_CTX_NR" KEYFLAG="X" ROLLNAME="ZIC_IMPL_CTX_NR" ROLLNAMEVI="ZIC_IMPL_CTX_NR" DOMNAME="ZIC_IMPL_CTX_NR" DATATYPE="NUMC" FLENGTH="000008" ENTITYTAB="ZIC_IMPL_CONTEXT" INTTYPE="N" INTLEN="000016" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000008" DECIMALS="000000" DDTEXT="Intelligent Container implementation context number" REPTEXT="impl ctx number" SCRTEXT_S="impl ctxnr" SCRTEXT_M="impl ctx number" SCRTEXT_L="impl ctx number" OUTPUTSTYLE="00"/>
  <dd27p VIEWNAME="ZIC_V_INJ_TYPE" OBJPOS="0008" DDLANGUAGE="E" VIEWFIELD="INJ_CTX_NAME" TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="CTX_NAME" ROLLNAME="ZIC_CTX_NAME" ROLLNAMEVI="ZIC_CTX_NAME" DOMNAME="ZIC_CTX_NAME" DATATYPE="CHAR" FLENGTH="000030" INTTYPE="C" INTLEN="000060" HEADLEN="12" SCRLEN1="08" SCRLEN2="12" SCRLEN3="12" OUTPUTLEN="000030" DECIMALS="000000" DDTEXT="Intelligent Container context name" REPTEXT="Context name" SCRTEXT_S="Ctx name" SCRTEXT_M="Context name" SCRTEXT_L="Context name" OUTPUTSTYLE="00"/>
  <dd27p VIEWNAME="ZIC_V_INJ_TYPE" OBJPOS="0009" DDLANGUAGE="E" VIEWFIELD="INJ_CTX_PATH" TABNAME="ZIC_IMPL_CONTEXT" FIELDNAME="PATH" ROLLNAME="ZIC_PATH" ROLLNAMEVI="ZIC_PATH" DOMNAME="ZIC_PATH" DATATYPE="CHAR" FLENGTH="000120" INTTYPE="C" INTLEN="000240" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" OUTPUTLEN="000120" DECIMALS="000000" DDTEXT="Intelligent Container Path" REPTEXT="Path" SCRTEXT_S="Path" SCRTEXT_M="Path" SCRTEXT_L="Path" OUTPUTSTYLE="00"/>
  <dd28j VIEWNAME="ZIC_V_INJ_TYPE" LTAB="ZIC_CONTAINER" LFIELD="MANDT" OPERATOR="EQ" RTAB="ZIC_CONT_CONTEXT" RFIELD="MANDT" SOURCE="S"/>
  <dd28j VIEWNAME="ZIC_V_INJ_TYPE" LTAB="ZIC_CONTAINER" LFIELD="CONT_NR" OPERATOR="EQ" RTAB="ZIC_CONT_CONTEXT" RFIELD="CONT_NR" SOURCE="S"/>
  <dd28j VIEWNAME="ZIC_V_INJ_TYPE" LTAB="ZIC_CONT_CONTEXT" LFIELD="MANDT" OPERATOR="EQ" RTAB="ZIC_IMPL_CONTEXT" RFIELD="MANDT" SOURCE="S"/>
  <dd28j VIEWNAME="ZIC_V_INJ_TYPE" LTAB="ZIC_CONT_CONTEXT" LFIELD="CONT_NR" OPERATOR="EQ" RTAB="ZIC_IMPL_CONTEXT" RFIELD="CONT_NR" SOURCE="S"/>
  <dd28j VIEWNAME="ZIC_V_INJ_TYPE" LTAB="ZIC_CONT_CONTEXT" LFIELD="CTX_NR" OPERATOR="EQ" RTAB="ZIC_IMPL_CONTEXT" RFIELD="CTX_NR" SOURCE="S"/>
  <dd28v CONDNAME="ZIC_V_INJ_TYPE" POSITION="0011" TABNAME="ZIC_CONTAINER" FIELDNAME="CONT_TYPE" OPERATOR="EQ" CONSTANTS="&apos;T&apos;" OFFSET="0000" FLENGTH="0000"/>
 </VIEW>
 <WDYA APPLICATION_NAME="ZIC_CONTAINER_WD_APP" COMPONENT="ZIC_CONTAINER_WD" STARTUP_VIEW="W_MAIN" STARTUP_PLUG="DEFAULT" DISPLAY_NAME="zic_container_wd_app" MSG_DISP_MODE="00" AUTHORITY_CHECK="00" SESSION_KIND="00" help_desc_txt="">
  <wdy_applicationt APPLICATION_NAME="ZIC_CONTAINER_WD_APP" LANGU="E" DESCRIPTION="IC Container application"/>
 </WDYA>
 <WDYN COMPONENT_NAME="ZIC_CONTAINER_WD" VERSION="A" TYPE="0" CMP_CONTROLLER="COMPONENTCONTROLLER" CMP_INTERFACE="COMPONENTINTERFACE" DISPLAY_NAME="ZIC_CONTAINER_WD" CONFIG_EXPL_PROP="0" CONFIG_IMPL_PROP="0" P13N_EXPL_PROP="0" P13N_IMPL_PROP="0">
  <wdy_componentt COMPONENT_NAME="ZIC_CONTAINER_WD" LANGU="E" DESCRIPTION="IC Container Web dynpro"/>
  <view_definition COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" VERSION="A" TYPE="CL_WDY_MD_VIEW" VIEW_TYPE="00" LIFESPAN="0" VIEW_CONTROLLER="V_CONT_SEARCH" ROOT_UI_CONT="ROOTUIELEMENTCONTAINER" DISPLAY_NAME="V_CONT_SEARCH" VISIBILITY="00">
   <wdy_viewt COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" LANGU="E" DESCRIPTION="Container search view"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ADD_CONT_BUTTON" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CLWDY_TOOLBAR_ICON_BUTTON" DISPLAY_NAME="ADD_CONT_BUTTON" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="TOOLBAR_ICON_BUTTON" PARENT_NAME="SEARCH_CONT_TOOLBAR" AGGREGATION_NAME="TOOLBAR_ITEMS"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CAPTION" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_CAPTION" DISPLAY_NAME="CAPTION" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="CAPTION" PARENT_NAME="CONT_SEARCH_GRP" AGGREGATION_NAME="HEADER"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" ELEMENT_POSITION="4 " UI_ELEMENT_TYPE="CL_WDY_MD_INPUT_FIELD" DISPLAY_NAME="CONT_NAME_INP" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="INPUT_FIELD" PARENT_NAME="CONT_SEARCH_GRP" AGGREGATION_NAME="CHILDREN"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP_LD" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_DATA" DISPLAY_NAME="CONT_NAME_INP_LD" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_DATA" PARENT_NAME="CONT_NAME_INP" AGGREGATION_NAME="LAYOUT_DATA"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL" VERSION="I" ELEMENT_POSITION="3 " UI_ELEMENT_TYPE="CL_WDY_MD_LABEL" DISPLAY_NAME="CONT_NAME_LBL" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="LABEL" PARENT_NAME="CONT_SEARCH_GRP" AGGREGATION_NAME="CHILDREN"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL_LD" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_DATA" DISPLAY_NAME="CONT_NAME_LBL_LD" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_DATA" PARENT_NAME="CONT_NAME_LBL" AGGREGATION_NAME="LAYOUT_DATA"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" ELEMENT_POSITION="2 " UI_ELEMENT_TYPE="CL_WDY_MD_INPUT_FIELD" DISPLAY_NAME="CONT_NR_INP" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="INPUT_FIELD" PARENT_NAME="CONT_SEARCH_GRP" AGGREGATION_NAME="CHILDREN"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP_LAYOUT_DATA" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_DATA" DISPLAY_NAME="CONT_NR_INP_LAYOUT_DATA" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_DATA" PARENT_NAME="CONT_NR_INP" AGGREGATION_NAME="LAYOUT_DATA"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_LABEL" DISPLAY_NAME="CONT_NR_LBL" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="LABEL" PARENT_NAME="CONT_SEARCH_GRP" AGGREGATION_NAME="CHILDREN"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL_LD" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_DATA" DISPLAY_NAME="CONT_NR_LBL_LD" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_DATA" PARENT_NAME="CONT_NR_LBL" AGGREGATION_NAME="LAYOUT_DATA"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GROUP" DISPLAY_NAME="CONT_SEARCH_GRP" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GROUP" PARENT_NAME="ROOTUIELEMENTCONTAINER" AGGREGATION_NAME="CHILDREN"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LAYOUT" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_LAYOUT" DISPLAY_NAME="CONT_SEARCH_GRP_LAYOUT" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_LAYOUT" PARENT_NAME="CONT_SEARCH_GRP" AGGREGATION_NAME="LAYOUT"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LD" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_DATA" DISPLAY_NAME="CONT_SEARCH_GRP_LD" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_DATA" PARENT_NAME="CONT_SEARCH_GRP" AGGREGATION_NAME="LAYOUT_DATA"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" ELEMENT_POSITION="0 " UI_ELEMENT_TYPE="CL_WDY_MD_TRANSP_CONTAINER" DISPLAY_NAME="ROOTUIELEMENTCONTAINER" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="TRANSPARENT_CONTAINER"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_LAYOUT" DISPLAY_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_LAYOUT" PARENT_NAME="ROOTUIELEMENTCONTAINER" AGGREGATION_NAME="LAYOUT"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_TOOL_BAR" DISPLAY_NAME="SEARCH_CONT_TOOLBAR" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="TOOLBAR" PARENT_NAME="CONT_SEARCH_GRP" AGGREGATION_NAME="TOOLBAR"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR_LAYOUT_D_1" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_DATA" DISPLAY_NAME="SEARCH_CONT_TOOLBAR_LAYOUT_D_1" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_DATA" PARENT_NAME="SEARCH_CONT_TOOLBAR" AGGREGATION_NAME="LAYOUT_DATA"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ADD_CONT_BUTTON" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ADD_CONT_BUTTON" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ADD_CONT_BUTTON" VERSION="I" PROPERTY_NAME="HOTKEY" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ADD_CONT_BUTTON" VERSION="I" PROPERTY_NAME="IMAGE_SOURCE" PROPERTY_VALUE="~Icon/Add"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ADD_CONT_BUTTON" VERSION="I" PROPERTY_NAME="TYPE" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ADD_CONT_BUTTON" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CAPTION" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CAPTION" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CAPTION" VERSION="I" PROPERTY_NAME="IMAGE_FIRST" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CAPTION" VERSION="I" PROPERTY_NAME="TEXT" PROPERTY_VALUE="101F74C402131EE488CAF9CBC7DA08C9" PropText="Search container"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CAPTION" VERSION="I" PROPERTY_NAME="TEXT_DIRECTION" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CAPTION" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="ALIGNMENT" PROPERTY_VALUE="03"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="IME_MODE" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="LENGTH" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="STATE" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="SUGGEST_VALUES" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="SUPPRESS_VALUE_HELP" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="TEXT_DIRECTION" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP_LD" VERSION="I" PROPERTY_NAME="CELL_BACKGROUND_DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP_LD" VERSION="I" PROPERTY_NAME="COL_SPAN" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP_LD" VERSION="I" PROPERTY_NAME="H_ALIGN" PROPERTY_VALUE="08"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP_LD" VERSION="I" PROPERTY_NAME="V_ALIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL" VERSION="I" PROPERTY_NAME="DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL" VERSION="I" PROPERTY_NAME="LABEL_FOR" PROPERTY_VALUE="CONT_NAME_INP"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL" VERSION="I" PROPERTY_NAME="TEXT" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL" VERSION="I" PROPERTY_NAME="TEXT_DIRECTION" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL_LD" VERSION="I" PROPERTY_NAME="CELL_BACKGROUND_DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL_LD" VERSION="I" PROPERTY_NAME="COL_SPAN" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL_LD" VERSION="I" PROPERTY_NAME="H_ALIGN" PROPERTY_VALUE="08"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_LBL_LD" VERSION="I" PROPERTY_NAME="V_ALIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="ALIGNMENT" PROPERTY_VALUE="03"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="IME_MODE" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="LENGTH" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="STATE" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="SUGGEST_VALUES" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="SUPPRESS_VALUE_HELP" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="TEXT_DIRECTION" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP_LAYOUT_DATA" VERSION="I" PROPERTY_NAME="CELL_BACKGROUND_DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP_LAYOUT_DATA" VERSION="I" PROPERTY_NAME="COL_SPAN" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP_LAYOUT_DATA" VERSION="I" PROPERTY_NAME="H_ALIGN" PROPERTY_VALUE="08"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP_LAYOUT_DATA" VERSION="I" PROPERTY_NAME="V_ALIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL" VERSION="I" PROPERTY_NAME="DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL" VERSION="I" PROPERTY_NAME="LABEL_FOR" PROPERTY_VALUE="CONT_NR_INP"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL" VERSION="I" PROPERTY_NAME="TEXT" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL" VERSION="I" PROPERTY_NAME="TEXT_DIRECTION" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL_LD" VERSION="I" PROPERTY_NAME="CELL_BACKGROUND_DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL_LD" VERSION="I" PROPERTY_NAME="COL_SPAN" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL_LD" VERSION="I" PROPERTY_NAME="H_ALIGN" PROPERTY_VALUE="08"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_LBL_LD" VERSION="I" PROPERTY_NAME="V_ALIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP" VERSION="I" PROPERTY_NAME="DESIGN" PROPERTY_VALUE="01"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP" VERSION="I" PROPERTY_NAME="HAS_CONTENT_PADDING" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP" VERSION="I" PROPERTY_NAME="SCROLLING_MODE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP" VERSION="I" PROPERTY_NAME="SCROLL_LEFT" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP" VERSION="I" PROPERTY_NAME="SCROLL_TOP" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_PADDING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_SPACING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LAYOUT" VERSION="I" PROPERTY_NAME="COL_COUNT" PROPERTY_VALUE="2"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_HORIZONTALLY" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_VERTICALLY" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LD" VERSION="I" PROPERTY_NAME="CELL_BACKGROUND_DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LD" VERSION="I" PROPERTY_NAME="COL_SPAN" PROPERTY_VALUE="2"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LD" VERSION="I" PROPERTY_NAME="H_ALIGN" PROPERTY_VALUE="08"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_SEARCH_GRP_LD" VERSION="I" PROPERTY_NAME="V_ALIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="IS_LAYOUT_CONTAINER" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="SCROLLING_MODE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="SCROLL_LEFT" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="SCROLL_TOP" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_PADDING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_SPACING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="COL_COUNT" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_HORIZONTALLY" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_VERTICALLY" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR" VERSION="I" PROPERTY_NAME="DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR" VERSION="I" PROPERTY_NAME="WRAPPING" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR_LAYOUT_D_1" VERSION="I" PROPERTY_NAME="CELL_BACKGROUND_DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR_LAYOUT_D_1" VERSION="I" PROPERTY_NAME="COL_SPAN" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR_LAYOUT_D_1" VERSION="I" PROPERTY_NAME="H_ALIGN" PROPERTY_VALUE="08"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="SEARCH_CONT_TOOLBAR_LAYOUT_D_1" VERSION="I" PROPERTY_NAME="V_ALIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_ctx_bind COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" BINDING_NAME="VALUE" VERSION="I" UI_ELEM_PROPERTY="VALUE" BOUND_CTX_NODE="ZIC_CONTAINER" BOUND_CTX_ATTRIB="NAME"/>
   <wdy_ui_ctx_bind COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NR_INP" BINDING_NAME="VALUE" VERSION="I" UI_ELEM_PROPERTY="VALUE" BOUND_CTX_NODE="ZIC_CONTAINER" BOUND_CTX_ATTRIB="CONT_NR"/>
   <wdy_ui_evt_bind COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="ADD_CONT_BUTTON" BINDING_NAME="ON_ACTION" VERSION="I" UI_ELEM_EVENT="ON_ACTION" BOUND_ACTION="ADD_CONT_CLICK"/>
   <wdy_ui_evt_bind COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_CONT_SEARCH" ELEMENT_NAME="CONT_NAME_INP" BINDING_NAME="ON_ENTER" VERSION="I" UI_ELEM_EVENT="ON_ENTER" BOUND_ACTION="ENTER_CONT_NAME"/>
   <controller_definition COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" VERSION="A" CONTROLLER_TYPE="01" CONTEXT="CONTEXT" DISPLAY_NAME="V_CONT_SEARCH">
    <wdy_controllert COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" LANGU="E" DESCRIPTION="Container search view"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ADD_CONT_CLICK" VERSION="I" CMPTYPE="CL_WDY_MD_ACTION" CMP_POSITION="0 " VISIBILITY="0" DISPLAY_NAME="ADD_CONT_CLICK" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ENTER_CONT_NAME" VERSION="I" CMPTYPE="CL_WDY_MD_ACTION" CMP_POSITION="0 " VISIBILITY="0" DISPLAY_NAME="ENTER_CONT_NAME" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONADD_CONT_CLICK" VERSION="I" CMPTYPE="CL_WDY_MD_CTLR_EVENT_HANDLER" CMP_POSITION="0 " VISIBILITY="2" REF_CTLR_NAME="V_CONT_SEARCH" REF_CMPNAME="ADD_CONT_CLICK" DISPLAY_NAME="ONACTIONADD_CONT_CLICK" CODE_BODY="method ONACTIONADD_CONT_CLICK .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONENTER_CONT_NAME" VERSION="I" CMPTYPE="CL_WDY_MD_CTLR_EVENT_HANDLER" CMP_POSITION="0 " VISIBILITY="2" REF_CTLR_NAME="V_CONT_SEARCH" REF_CMPNAME="ENTER_CONT_NAME" DISPLAY_NAME="ONACTIONENTER_CONT_NAME" CODE_BODY="METHOD onactionenter_cont_name .
  break bcuser.
  DATA l_name TYPE string.

  l_name = wdevent-&gt;get_name( ).
ENDMETHOD.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOAFTERACTION" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOAFTERACTION" CODE_BODY="method WDDOAFTERACTION .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOBEFOREACTION" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOBEFOREACTION" CODE_BODY="method WDDOBEFOREACTION .
*  data lo_api_controller type ref to if_wd_view_controller.
*  data lo_action         type ref to if_wd_action.

*  lo_api_controller = wd_this-&gt;wd_get_api( ).
*  lo_action = lo_api_controller-&gt;get_current_action( ).

*  if lo_action is bound.
*    case lo_action-&gt;name.
*      when &apos;...&apos;.

*    endcase.
*  endif.
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOEXIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOEXIT" CODE_BODY="method WDDOEXIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOINIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOINIT" CODE_BODY="method WDDOINIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOMODIFYVIEW" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOMODIFYVIEW" CODE_BODY="method WDDOMODIFYVIEW .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOONCONTEXTMENU" CODE_BODY="method WDDOONCONTEXTMENU .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ADD_CONT_CLICK" LANGU="E" DESCRIPTION="Click the add container button"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ENTER_CONT_NAME" LANGU="E" DESCRIPTION="Enter container name"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONADD_CONT_CLICK" LANGU="E" DESCRIPTION="Click the add container button"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONENTER_CONT_NAME" LANGU="E" DESCRIPTION="Enter container name"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOAFTERACTION" LANGU="E" DESCRIPTION="Method for non-action specific operations before navigation"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOBEFOREACTION" LANGU="E" DESCRIPTION="Method for Validation of User Input"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOEXIT" LANGU="E" DESCRIPTION="Controller Clean-Up Method"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOINIT" LANGU="E" DESCRIPTION="Controller Initialization Method"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOMODIFYVIEW" LANGU="E" DESCRIPTION="Method for Modifying the View Before Rendering"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" LANGU="E" DESCRIPTION="Method for Modifying the Context Menu"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ADD_CONT_CLICK" PARAMETER_NAME="CONTEXT_ELEMENT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_ELEMENT" DISPLAY_NAME="CONTEXT_ELEMENT"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ADD_CONT_CLICK" PARAMETER_NAME="ID" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="STRING" DISPLAY_NAME="ID"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONADD_CONT_CLICK" PARAMETER_NAME="CONTEXT_ELEMENT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_ELEMENT" DISPLAY_NAME="CONTEXT_ELEMENT"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONADD_CONT_CLICK" PARAMETER_NAME="ID" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="STRING" DISPLAY_NAME="ID"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOMODIFYVIEW" PARAMETER_NAME="FIRST_TIME" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="WDY_BOOLEAN" DISPLAY_NAME="FIRST_TIME"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOMODIFYVIEW" PARAMETER_NAME="VIEW" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_VIEW" DISPLAY_NAME="VIEW"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="CONTEXT_MENU_EVENT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_MENU_EVENT" DISPLAY_NAME="CONTEXT_MENU_EVENT"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="CONTEXT_MENU_MANAGER" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_MENU_MANAGER" DISPLAY_NAME="CONTEXT_MENU_MANAGER"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="MENU" VERSION="I" PARAM_POSITION="3 " DECLARATION_TYPE="3" ABAP_TYPING="1" ABAP_TYPE="CL_WD_MENU" DISPLAY_NAME="MENU"/>
    <wdy_ctlr_usage COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CTLR_USAGE_NAME="0YD1RQ1864BNFQ0JAC4OH8155" VERSION="I" USED_CONTROLLER="COMPONENTCONTROLLER"/>
    <wdy_ctx_node COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="CONTEXT" VERSION="I" NODE_TYPE="CL_WDY_MD_CONTEXT_VALUE_NODE" NODE_POSITION="0 " COLLECTION_TYPE="03" CARDINALITY="01" SELECTION="01" SINGLETON="X" DISPLAY_NAME="CONTEXT" ABAP_TYPING="0" INIT_LEAD_SELECT="X"/>
    <wdy_ctx_node COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="ZIC_CONTAINER" VERSION="I" NODE_TYPE="CL_WDY_MD_CONTEXT_VALUE_NODE" PARENT_NODE_NAME="CONTEXT" NODE_POSITION="1 " COLLECTION_TYPE="03" CARDINALITY="01" SELECTION="00" DISPLAY_NAME="ZIC_CONTAINER" ABAP_TYPE="ZIC_CONTAINER" ABAP_TYPING="0" INIT_LEAD_SELECT="X"/>
    <wdy_ctx_attrib COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="ZIC_CONTAINER" ATTRIBUTE_NAME="CONT_NR" VERSION="I" ATTRIBUTE_TYPE="CL_WDY_MD_CTX_VALUE_ATTRIBUTE" ATTRIB_POSITION="1 " ABAP_TYPE="ZIC_CONTAINER-CONT_NR" ABAP_TYPING="0" DISPLAY_NAME="CONT_NR" VALUE_HELP_ID="AUTO:ZIC_CONTAINER" VALUE_HELP_MODE="0" NULL_AS_BLANK="X"/>
    <wdy_ctx_attrib COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="ZIC_CONTAINER" ATTRIBUTE_NAME="DESCRIPTION" VERSION="I" ATTRIBUTE_TYPE="CL_WDY_MD_CTX_VALUE_ATTRIBUTE" ATTRIB_POSITION="3 " ABAP_TYPE="ZIC_CONTAINER-DESCRIPTION" ABAP_TYPING="0" DISPLAY_NAME="DESCRIPTION" VALUE_HELP_MODE="0"/>
    <wdy_ctx_attrib COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="ZIC_CONTAINER" ATTRIBUTE_NAME="NAME" VERSION="I" ATTRIBUTE_TYPE="CL_WDY_MD_CTX_VALUE_ATTRIBUTE" ATTRIB_POSITION="2 " ABAP_TYPE="ZIC_CONTAINER-NAME" ABAP_TYPING="0" DISPLAY_NAME="NAME" VALUE_HELP_ID="AUTO:ZIC_CONTAINER" VALUE_HELP_MODE="0"/>
   </controller_definition>
  </view_definition>
  <view_definition COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" VERSION="A" TYPE="CL_WDY_MD_VIEW" VIEW_TYPE="00" LIFESPAN="0" VIEW_CONTROLLER="V_MAIN" ROOT_UI_CONT="ROOTUIELEMENTCONTAINER" DISPLAY_NAME="V_MAIN" VISIBILITY="00">
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="CONT_SEARCH_VC" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_VIEW_CNT_UI_ELEMENT" DISPLAY_NAME="CONT_SEARCH_VC" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="VIEW_CONTAINER_UIELEMENT" PARENT_NAME="LEFT_CONTAINER" AGGREGATION_NAME="CHILDREN"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="CONT_SEARCH_VC_LAYOUT_DATA" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_DATA" DISPLAY_NAME="CONT_SEARCH_VC_LAYOUT_DATA" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_DATA" PARENT_NAME="CONT_SEARCH_VC" AGGREGATION_NAME="LAYOUT_DATA"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_TRANSP_CONTAINER" DISPLAY_NAME="LEFT_CONTAINER" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="TRANSPARENT_CONTAINER" PARENT_NAME="ROOTUIELEMENTCONTAINER" AGGREGATION_NAME="CHILDREN"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LAYOUT" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_LAYOUT" DISPLAY_NAME="LEFT_CONTAINER_LAYOUT" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_LAYOUT" PARENT_NAME="LEFT_CONTAINER" AGGREGATION_NAME="LAYOUT"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LD" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_DATA" DISPLAY_NAME="LEFT_CONTAINER_LD" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_DATA" PARENT_NAME="LEFT_CONTAINER" AGGREGATION_NAME="LAYOUT_DATA"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER" VERSION="I" ELEMENT_POSITION="2 " UI_ELEMENT_TYPE="CL_WDY_MD_TRANSP_CONTAINER" DISPLAY_NAME="RIGHT_CONTAINER" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="TRANSPARENT_CONTAINER" PARENT_NAME="ROOTUIELEMENTCONTAINER" AGGREGATION_NAME="CHILDREN"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LAYOUT" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_LAYOUT" DISPLAY_NAME="RIGHT_CONTAINER_LAYOUT" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_LAYOUT" PARENT_NAME="RIGHT_CONTAINER" AGGREGATION_NAME="LAYOUT"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LD" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_DATA" DISPLAY_NAME="RIGHT_CONTAINER_LD" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_DATA" PARENT_NAME="RIGHT_CONTAINER" AGGREGATION_NAME="LAYOUT_DATA"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" ELEMENT_POSITION="0 " UI_ELEMENT_TYPE="CL_WDY_MD_TRANSP_CONTAINER" DISPLAY_NAME="ROOTUIELEMENTCONTAINER" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="TRANSPARENT_CONTAINER"/>
   <wdy_ui_element COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" ELEMENT_POSITION="1 " UI_ELEMENT_TYPE="CL_WDY_MD_GRID_LAYOUT" DISPLAY_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" UI_ELEM_DEF_LIB="STANDARD" UI_ELEMENT_DEF="GRID_LAYOUT" PARENT_NAME="ROOTUIELEMENTCONTAINER" AGGREGATION_NAME="LAYOUT"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="CONT_SEARCH_VC" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="CONT_SEARCH_VC" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="CONT_SEARCH_VC" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="CONT_SEARCH_VC_LAYOUT_DATA" VERSION="I" PROPERTY_NAME="CELL_BACKGROUND_DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="CONT_SEARCH_VC_LAYOUT_DATA" VERSION="I" PROPERTY_NAME="COL_SPAN" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="CONT_SEARCH_VC_LAYOUT_DATA" VERSION="I" PROPERTY_NAME="H_ALIGN" PROPERTY_VALUE="08"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="CONT_SEARCH_VC_LAYOUT_DATA" VERSION="I" PROPERTY_NAME="V_ALIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER" VERSION="I" PROPERTY_NAME="IS_LAYOUT_CONTAINER" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER" VERSION="I" PROPERTY_NAME="SCROLLING_MODE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER" VERSION="I" PROPERTY_NAME="SCROLL_LEFT" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER" VERSION="I" PROPERTY_NAME="SCROLL_TOP" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_PADDING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_SPACING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="COL_COUNT" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_HORIZONTALLY" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_VERTICALLY" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LD" VERSION="I" PROPERTY_NAME="CELL_BACKGROUND_DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LD" VERSION="I" PROPERTY_NAME="COL_SPAN" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LD" VERSION="I" PROPERTY_NAME="H_ALIGN" PROPERTY_VALUE="08"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="LEFT_CONTAINER_LD" VERSION="I" PROPERTY_NAME="V_ALIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER" VERSION="I" PROPERTY_NAME="IS_LAYOUT_CONTAINER" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER" VERSION="I" PROPERTY_NAME="SCROLLING_MODE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER" VERSION="I" PROPERTY_NAME="SCROLL_LEFT" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER" VERSION="I" PROPERTY_NAME="SCROLL_TOP" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_PADDING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_SPACING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="COL_COUNT" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_HORIZONTALLY" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_VERTICALLY" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LD" VERSION="I" PROPERTY_NAME="CELL_BACKGROUND_DESIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LD" VERSION="I" PROPERTY_NAME="COL_SPAN" PROPERTY_VALUE="1"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LD" VERSION="I" PROPERTY_NAME="H_ALIGN" PROPERTY_VALUE="08"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="RIGHT_CONTAINER_LD" VERSION="I" PROPERTY_NAME="V_ALIGN" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="CONTEXT_MENU_BEHAVIOUR" PROPERTY_VALUE="00"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="ENABLED" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="IS_LAYOUT_CONTAINER" PROPERTY_VALUE="X"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="SCROLLING_MODE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="SCROLL_LEFT" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="SCROLL_TOP" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER" VERSION="I" PROPERTY_NAME="VISIBLE" PROPERTY_VALUE="02"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_PADDING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="CELL_SPACING" PROPERTY_VALUE="0"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="COL_COUNT" PROPERTY_VALUE="2"/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_HORIZONTALLY" PropText=""/>
   <wdy_ui_property COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" ELEMENT_NAME="ROOTUIELEMENTCONTAINER_LAYOUT" VERSION="I" PROPERTY_NAME="STRETCHED_VERTICALLY" PropText=""/>
   <wdy_view_cntr COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="V_MAIN" CONTAINER_NAME="CONT_SEARCH_VC" VERSION="I" UI_ELEMENT_NAME="CONT_SEARCH_VC" DISPLAY_NAME="CONT_SEARCH_VC"/>
   <controller_definition COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" VERSION="A" CONTROLLER_TYPE="01" CONTEXT="CONTEXT" DISPLAY_NAME="V_MAIN">
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOAFTERACTION" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOAFTERACTION" CODE_BODY="method WDDOAFTERACTION .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOBEFOREACTION" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOBEFOREACTION" CODE_BODY="method WDDOBEFOREACTION .
*  data lo_api_controller type ref to if_wd_view_controller.
*  data lo_action         type ref to if_wd_action.

*  lo_api_controller = wd_this-&gt;wd_get_api( ).
*  lo_action = lo_api_controller-&gt;get_current_action( ).

*  if lo_action is bound.
*    case lo_action-&gt;name.
*      when &apos;...&apos;.

*    endcase.
*  endif.
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOEXIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOEXIT" CODE_BODY="method WDDOEXIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOINIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOINIT" CODE_BODY="method WDDOINIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOMODIFYVIEW" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOMODIFYVIEW" CODE_BODY="method WDDOMODIFYVIEW .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOONCONTEXTMENU" CODE_BODY="method WDDOONCONTEXTMENU .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOAFTERACTION" LANGU="E" DESCRIPTION="Method for non-action specific operations before navigation"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOBEFOREACTION" LANGU="E" DESCRIPTION="Method for Validation of User Input"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOEXIT" LANGU="E" DESCRIPTION="Controller Clean-Up Method"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOINIT" LANGU="E" DESCRIPTION="Controller Initialization Method"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOMODIFYVIEW" LANGU="E" DESCRIPTION="Method for Modifying the View Before Rendering"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" LANGU="E" DESCRIPTION="Method for Modifying the Context Menu"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOMODIFYVIEW" PARAMETER_NAME="FIRST_TIME" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="WDY_BOOLEAN" DISPLAY_NAME="FIRST_TIME"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOMODIFYVIEW" PARAMETER_NAME="VIEW" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_VIEW" DISPLAY_NAME="VIEW"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="CONTEXT_MENU_EVENT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_MENU_EVENT" DISPLAY_NAME="CONTEXT_MENU_EVENT"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="CONTEXT_MENU_MANAGER" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_MENU_MANAGER" DISPLAY_NAME="CONTEXT_MENU_MANAGER"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="MENU" VERSION="I" PARAM_POSITION="3 " DECLARATION_TYPE="3" ABAP_TYPING="1" ABAP_TYPE="CL_WD_MENU" DISPLAY_NAME="MENU"/>
    <wdy_ctlr_usage COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CTLR_USAGE_NAME="0YD1RQ1864BNFQ0J02I6FFAA1" VERSION="I" USED_CONTROLLER="COMPONENTCONTROLLER"/>
    <wdy_ctx_node COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" NODE_NAME="CONTEXT" VERSION="I" NODE_TYPE="CL_WDY_MD_CONTEXT_VALUE_NODE" NODE_POSITION="0 " COLLECTION_TYPE="03" CARDINALITY="01" SELECTION="01" SINGLETON="X" DISPLAY_NAME="CONTEXT" ABAP_TYPING="0" INIT_LEAD_SELECT="X"/>
   </controller_definition>
  </view_definition>
  <view_definition COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="W_MAIN" VERSION="A" TYPE="CL_WDY_MD_WINDOW" VIEW_TYPE="00" LIFESPAN="0" VIEW_CONTROLLER="W_MAIN" DISPLAY_NAME="W_MAIN" DEF_ROOT_NODE="V_MAIN_USAGE_0" VISIBILITY="00">
   <view_window title=""/>
   <wdy_iobound_plug COMPONENT_NAME="ZIC_CONTAINER_WD" VIEW_NAME="W_MAIN" PLUG_NAME="DEFAULT" VERSION="I" PLUG_TYPE="CL_WDY_MD_INBOUND_PLUG" IN_PLUG_TYPE="1" OUT_PLUG_TYPE="0" DISPLAY_NAME="DEFAULT" IS_INTF_ITEM="X"/>
   <wdy_vsh_node COMPONENT_NAME="ZIC_CONTAINER_WD" WINDOW_NAME="W_MAIN" VSH_NODE_NAME="V_CONT_SEARCH_USAGE_1" VERSION="I" VSH_NODE_TYPE="CL_WDY_MD_VIEW_USAGE" PHOLDER_OWNER="V_MAIN_USAGE_0" PHOLDER_NAME="CONT_SEARCH_VC_VCA_1" USED_VIEW="V_CONT_SEARCH" DISPLAY_NAME="V_CONT_SEARCH_USAGE_1"/>
   <wdy_vsh_node COMPONENT_NAME="ZIC_CONTAINER_WD" WINDOW_NAME="W_MAIN" VSH_NODE_NAME="V_MAIN_USAGE_0" VERSION="I" VSH_NODE_TYPE="CL_WDY_MD_VIEW_USAGE" USED_VIEW="V_MAIN" DISPLAY_NAME="V_MAIN_USAGE_0"/>
   <wdy_vsh_pholder COMPONENT_NAME="ZIC_CONTAINER_WD" WINDOW_NAME="W_MAIN" VSH_NODE_NAME="V_MAIN_USAGE_0" VSH_PHOLDER_NAME="CONT_SEARCH_VC_VCA_1" VERSION="I" VSH_PHOLDER_TYPE="CL_WDY_MD_VIEW_CNT_ASSIGNMENT" DISPLAY_NAME="CONT_SEARCH_VC_VCA_1" ASSIGNED_CNTR="CONT_SEARCH_VC" DEFAULT_NODE="V_CONT_SEARCH_USAGE_1" X="0 " Y="0 " Z="0 "/>
   <controller_definition COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" VERSION="A" CONTROLLER_TYPE="06" CONTEXT="CONTEXT" DISPLAY_NAME="W_MAIN">
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="HANDLEDEFAULT" VERSION="I" CMPTYPE="CL_WDY_MD_CTLR_EVENT_HANDLER" CMP_POSITION="1 " VISIBILITY="2" REF_VIEW_NAME="W_MAIN" REF_PLUG_NAME="DEFAULT" DISPLAY_NAME="HANDLEDEFAULT" CODE_BODY="method HANDLEDEFAULT .
endmethod." ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOEXIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOEXIT" CODE_BODY="method WDDOEXIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOINIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOINIT" CODE_BODY="method WDDOINIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONCLOSE" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOONCLOSE" CODE_BODY="method WDDOONCLOSE .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONOPEN" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOONOPEN" CODE_BODY="method WDDOONOPEN .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOEXIT" LANGU="E" DESCRIPTION="Controller Clean-Up Method"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOINIT" LANGU="E" DESCRIPTION="Controller Initialization Method"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONCLOSE" LANGU="E" DESCRIPTION="Handling When Closing the Window"/>
    <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONOPEN" LANGU="E" DESCRIPTION="Handling When Opening the Window"/>
    <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONOPEN" PARAMETER_NAME="WINDOW_DESCR" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_WINDOW_DESCRIPTION" DISPLAY_NAME="WINDOW_DESCR"/>
    <wdy_ctlr_usage COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CTLR_USAGE_NAME="0YD1RQ1864BNFQ0J02I6FF3YH" VERSION="I" USED_CONTROLLER="COMPONENTCONTROLLER"/>
    <wdy_ctx_node COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" NODE_NAME="CONTEXT" VERSION="I" NODE_TYPE="CL_WDY_MD_CONTEXT_VALUE_NODE" NODE_POSITION="0 " COLLECTION_TYPE="03" CARDINALITY="01" SELECTION="01" SINGLETON="X" DISPLAY_NAME="CONTEXT" ABAP_TYPING="0" INIT_LEAD_SELECT="X"/>
   </controller_definition>
  </view_definition>
  <controller_definition COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" VERSION="A" CONTROLLER_TYPE="02" CONTEXT="CONTEXT" DISPLAY_NAME="COMPONENTCONTROLLER" RUNTIME_OBJECT="ZIWCI_IC_CONTAINER_WD">
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOAPPLICATIONSTATECHANGE" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOAPPLICATIONSTATECHANGE" CODE_BODY="method WDDOAPPLICATIONSTATECHANGE .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOBEFORENAVIGATION" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOBEFORENAVIGATION" CODE_BODY="method WDDOBEFORENAVIGATION .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOEXIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOEXIT" CODE_BODY="method WDDOEXIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOINIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOINIT" CODE_BODY="method WDDOINIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOPOSTPROCESSING" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOPOSTPROCESSING" CODE_BODY="method WDDOPOSTPROCESSING .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOAPPLICATIONSTATECHANGE" LANGU="E" DESCRIPTION="Handling for Suspending and Resuming an Application"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOBEFORENAVIGATION" LANGU="E" DESCRIPTION="Error Handling by Application Before Navigation"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOEXIT" LANGU="E" DESCRIPTION="Controller Clean-Up Method"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOINIT" LANGU="E" DESCRIPTION="Controller Initialization Method"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOPOSTPROCESSING" LANGU="E" DESCRIPTION="Prepare Output"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOAPPLICATIONSTATECHANGE" PARAMETER_NAME="STATE_CHANGE" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_APPLICATION_STATE_CHANGE" DISPLAY_NAME="STATE_CHANGE"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOBEFORENAVIGATION" PARAMETER_NAME="IS_CURRENT_ROOT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="WDY_BOOLEAN" DISPLAY_NAME="IS_CURRENT_ROOT"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOEXIT" PARAMETER_NAME="REASON" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="WDR_APPL_EXIT_REASON" DISPLAY_NAME="REASON"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" CMPNAME="WDDOPOSTPROCESSING" PARAMETER_NAME="IS_CURRENT_ROOT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="WDY_BOOLEAN" DISPLAY_NAME="IS_CURRENT_ROOT"/>
   <wdy_ctx_node COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="COMPONENTCONTROLLER" NODE_NAME="CONTEXT" VERSION="I" NODE_TYPE="CL_WDY_MD_CONTEXT_VALUE_NODE" NODE_POSITION="0 " COLLECTION_TYPE="03" CARDINALITY="01" SELECTION="01" SINGLETON="X" DISPLAY_NAME="CONTEXT" ABAP_TYPING="0" INIT_LEAD_SELECT="X" IS_INTF_ITEM="X"/>
  </controller_definition>
  <controller_definition COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="EMPTYVIEW" VERSION="A" CONTROLLER_TYPE="01" DISPLAY_NAME="EMPTYVIEW"/>
  <controller_definition COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" VERSION="A" CONTROLLER_TYPE="01" CONTEXT="CONTEXT" DISPLAY_NAME="V_CONT_SEARCH">
   <wdy_controllert COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" LANGU="E" DESCRIPTION="Container search view"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ADD_CONT_CLICK" VERSION="I" CMPTYPE="CL_WDY_MD_ACTION" CMP_POSITION="0 " VISIBILITY="0" DISPLAY_NAME="ADD_CONT_CLICK" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ENTER_CONT_NAME" VERSION="I" CMPTYPE="CL_WDY_MD_ACTION" CMP_POSITION="0 " VISIBILITY="0" DISPLAY_NAME="ENTER_CONT_NAME" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONADD_CONT_CLICK" VERSION="I" CMPTYPE="CL_WDY_MD_CTLR_EVENT_HANDLER" CMP_POSITION="0 " VISIBILITY="2" REF_CTLR_NAME="V_CONT_SEARCH" REF_CMPNAME="ADD_CONT_CLICK" DISPLAY_NAME="ONACTIONADD_CONT_CLICK" CODE_BODY="method ONACTIONADD_CONT_CLICK .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONENTER_CONT_NAME" VERSION="I" CMPTYPE="CL_WDY_MD_CTLR_EVENT_HANDLER" CMP_POSITION="0 " VISIBILITY="2" REF_CTLR_NAME="V_CONT_SEARCH" REF_CMPNAME="ENTER_CONT_NAME" DISPLAY_NAME="ONACTIONENTER_CONT_NAME" CODE_BODY="METHOD onactionenter_cont_name .
  break bcuser.
  DATA l_name TYPE string.

  l_name = wdevent-&gt;get_name( ).
ENDMETHOD.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOAFTERACTION" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOAFTERACTION" CODE_BODY="method WDDOAFTERACTION .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOBEFOREACTION" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOBEFOREACTION" CODE_BODY="method WDDOBEFOREACTION .
*  data lo_api_controller type ref to if_wd_view_controller.
*  data lo_action         type ref to if_wd_action.

*  lo_api_controller = wd_this-&gt;wd_get_api( ).
*  lo_action = lo_api_controller-&gt;get_current_action( ).

*  if lo_action is bound.
*    case lo_action-&gt;name.
*      when &apos;...&apos;.

*    endcase.
*  endif.
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOEXIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOEXIT" CODE_BODY="method WDDOEXIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOINIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOINIT" CODE_BODY="method WDDOINIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOMODIFYVIEW" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOMODIFYVIEW" CODE_BODY="method WDDOMODIFYVIEW .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOONCONTEXTMENU" CODE_BODY="method WDDOONCONTEXTMENU .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ADD_CONT_CLICK" LANGU="E" DESCRIPTION="Click the add container button"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ENTER_CONT_NAME" LANGU="E" DESCRIPTION="Enter container name"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONADD_CONT_CLICK" LANGU="E" DESCRIPTION="Click the add container button"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONENTER_CONT_NAME" LANGU="E" DESCRIPTION="Enter container name"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOAFTERACTION" LANGU="E" DESCRIPTION="Method for non-action specific operations before navigation"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOBEFOREACTION" LANGU="E" DESCRIPTION="Method for Validation of User Input"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOEXIT" LANGU="E" DESCRIPTION="Controller Clean-Up Method"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOINIT" LANGU="E" DESCRIPTION="Controller Initialization Method"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOMODIFYVIEW" LANGU="E" DESCRIPTION="Method for Modifying the View Before Rendering"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" LANGU="E" DESCRIPTION="Method for Modifying the Context Menu"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ADD_CONT_CLICK" PARAMETER_NAME="CONTEXT_ELEMENT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_ELEMENT" DISPLAY_NAME="CONTEXT_ELEMENT"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ADD_CONT_CLICK" PARAMETER_NAME="ID" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="STRING" DISPLAY_NAME="ID"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONADD_CONT_CLICK" PARAMETER_NAME="CONTEXT_ELEMENT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_ELEMENT" DISPLAY_NAME="CONTEXT_ELEMENT"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="ONACTIONADD_CONT_CLICK" PARAMETER_NAME="ID" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="STRING" DISPLAY_NAME="ID"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOMODIFYVIEW" PARAMETER_NAME="FIRST_TIME" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="WDY_BOOLEAN" DISPLAY_NAME="FIRST_TIME"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOMODIFYVIEW" PARAMETER_NAME="VIEW" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_VIEW" DISPLAY_NAME="VIEW"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="CONTEXT_MENU_EVENT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_MENU_EVENT" DISPLAY_NAME="CONTEXT_MENU_EVENT"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="CONTEXT_MENU_MANAGER" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_MENU_MANAGER" DISPLAY_NAME="CONTEXT_MENU_MANAGER"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="MENU" VERSION="I" PARAM_POSITION="3 " DECLARATION_TYPE="3" ABAP_TYPING="1" ABAP_TYPE="CL_WD_MENU" DISPLAY_NAME="MENU"/>
   <wdy_ctlr_usage COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" CTLR_USAGE_NAME="0YD1RQ1864BNFQ0JAC4OH8155" VERSION="I" USED_CONTROLLER="COMPONENTCONTROLLER"/>
   <wdy_ctx_node COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="CONTEXT" VERSION="I" NODE_TYPE="CL_WDY_MD_CONTEXT_VALUE_NODE" NODE_POSITION="0 " COLLECTION_TYPE="03" CARDINALITY="01" SELECTION="01" SINGLETON="X" DISPLAY_NAME="CONTEXT" ABAP_TYPING="0" INIT_LEAD_SELECT="X"/>
   <wdy_ctx_node COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="ZIC_CONTAINER" VERSION="I" NODE_TYPE="CL_WDY_MD_CONTEXT_VALUE_NODE" PARENT_NODE_NAME="CONTEXT" NODE_POSITION="1 " COLLECTION_TYPE="03" CARDINALITY="01" SELECTION="00" DISPLAY_NAME="ZIC_CONTAINER" ABAP_TYPE="ZIC_CONTAINER" ABAP_TYPING="0" INIT_LEAD_SELECT="X"/>
   <wdy_ctx_attrib COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="ZIC_CONTAINER" ATTRIBUTE_NAME="CONT_NR" VERSION="I" ATTRIBUTE_TYPE="CL_WDY_MD_CTX_VALUE_ATTRIBUTE" ATTRIB_POSITION="1 " ABAP_TYPE="ZIC_CONTAINER-CONT_NR" ABAP_TYPING="0" DISPLAY_NAME="CONT_NR" VALUE_HELP_ID="AUTO:ZIC_CONTAINER" VALUE_HELP_MODE="0" NULL_AS_BLANK="X"/>
   <wdy_ctx_attrib COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="ZIC_CONTAINER" ATTRIBUTE_NAME="DESCRIPTION" VERSION="I" ATTRIBUTE_TYPE="CL_WDY_MD_CTX_VALUE_ATTRIBUTE" ATTRIB_POSITION="3 " ABAP_TYPE="ZIC_CONTAINER-DESCRIPTION" ABAP_TYPING="0" DISPLAY_NAME="DESCRIPTION" VALUE_HELP_MODE="0"/>
   <wdy_ctx_attrib COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_CONT_SEARCH" NODE_NAME="ZIC_CONTAINER" ATTRIBUTE_NAME="NAME" VERSION="I" ATTRIBUTE_TYPE="CL_WDY_MD_CTX_VALUE_ATTRIBUTE" ATTRIB_POSITION="2 " ABAP_TYPE="ZIC_CONTAINER-NAME" ABAP_TYPING="0" DISPLAY_NAME="NAME" VALUE_HELP_ID="AUTO:ZIC_CONTAINER" VALUE_HELP_MODE="0"/>
  </controller_definition>
  <controller_definition COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" VERSION="A" CONTROLLER_TYPE="01" CONTEXT="CONTEXT" DISPLAY_NAME="V_MAIN">
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOAFTERACTION" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOAFTERACTION" CODE_BODY="method WDDOAFTERACTION .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOBEFOREACTION" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOBEFOREACTION" CODE_BODY="method WDDOBEFOREACTION .
*  data lo_api_controller type ref to if_wd_view_controller.
*  data lo_action         type ref to if_wd_action.

*  lo_api_controller = wd_this-&gt;wd_get_api( ).
*  lo_action = lo_api_controller-&gt;get_current_action( ).

*  if lo_action is bound.
*    case lo_action-&gt;name.
*      when &apos;...&apos;.

*    endcase.
*  endif.
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOEXIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOEXIT" CODE_BODY="method WDDOEXIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOINIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOINIT" CODE_BODY="method WDDOINIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOMODIFYVIEW" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOMODIFYVIEW" CODE_BODY="method WDDOMODIFYVIEW .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="0 " VISIBILITY="2" DISPLAY_NAME="WDDOONCONTEXTMENU" CODE_BODY="method WDDOONCONTEXTMENU .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOAFTERACTION" LANGU="E" DESCRIPTION="Method for non-action specific operations before navigation"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOBEFOREACTION" LANGU="E" DESCRIPTION="Method for Validation of User Input"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOEXIT" LANGU="E" DESCRIPTION="Controller Clean-Up Method"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOINIT" LANGU="E" DESCRIPTION="Controller Initialization Method"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOMODIFYVIEW" LANGU="E" DESCRIPTION="Method for Modifying the View Before Rendering"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" LANGU="E" DESCRIPTION="Method for Modifying the Context Menu"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOMODIFYVIEW" PARAMETER_NAME="FIRST_TIME" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="0" ABAP_TYPE="WDY_BOOLEAN" DISPLAY_NAME="FIRST_TIME"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOMODIFYVIEW" PARAMETER_NAME="VIEW" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_VIEW" DISPLAY_NAME="VIEW"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="CONTEXT_MENU_EVENT" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_MENU_EVENT" DISPLAY_NAME="CONTEXT_MENU_EVENT"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="CONTEXT_MENU_MANAGER" VERSION="I" PARAM_POSITION="2 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_CONTEXT_MENU_MANAGER" DISPLAY_NAME="CONTEXT_MENU_MANAGER"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CMPNAME="WDDOONCONTEXTMENU" PARAMETER_NAME="MENU" VERSION="I" PARAM_POSITION="3 " DECLARATION_TYPE="3" ABAP_TYPING="1" ABAP_TYPE="CL_WD_MENU" DISPLAY_NAME="MENU"/>
   <wdy_ctlr_usage COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" CTLR_USAGE_NAME="0YD1RQ1864BNFQ0J02I6FFAA1" VERSION="I" USED_CONTROLLER="COMPONENTCONTROLLER"/>
   <wdy_ctx_node COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="V_MAIN" NODE_NAME="CONTEXT" VERSION="I" NODE_TYPE="CL_WDY_MD_CONTEXT_VALUE_NODE" NODE_POSITION="0 " COLLECTION_TYPE="03" CARDINALITY="01" SELECTION="01" SINGLETON="X" DISPLAY_NAME="CONTEXT" ABAP_TYPING="0" INIT_LEAD_SELECT="X"/>
  </controller_definition>
  <controller_definition COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" VERSION="A" CONTROLLER_TYPE="06" CONTEXT="CONTEXT" DISPLAY_NAME="W_MAIN">
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="HANDLEDEFAULT" VERSION="I" CMPTYPE="CL_WDY_MD_CTLR_EVENT_HANDLER" CMP_POSITION="1 " VISIBILITY="2" REF_VIEW_NAME="W_MAIN" REF_PLUG_NAME="DEFAULT" DISPLAY_NAME="HANDLEDEFAULT" CODE_BODY="method HANDLEDEFAULT .
endmethod." ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOEXIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOEXIT" CODE_BODY="method WDDOEXIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOINIT" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOINIT" CODE_BODY="method WDDOINIT .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONCLOSE" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOONCLOSE" CODE_BODY="method WDDOONCLOSE .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compo COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONOPEN" VERSION="I" CMPTYPE="CL_WDY_MD_CONTROLLER_METHOD" CMP_POSITION="1 " VISIBILITY="2" DISPLAY_NAME="WDDOONOPEN" CODE_BODY="method WDDOONOPEN .
endmethod.
" ACTION_TYPE="0" ABAP_TYPING="0"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOEXIT" LANGU="E" DESCRIPTION="Controller Clean-Up Method"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOINIT" LANGU="E" DESCRIPTION="Controller Initialization Method"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONCLOSE" LANGU="E" DESCRIPTION="Handling When Closing the Window"/>
   <wdy_ctlr_compot COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONOPEN" LANGU="E" DESCRIPTION="Handling When Opening the Window"/>
   <wdy_ctlr_param COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CMPNAME="WDDOONOPEN" PARAMETER_NAME="WINDOW_DESCR" VERSION="I" PARAM_POSITION="1 " DECLARATION_TYPE="0" ABAP_TYPING="1" ABAP_TYPE="IF_WD_WINDOW_DESCRIPTION" DISPLAY_NAME="WINDOW_DESCR"/>
   <wdy_ctlr_usage COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" CTLR_USAGE_NAME="0YD1RQ1864BNFQ0J02I6FF3YH" VERSION="I" USED_CONTROLLER="COMPONENTCONTROLLER"/>
   <wdy_ctx_node COMPONENT_NAME="ZIC_CONTAINER_WD" CONTROLLER_NAME="W_MAIN" NODE_NAME="CONTEXT" VERSION="I" NODE_TYPE="CL_WDY_MD_CONTEXT_VALUE_NODE" NODE_POSITION="0 " COLLECTION_TYPE="03" CARDINALITY="01" SELECTION="01" SINGLETON="X" DISPLAY_NAME="CONTEXT" ABAP_TYPING="0" INIT_LEAD_SELECT="X"/>
  </controller_definition>
 </WDYN>
</nugget>
